Suggestion 16: Optional Dependencies Handling

PROBLEM:
Better handling needed for optional dependencies and feature availability.

CURRENT APPROACH:
Basic try/except blocks for imports.

SOLUTION:
Implement feature detection and graceful degradation:

```python
class FeatureManager:
    def __init__(self):
        self.features = {
            'tts': self._check_tts(),
            'advanced_audio': self._check_audio_libs(),
            'database': self._check_database(),
        }
    
    def _check_tts(self):
        try:
            import pyttsx3
            return True
        except ImportError:
            return False
    
    def is_available(self, feature):
        return self.features.get(feature, False)
    
    def require_feature(self, feature, user_message=None):
        if not self.is_available(feature):
            msg = user_message or f"{feature} not available"
            messagebox.showwarning("Feature Unavailable", msg)
            return False
        return True

# Usage:
def speak_text(self):
    if not self.features.require_feature('tts', 
        "TTS not available. Install pyttsx3 to enable speech."):
        return
    # TTS implementation
```

BENEFITS:
- Graceful feature degradation
- Clear user feedback
- Better dependency management
- Professional error handling
