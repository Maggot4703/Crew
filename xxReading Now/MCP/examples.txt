# MCP - Examples and Code Samples

## Example 1: Simple File Server

### Server Implementation
```python
# file_server.py
import asyncio
import os
from pathlib import Path
from mcp import create_server, types

# Create MCP server for file operations
server = create_server("file-server")

# Define the directory to serve
SERVE_DIR = Path("./data")

@server.list_resources()
async def list_resources() -> list[types.Resource]:
    """List all files in the served directory."""
    resources = []
    
    if SERVE_DIR.exists():
        for file_path in SERVE_DIR.iterdir():
            if file_path.is_file():
                resources.append(
                    types.Resource(
                        uri=f"file://{file_path.name}",
                        name=file_path.name,
                        description=f"File: {file_path.name}",
                        mimeType="text/plain" if file_path.suffix == ".txt" else "application/octet-stream"
                    )
                )
    
    return resources

@server.read_resource()
async def read_resource(uri: str) -> str:
    """Read content of a specific file."""
    if not uri.startswith("file://"):
        raise ValueError("Invalid URI format")
    
    filename = uri[7:]  # Remove "file://" prefix
    file_path = SERVE_DIR / filename
    
    if not file_path.exists() or not file_path.is_file():
        raise FileNotFoundError(f"File not found: {filename}")
    
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            return f.read()
    except UnicodeDecodeError:
        # For binary files, return base64 encoded content
        import base64
        with open(file_path, 'rb') as f:
            return base64.b64encode(f.read()).decode('utf-8')

@server.list_tools()
async def list_tools() -> list[types.Tool]:
    """List available file operations."""
    return [
        types.Tool(
            name="write_file",
            description="Write content to a file",
            inputSchema={
                "type": "object",
                "properties": {
                    "filename": {
                        "type": "string",
                        "description": "Name of the file to write"
                    },
                    "content": {
                        "type": "string",
                        "description": "Content to write to the file"
                    }
                },
                "required": ["filename", "content"]
            }
        ),
        types.Tool(
            name="delete_file",
            description="Delete a file",
            inputSchema={
                "type": "object",
                "properties": {
                    "filename": {
                        "type": "string",
                        "description": "Name of the file to delete"
                    }
                },
                "required": ["filename"]
            }
        )
    ]

@server.call_tool()
async def call_tool(name: str, arguments: dict) -> str:
    """Execute file operations."""
    if name == "write_file":
        filename = arguments["filename"]
        content = arguments["content"]
        
        file_path = SERVE_DIR / filename
        SERVE_DIR.mkdir(exist_ok=True)
        
        with open(file_path, 'w', encoding='utf-8') as f:
            f.write(content)
        
        return f"Successfully wrote to {filename}"
    
    elif name == "delete_file":
        filename = arguments["filename"]
        file_path = SERVE_DIR / filename
        
        if file_path.exists():
            file_path.unlink()
            return f"Successfully deleted {filename}"
        else:
            return f"File {filename} not found"
    
    else:
        raise ValueError(f"Unknown tool: {name}")

if __name__ == "__main__":
    asyncio.run(server.run())
```

### Client Usage
```python
# client.py
import asyncio
from mcp import create_client

async def demo_file_operations():
    # Connect to the file server
    client = create_client("stdio", ["python", "file_server.py"])
    
    try:
        # List available resources
        print("Available files:")
        resources = await client.list_resources()
        for resource in resources:
            print(f"  - {resource.name}: {resource.uri}")
        
        # Write a new file
        result = await client.call_tool("write_file", {
            "filename": "example.txt",
            "content": "Hello from MCP!"
        })
        print(f"Write result: {result}")
        
        # Read the file back
        content = await client.read_resource("file://example.txt")
        print(f"File content: {content}")
        
        # List files again to see the new file
        resources = await client.list_resources()
        print(f"Files after write: {[r.name for r in resources]}")
        
    finally:
        await client.close()

if __name__ == "__main__":
    asyncio.run(demo_file_operations())
```

## Example 2: Database Integration Server

```python
# database_server.py
import asyncio
import sqlite3
import json
from typing import List, Dict, Any
from mcp import create_server, types

server = create_server("database-server")

# Initialize SQLite database
def init_database():
    conn = sqlite3.connect("example.db")
    cursor = conn.cursor()
    
    # Create sample table
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY,
            name TEXT NOT NULL,
            email TEXT UNIQUE NOT NULL,
            age INTEGER
        )
    """)
    
    # Insert sample data
    cursor.execute("SELECT COUNT(*) FROM users")
    if cursor.fetchone()[0] == 0:
        sample_users = [
            ("Alice Smith", "alice@example.com", 30),
            ("Bob Johnson", "bob@example.com", 25),
            ("Carol Brown", "carol@example.com", 35)
        ]
        cursor.executemany(
            "INSERT INTO users (name, email, age) VALUES (?, ?, ?)",
            sample_users
        )
    
    conn.commit()
    conn.close()

# Initialize database on startup
init_database()

@server.list_resources()
async def list_resources() -> List[types.Resource]:
    return [
        types.Resource(
            uri="db://users",
            name="Users Table",
            description="User information database",
            mimeType="application/json"
        ),
        types.Resource(
            uri="db://schema",
            name="Database Schema",
            description="Database table structure",
            mimeType="application/json"
        )
    ]

@server.read_resource()
async def read_resource(uri: str) -> str:
    conn = sqlite3.connect("example.db")
    conn.row_factory = sqlite3.Row
    cursor = conn.cursor()
    
    try:
        if uri == "db://users":
            cursor.execute("SELECT * FROM users")
            users = [dict(row) for row in cursor.fetchall()]
            return json.dumps(users, indent=2)
        
        elif uri == "db://schema":
            cursor.execute("PRAGMA table_info(users)")
            schema = [dict(row) for row in cursor.fetchall()]
            return json.dumps(schema, indent=2)
        
        else:
            raise ValueError(f"Unknown resource: {uri}")
    
    finally:
        conn.close()

@server.list_tools()
async def list_tools() -> List[types.Tool]:
    return [
        types.Tool(
            name="add_user",
            description="Add a new user to the database",
            inputSchema={
                "type": "object",
                "properties": {
                    "name": {"type": "string"},
                    "email": {"type": "string"},
                    "age": {"type": "integer", "minimum": 0}
                },
                "required": ["name", "email"]
            }
        ),
        types.Tool(
            name="query_users",
            description="Query users with optional filters",
            inputSchema={
                "type": "object",
                "properties": {
                    "filter": {"type": "string", "description": "SQL WHERE clause"},
                    "limit": {"type": "integer", "minimum": 1, "maximum": 100}
                }
            }
        ),
        types.Tool(
            name="update_user",
            description="Update user information",
            inputSchema={
                "type": "object",
                "properties": {
                    "user_id": {"type": "integer"},
                    "name": {"type": "string"},
                    "email": {"type": "string"},
                    "age": {"type": "integer", "minimum": 0}
                },
                "required": ["user_id"]
            }
        )
    ]

@server.call_tool()
async def call_tool(name: str, arguments: Dict[str, Any]) -> str:
    conn = sqlite3.connect("example.db")
    conn.row_factory = sqlite3.Row
    cursor = conn.cursor()
    
    try:
        if name == "add_user":
            cursor.execute(
                "INSERT INTO users (name, email, age) VALUES (?, ?, ?)",
                (arguments["name"], arguments["email"], arguments.get("age"))
            )
            conn.commit()
            return f"User {arguments['name']} added successfully"
        
        elif name == "query_users":
            query = "SELECT * FROM users"
            params = []
            
            if "filter" in arguments:
                query += f" WHERE {arguments['filter']}"
            
            if "limit" in arguments:
                query += " LIMIT ?"
                params.append(arguments["limit"])
            
            cursor.execute(query, params)
            users = [dict(row) for row in cursor.fetchall()]
            return json.dumps(users, indent=2)
        
        elif name == "update_user":
            user_id = arguments["user_id"]
            updates = []
            params = []
            
            for field in ["name", "email", "age"]:
                if field in arguments:
                    updates.append(f"{field} = ?")
                    params.append(arguments[field])
            
            if updates:
                params.append(user_id)
                query = f"UPDATE users SET {', '.join(updates)} WHERE id = ?"
                cursor.execute(query, params)
                conn.commit()
                return f"User {user_id} updated successfully"
            else:
                return "No fields to update"
        
        else:
            raise ValueError(f"Unknown tool: {name}")
    
    finally:
        conn.close()

if __name__ == "__main__":
    asyncio.run(server.run())
```

## Example 3: Web API Integration Server

```python
# web_api_server.py
import asyncio
import aiohttp
import json
from typing import List, Dict, Any
from mcp import create_server, types

server = create_server("web-api-server")

@server.list_resources()
async def list_resources() -> List[types.Resource]:
    return [
        types.Resource(
            uri="api://weather/current",
            name="Current Weather",
            description="Current weather data",
            mimeType="application/json"
        ),
        types.Resource(
            uri="api://news/headlines",
            name="News Headlines",
            description="Latest news headlines",
            mimeType="application/json"
        )
    ]

@server.read_resource()
async def read_resource(uri: str) -> str:
    async with aiohttp.ClientSession() as session:
        if uri == "api://weather/current":
            # Using OpenWeatherMap API (requires API key)
            api_key = "your_openweather_api_key"
            url = f"https://api.openweathermap.org/data/2.5/weather?q=London&appid={api_key}"
            
            async with session.get(url) as response:
                data = await response.json()
                return json.dumps(data, indent=2)
        
        elif uri == "api://news/headlines":
            # Using a free news API
            url = "https://newsapi.org/v2/top-headlines?country=us&apiKey=your_news_api_key"
            
            async with session.get(url) as response:
                data = await response.json()
                return json.dumps(data, indent=2)
        
        else:
            raise ValueError(f"Unknown resource: {uri}")

@server.list_tools()
async def list_tools() -> List[types.Tool]:
    return [
        types.Tool(
            name="get_weather",
            description="Get weather for a specific city",
            inputSchema={
                "type": "object",
                "properties": {
                    "city": {"type": "string"},
                    "units": {"type": "string", "enum": ["metric", "imperial", "kelvin"]}
                },
                "required": ["city"]
            }
        ),
        types.Tool(
            name="search_news",
            description="Search for news articles",
            inputSchema={
                "type": "object",
                "properties": {
                    "query": {"type": "string"},
                    "language": {"type": "string", "default": "en"},
                    "sort_by": {"type": "string", "enum": ["relevancy", "popularity", "publishedAt"]}
                },
                "required": ["query"]
            }
        )
    ]

@server.call_tool()
async def call_tool(name: str, arguments: Dict[str, Any]) -> str:
    async with aiohttp.ClientSession() as session:
        if name == "get_weather":
            city = arguments["city"]
            units = arguments.get("units", "metric")
            api_key = "your_openweather_api_key"
            
            url = f"https://api.openweathermap.org/data/2.5/weather?q={city}&units={units}&appid={api_key}"
            
            async with session.get(url) as response:
                data = await response.json()
                return json.dumps(data, indent=2)
        
        elif name == "search_news":
            query = arguments["query"]
            language = arguments.get("language", "en")
            sort_by = arguments.get("sort_by", "relevancy")
            
            url = f"https://newsapi.org/v2/everything?q={query}&language={language}&sortBy={sort_by}&apiKey=your_news_api_key"
            
            async with session.get(url) as response:
                data = await response.json()
                return json.dumps(data, indent=2)
        
        else:
            raise ValueError(f"Unknown tool: {name}")

if __name__ == "__main__":
    asyncio.run(server.run())
```

## Example 4: Multi-Server Client Application

```python
# multi_client.py
import asyncio
import json
from mcp import create_client

class MultiServerClient:
    def __init__(self):
        self.file_client = None
        self.db_client = None
        self.api_client = None
    
    async def connect(self):
        """Connect to all MCP servers."""
        self.file_client = create_client("stdio", ["python", "file_server.py"])
        self.db_client = create_client("stdio", ["python", "database_server.py"])
        self.api_client = create_client("stdio", ["python", "web_api_server.py"])
    
    async def create_user_report(self, user_id: int):
        """Create a comprehensive user report combining multiple data sources."""
        try:
            # Get user data from database
            user_data = await self.db_client.call_tool("query_users", {
                "filter": f"id = {user_id}",
                "limit": 1
            })
            
            users = json.loads(user_data)
            if not users:
                return "User not found"
            
            user = users[0]
            
            # Get weather data for context
            weather_data = await self.api_client.call_tool("get_weather", {
                "city": "London",  # Default city
                "units": "metric"
            })
            
            weather = json.loads(weather_data)
            
            # Create report content
            report_content = f"""
# User Report for {user['name']}

## User Information
- **ID**: {user['id']}
- **Name**: {user['name']}
- **Email**: {user['email']}
- **Age**: {user.get('age', 'Not specified')}

## Current Weather Context
- **Location**: {weather.get('name', 'Unknown')}
- **Temperature**: {weather['main']['temp']}°C
- **Description**: {weather['weather'][0]['description']}
- **Generated**: {weather.get('dt', 'N/A')}

## Report Generated
This report was generated automatically using MCP integration.
            """
            
            # Save report to file
            filename = f"user_report_{user_id}.txt"
            await self.file_client.call_tool("write_file", {
                "filename": filename,
                "content": report_content.strip()
            })
            
            return f"Report generated and saved as {filename}"
        
        except Exception as e:
            return f"Error generating report: {str(e)}"
    
    async def close(self):
        """Close all client connections."""
        if self.file_client:
            await self.file_client.close()
        if self.db_client:
            await self.db_client.close()
        if self.api_client:
            await self.api_client.close()

async def main():
    client = MultiServerClient()
    
    try:
        await client.connect()
        
        print("Multi-server MCP client connected!")
        
        # Demo: Create reports for all users
        users_data = await client.db_client.call_tool("query_users", {})
        users = json.loads(users_data)
        
        print(f"Found {len(users)} users. Generating reports...")
        
        for user in users:
            result = await client.create_user_report(user['id'])
            print(f"User {user['name']}: {result}")
        
        # List generated files
        resources = await client.file_client.list_resources()
        print(f"\nGenerated files:")
        for resource in resources:
            if "user_report" in resource.name:
                print(f"  - {resource.name}")
    
    finally:
        await client.close()

if __name__ == "__main__":
    asyncio.run(main())
```

## Example 5: Custom Tool with Validation

```python
# validation_server.py
import asyncio
import re
from typing import List, Dict, Any
from mcp import create_server, types

server = create_server("validation-server")

class ValidationError(Exception):
    pass

def validate_email(email: str) -> bool:
    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    return re.match(pattern, email) is not None

def validate_phone(phone: str) -> bool:
    pattern = r'^\+?1?[-.\s]?\(?([0-9]{3})\)?[-.\s]?([0-9]{3})[-.\s]?([0-9]{4})$'
    return re.match(pattern, phone) is not None

@server.list_tools()
async def list_tools() -> List[types.Tool]:
    return [
        types.Tool(
            name="validate_contact_info",
            description="Validate contact information (email and phone)",
            inputSchema={
                "type": "object",
                "properties": {
                    "email": {"type": "string"},
                    "phone": {"type": "string"},
                    "strict": {"type": "boolean", "default": False}
                },
                "required": ["email", "phone"]
            }
        ),
        types.Tool(
            name="format_contact_data",
            description="Format and clean contact data",
            inputSchema={
                "type": "object",
                "properties": {
                    "contacts": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "name": {"type": "string"},
                                "email": {"type": "string"},
                                "phone": {"type": "string"}
                            }
                        }
                    }
                },
                "required": ["contacts"]
            }
        )
    ]

@server.call_tool()
async def call_tool(name: str, arguments: Dict[str, Any]) -> str:
    if name == "validate_contact_info":
        email = arguments["email"]
        phone = arguments["phone"]
        strict = arguments.get("strict", False)
        
        results = {
            "email": {
                "value": email,
                "valid": validate_email(email),
                "errors": []
            },
            "phone": {
                "value": phone,
                "valid": validate_phone(phone),
                "errors": []
            }
        }
        
        # Add specific error messages
        if not results["email"]["valid"]:
            results["email"]["errors"].append("Invalid email format")
        
        if not results["phone"]["valid"]:
            results["phone"]["errors"].append("Invalid phone number format")
        
        # In strict mode, return error if validation fails
        if strict and (not results["email"]["valid"] or not results["phone"]["valid"]):
            raise ValidationError("Contact information validation failed")
        
        return json.dumps(results, indent=2)
    
    elif name == "format_contact_data":
        contacts = arguments["contacts"]
        formatted_contacts = []
        
        for contact in contacts:
            formatted = {
                "name": contact.get("name", "").strip().title(),
                "email": contact.get("email", "").strip().lower(),
                "phone": contact.get("phone", "").strip(),
                "validation": {
                    "email_valid": validate_email(contact.get("email", "")),
                    "phone_valid": validate_phone(contact.get("phone", ""))
                }
            }
            formatted_contacts.append(formatted)
        
        return json.dumps(formatted_contacts, indent=2)
    
    else:
        raise ValueError(f"Unknown tool: {name}")

if __name__ == "__main__":
    asyncio.run(server.run())
```

## Running the Examples

### Setup
```bash
# Create project directory
mkdir mcp-examples
cd mcp-examples

# Create data directory for file server
mkdir data

# Install dependencies
pip install mcp aiohttp

# Create the example files above
# Then run servers in separate terminals:

# Terminal 1: File Server
python file_server.py

# Terminal 2: Database Server  
python database_server.py

# Terminal 3: Web API Server (requires API keys)
python web_api_server.py

# Terminal 4: Run client examples
python client.py
python multi_client.py
```

These examples demonstrate the core MCP concepts and provide a foundation for building your own MCP servers and clients.
```
# Common usage pattern for MCP
# Shows typical workflow and best practices
```

## Intermediate Examples

### Example 3: Real-world Application
```
# More complex example showing practical usage
# Includes error handling and optimization
```

### Example 4: Integration Example
```
# Shows how to integrate MCP with other tools
# Demonstrates common integration patterns
```

## Advanced Examples

### Example 5: Performance Optimization
```
# Advanced techniques for optimizing MCP
# Best practices for production environments
```

### Example 6: Custom Configuration
```
# Advanced configuration example
# Shows customization options and techniques
```

## Additional Resources
- Official code repositories
- Interactive tutorials and demos
- Community-contributed examples
- Sample projects and templates

Created: 2025-06-02 19:39:56
