# JSON - Examples and Code Samples

## Example 1: Basic JSON Structure - Simple Data Objects
```json
{
  "name": "John Doe",
  "age": 30,
  "email": "john.doe@example.com",
  "isActive": true,
  "salary": null,
  "hobbies": ["reading", "coding", "hiking"],
  "address": {
    "street": "123 Main St",
    "city": "New York",
    "zipCode": "10001",
    "country": "USA"
  }
}
```

## Example 2: Complex JSON - E-commerce Product Catalog
```json
{
  "catalog": {
    "name": "Electronics Store",
    "version": "2.1",
    "lastUpdated": "2024-01-15T10:30:00Z",
    "products": [
      {
        "id": "ELEC001",
        "name": "Wireless Bluetooth Headphones",
        "brand": "TechSound",
        "category": "Audio",
        "price": {
          "amount": 99.99,
          "currency": "USD",
          "discount": {
            "percentage": 15,
            "validUntil": "2024-02-01"
          }
        },
        "specifications": {
          "color": ["Black", "White", "Blue"],
          "batteryLife": "30 hours",
          "weight": "250g",
          "wireless": true,
          "noiseCancellation": true
        },
        "inventory": {
          "inStock": true,
          "quantity": 45,
          "warehouse": "WH-NYC-001"
        },
        "reviews": {
          "averageRating": 4.5,
          "totalReviews": 328,
          "featured": [
            {
              "userId": "user123",
              "rating": 5,
              "comment": "Excellent sound quality!",
              "date": "2024-01-10"
            },
            {
              "userId": "user456",
              "rating": 4,
              "comment": "Good value for money",
              "date": "2024-01-08"
            }
          ]
        }
      },
      {
        "id": "ELEC002",
        "name": "4K Smart TV",
        "brand": "VisionMax",
        "category": "Television",
        "price": {
          "amount": 599.99,
          "currency": "USD",
          "discount": null
        },
        "specifications": {
          "screenSize": "55 inches",
          "resolution": "3840x2160",
          "smartFeatures": true,
          "hdmiPorts": 4,
          "usbPorts": 2,
          "supportedApps": ["Netflix", "YouTube", "Amazon Prime", "Hulu"]
        },
        "inventory": {
          "inStock": false,
          "quantity": 0,
          "warehouse": "WH-NYC-001",
          "expectedRestockDate": "2024-01-25"
        }
      }
    ],
    "categories": [
      {
        "id": "audio",
        "name": "Audio",
        "subcategories": ["Headphones", "Speakers", "Soundbars"]
      },
      {
        "id": "television",
        "name": "Television",
        "subcategories": ["Smart TV", "LED TV", "OLED TV"]
      }
    ]
  }
}
```

## Example 3: API Response - RESTful Web Service
```json
{
  "status": "success",
  "data": {
    "users": [
      {
        "id": 1,
        "username": "alice_johnson",
        "profile": {
          "firstName": "Alice",
          "lastName": "Johnson",
          "email": "alice@example.com",
          "avatar": "https://api.example.com/avatars/alice.jpg",
          "joinDate": "2023-03-15T08:30:00Z",
          "lastLogin": "2024-01-14T14:25:30Z",
          "verified": true
        },
        "preferences": {
          "theme": "dark",
          "language": "en",
          "notifications": {
            "email": true,
            "push": false,
            "sms": true
          },
          "privacy": {
            "profilePublic": true,
            "showOnlineStatus": false
          }
        },
        "subscription": {
          "plan": "premium",
          "status": "active",
          "renewalDate": "2024-03-15",
          "features": [
            "unlimited_storage",
            "advanced_analytics",
            "priority_support"
          ]
        }
      },
      {
        "id": 2,
        "username": "bob_smith",
        "profile": {
          "firstName": "Bob",
          "lastName": "Smith",
          "email": "bob@example.com",
          "avatar": null,
          "joinDate": "2023-11-20T12:00:00Z",
          "lastLogin": "2024-01-13T09:15:45Z",
          "verified": false
        },
        "preferences": {
          "theme": "light",
          "language": "en",
          "notifications": {
            "email": false,
            "push": true,
            "sms": false
          }
        },
        "subscription": {
          "plan": "free",
          "status": "active",
          "renewalDate": null,
          "features": ["basic_storage"]
        }
      }
    ]
  },
  "pagination": {
    "currentPage": 1,
    "totalPages": 5,
    "totalUsers": 250,
    "usersPerPage": 50
  },
  "meta": {
    "requestId": "req_abc123def456",
    "timestamp": "2024-01-15T10:30:00Z",
    "version": "v2.1",
    "responseTime": "145ms"
  }
}
```

## Example 4: Configuration File - Application Settings
```json
{
  "application": {
    "name": "TaskManager Pro",
    "version": "3.2.1",
    "environment": "production",
    "debug": false,
    "maintenance": false
  },
  "server": {
    "host": "0.0.0.0",
    "port": 8080,
    "ssl": {
      "enabled": true,
      "certificatePath": "/etc/ssl/certs/app.crt",
      "keyPath": "/etc/ssl/private/app.key",
      "redirectHttp": true
    },
    "cors": {
      "enabled": true,
      "allowedOrigins": [
        "https://taskmanager.com",
        "https://app.taskmanager.com"
      ],
      "allowedMethods": ["GET", "POST", "PUT", "DELETE"],
      "allowCredentials": true
    }
  },
  "database": {
    "primary": {
      "type": "postgresql",
      "host": "db.taskmanager.com",
      "port": 5432,
      "database": "taskmanager_prod",
      "username": "tm_user",
      "password": "${DB_PASSWORD}",
      "ssl": true,
      "maxConnections": 100,
      "timeout": 30000
    },
    "redis": {
      "host": "redis.taskmanager.com",
      "port": 6379,
      "password": "${REDIS_PASSWORD}",
      "database": 0,
      "maxRetries": 3
    }
  },
  "authentication": {
    "jwt": {
      "secret": "${JWT_SECRET}",
      "expiresIn": "24h",
      "issuer": "taskmanager.com",
      "algorithm": "HS256"
    },
    "oauth": {
      "google": {
        "enabled": true,
        "clientId": "${GOOGLE_CLIENT_ID}",
        "clientSecret": "${GOOGLE_CLIENT_SECRET}",
        "redirectUri": "https://app.taskmanager.com/auth/google/callback"
      },
      "github": {
        "enabled": true,
        "clientId": "${GITHUB_CLIENT_ID}",
        "clientSecret": "${GITHUB_CLIENT_SECRET}"
      }
    }
  },
  "features": {
    "taskSharing": true,
    "realTimeUpdates": true,
    "fileUploads": {
      "enabled": true,
      "maxSize": "10MB",
      "allowedTypes": ["jpg", "png", "pdf", "docx"],
      "storage": "s3"
    },
    "notifications": {
      "email": {
        "enabled": true,
        "provider": "sendgrid",
        "fromAddress": "noreply@taskmanager.com"
      },
      "push": {
        "enabled": true,
        "provider": "firebase"
      }
    }
  },
  "logging": {
    "level": "info",
    "format": "json",
    "destinations": [
      {
        "type": "file",
        "path": "/var/log/taskmanager/app.log",
        "maxSize": "100MB",
        "maxFiles": 10
      },
      {
        "type": "elasticsearch",
        "host": "logs.taskmanager.com",
        "index": "taskmanager-logs"
      }
    ]
  },
  "monitoring": {
    "metrics": {
      "enabled": true,
      "endpoint": "/metrics",
      "interval": 60
    },
    "healthCheck": {
      "enabled": true,
      "endpoint": "/health",
      "timeout": 5000
    }
  }
}
```

## Example 5: Data Import/Export - CSV to JSON Transformation
```json
{
  "import": {
    "metadata": {
      "filename": "employees.csv",
      "importDate": "2024-01-15T10:30:00Z",
      "totalRecords": 3,
      "successfulRecords": 3,
      "failedRecords": 0,
      "processingTime": "2.3s"
    },
    "schema": {
      "fields": [
        {"name": "employee_id", "type": "integer", "required": true},
        {"name": "first_name", "type": "string", "required": true},
        {"name": "last_name", "type": "string", "required": true},
        {"name": "email", "type": "email", "required": true},
        {"name": "department", "type": "string", "required": false},
        {"name": "salary", "type": "number", "required": false},
        {"name": "hire_date", "type": "date", "required": true},
        {"name": "is_active", "type": "boolean", "required": true}
      ]
    },
    "data": [
      {
        "employee_id": 1001,
        "first_name": "Sarah",
        "last_name": "Connor",
        "email": "sarah.connor@company.com",
        "department": "Engineering",
        "salary": 95000.00,
        "hire_date": "2022-06-15",
        "is_active": true,
        "computed_fields": {
          "full_name": "Sarah Connor",
          "years_employed": 1.5,
          "annual_bonus_eligible": true
        }
      },
      {
        "employee_id": 1002,
        "first_name": "John",
        "last_name": "Smith",
        "email": "john.smith@company.com",
        "department": "Marketing",
        "salary": 72000.00,
        "hire_date": "2021-03-10",
        "is_active": true,
        "computed_fields": {
          "full_name": "John Smith",
          "years_employed": 2.8,
          "annual_bonus_eligible": true
        }
      },
      {
        "employee_id": 1003,
        "first_name": "Emily",
        "last_name": "Johnson",
        "email": "emily.johnson@company.com",
        "department": "Human Resources",
        "salary": 68000.00,
        "hire_date": "2023-01-20",
        "is_active": false,
        "computed_fields": {
          "full_name": "Emily Johnson",
          "years_employed": 1.0,
          "annual_bonus_eligible": false
        }
      }
    ],
    "summary": {
      "departments": {
        "Engineering": 1,
        "Marketing": 1,
        "Human Resources": 1
      },
      "salary_stats": {
        "average": 78333.33,
        "min": 68000.00,
        "max": 95000.00,
        "total": 235000.00
      },
      "active_employees": 2,
      "inactive_employees": 1
    }
  }
}
```

## Example 6: Real-time Data - WebSocket Message Format
```json
{
  "type": "message",
  "event": "user_activity",
  "timestamp": "2024-01-15T10:30:45.123Z",
  "messageId": "msg_789abc123def",
  "channel": "workspace_456",
  "sender": {
    "userId": "user_123",
    "username": "alice_dev",
    "role": "developer",
    "avatar": "https://cdn.example.com/avatars/alice.jpg"
  },
  "data": {
    "activity_type": "code_edit",
    "details": {
      "file": "src/components/UserProfile.tsx",
      "language": "typescript",
      "changes": {
        "lines_added": 15,
        "lines_removed": 3,
        "lines_modified": 8
      },
      "branch": "feature/user-profile-updates",
      "commit_hash": null,
      "editor": "vscode"
    },
    "collaboration": {
      "active_users": [
        {
          "userId": "user_456",
          "username": "bob_designer",
          "cursor_position": {"line": 42, "column": 18},
          "selection": {"start": {"line": 42, "column": 10}, "end": {"line": 42, "column": 25}}
        }
      ],
      "locked_regions": [],
      "pending_reviews": ["review_123", "review_456"]
    }
  },
  "metadata": {
    "client_version": "2.1.4",
    "platform": "web",
    "ip_address": "192.168.1.100",
    "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36"
  },
  "security": {
    "signature": "sha256_hash_here",
    "encrypted": false,
    "permissions": ["read", "write", "collaborate"]
  }
}
```

## Example 7: Schema Validation - JSON Schema Definition
```json
{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "https://example.com/schemas/product.json",
  "title": "Product",
  "description": "A product in our catalog",
  "type": "object",
  "required": ["id", "name", "price", "category"],
  "properties": {
    "id": {
      "type": "string",
      "pattern": "^PROD[0-9]{6}$",
      "description": "Unique product identifier"
    },
    "name": {
      "type": "string",
      "minLength": 1,
      "maxLength": 100,
      "description": "Product name"
    },
    "description": {
      "type": "string",
      "maxLength": 1000,
      "description": "Product description"
    },
    "price": {
      "type": "object",
      "required": ["amount", "currency"],
      "properties": {
        "amount": {
          "type": "number",
          "minimum": 0,
          "multipleOf": 0.01,
          "description": "Price amount"
        },
        "currency": {
          "type": "string",
          "enum": ["USD", "EUR", "GBP", "CAD"],
          "description": "Currency code"
        },
        "discount": {
          "type": "object",
          "properties": {
            "percentage": {
              "type": "number",
              "minimum": 0,
              "maximum": 100
            },
            "validUntil": {
              "type": "string",
              "format": "date"
            }
          }
        }
      }
    },
    "category": {
      "type": "string",
      "enum": ["electronics", "clothing", "books", "home", "sports"]
    },
    "tags": {
      "type": "array",
      "items": {
        "type": "string",
        "minLength": 1
      },
      "uniqueItems": true,
      "maxItems": 10
    },
    "availability": {
      "type": "object",
      "properties": {
        "inStock": {
          "type": "boolean"
        },
        "quantity": {
          "type": "integer",
          "minimum": 0
        },
        "suppliers": {
          "type": "array",
          "items": {
            "type": "object",
            "required": ["name", "contact"],
            "properties": {
              "name": {"type": "string"},
              "contact": {
                "type": "object",
                "properties": {
                  "email": {"type": "string", "format": "email"},
                  "phone": {"type": "string", "pattern": "^\\+?[1-9]\\d{1,14}$"}
                }
              }
            }
          }
        }
      }
    },
    "metadata": {
      "type": "object",
      "properties": {
        "createdAt": {"type": "string", "format": "date-time"},
        "updatedAt": {"type": "string", "format": "date-time"},
        "version": {"type": "integer", "minimum": 1}
      }
    }
  },
  "additionalProperties": false,
  "examples": [
    {
      "id": "PROD123456",
      "name": "Wireless Mouse",
      "description": "Ergonomic wireless mouse with precision tracking",
      "price": {
        "amount": 29.99,
        "currency": "USD"
      },
      "category": "electronics",
      "tags": ["wireless", "mouse", "computer", "ergonomic"],
      "availability": {
        "inStock": true,
        "quantity": 150
      }
    }
  ]
}
```

## JavaScript Integration Examples:

### Parsing JSON in JavaScript:
```javascript
// Parse JSON string to object
const jsonString = '{"name": "John", "age": 30}';
const userData = JSON.parse(jsonString);
console.log(userData.name); // "John"

// Convert object to JSON string
const userObject = { name: "Jane", age: 25 };
const jsonOutput = JSON.stringify(userObject);
console.log(jsonOutput); // '{"name":"Jane","age":25}'

// Pretty print JSON
const prettyJson = JSON.stringify(userObject, null, 2);
console.log(prettyJson);
```

### Fetch API with JSON:
```javascript
// GET request
fetch('https://api.example.com/users')
  .then(response => response.json())
  .then(data => console.log(data))
  .catch(error => console.error('Error:', error));

// POST request with JSON data
fetch('https://api.example.com/users', {
  method: 'POST',
  headers: {
    'Content-Type': 'application/json',
  },
  body: JSON.stringify({
    name: 'New User',
    email: 'user@example.com'
  })
})
.then(response => response.json())
.then(data => console.log('Success:', data));
```

### Error Handling:
```javascript
try {
  const data = JSON.parse(invalidJsonString);
} catch (error) {
  if (error instanceof SyntaxError) {
    console.error('Invalid JSON format:', error.message);
  } else {
    console.error('Unexpected error:', error);
  }
}
```

## Usage Notes:
- **Example 1**: Basic JSON structure with primitive data types, arrays, and nested objects
- **Example 2**: Complex nested JSON for e-commerce with multiple data relationships
- **Example 3**: API response format with pagination and metadata
- **Example 4**: Application configuration with environment variables and feature flags
- **Example 5**: Data transformation and import/export with computed fields
- **Example 6**: Real-time messaging format for WebSocket communications
- **Example 7**: JSON Schema for validation and documentation

These examples demonstrate JSON's flexibility in handling various data structures from simple key-value pairs to complex hierarchical data used in modern web applications and APIs.