# Tkinter GUI Development Examples
# Comprehensive guide to building desktop applications with Python's tkinter

# ==========================================
# 1. BASIC WINDOW AND WIDGETS
# ==========================================

# Simple Hello World Window
import tkinter as tk
from tkinter import ttk, messagebox, filedialog
import os
from datetime import datetime

def basic_window():
    """Create a basic window with essential widgets"""
    root = tk.Tk()
    root.title("Basic Tkinter Window")
    root.geometry("400x300")
    root.configure(bg="#f0f0f0")
    
    # Label
    label = tk.Label(root, text="Hello, Tkinter!", 
                    font=("Arial", 16, "bold"),
                    fg="#2c3e50", bg="#f0f0f0")
    label.pack(pady=20)
    
    # Entry widget
    entry_var = tk.StringVar()
    entry = tk.Entry(root, textvariable=entry_var, 
                    font=("Arial", 12), width=30)
    entry.pack(pady=10)
    
    # Button with command
    def button_click():
        text = entry_var.get()
        if text:
            messagebox.showinfo("Input", f"You entered: {text}")
        else:
            messagebox.showwarning("Warning", "Please enter some text!")
    
    button = tk.Button(root, text="Click Me!", 
                      command=button_click,
                      font=("Arial", 12),
                      bg="#3498db", fg="white",
                      padx=20, pady=5)
    button.pack(pady=10)
    
    # Text widget with scrollbar
    text_frame = tk.Frame(root)
    text_frame.pack(pady=10, padx=20, fill=tk.BOTH, expand=True)
    
    text_widget = tk.Text(text_frame, height=8, width=40, 
                         font=("Courier", 10))
    scrollbar = tk.Scrollbar(text_frame, orient=tk.VERTICAL, 
                           command=text_widget.yview)
    text_widget.configure(yscrollcommand=scrollbar.set)
    
    text_widget.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
    scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
    
    # Insert sample text
    text_widget.insert(tk.END, "This is a text widget.\n")
    text_widget.insert(tk.END, "You can type here...\n")
    
    root.mainloop()

# ==========================================
# 2. LAYOUT MANAGEMENT
# ==========================================

def layout_examples():
    """Demonstrate different layout managers"""
    root = tk.Tk()
    root.title("Layout Managers")
    root.geometry("600x500")
    
    # Create notebook for tabs
    notebook = ttk.Notebook(root)
    notebook.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
    
    # PACK Layout
    pack_frame = ttk.Frame(notebook)
    notebook.add(pack_frame, text="Pack Layout")
    
    tk.Label(pack_frame, text="Pack Layout Demo", 
            font=("Arial", 14, "bold")).pack(pady=10)
    
    # Top frame
    top_frame = tk.Frame(pack_frame, bg="#e74c3c", height=50)
    top_frame.pack(side=tk.TOP, fill=tk.X, padx=5, pady=2)
    tk.Label(top_frame, text="TOP", bg="#e74c3c", fg="white").pack()
    
    # Bottom frame
    bottom_frame = tk.Frame(pack_frame, bg="#27ae60", height=50)
    bottom_frame.pack(side=tk.BOTTOM, fill=tk.X, padx=5, pady=2)
    tk.Label(bottom_frame, text="BOTTOM", bg="#27ae60", fg="white").pack()
    
    # Left frame
    left_frame = tk.Frame(pack_frame, bg="#3498db", width=100)
    left_frame.pack(side=tk.LEFT, fill=tk.Y, padx=2)
    tk.Label(left_frame, text="LEFT", bg="#3498db", fg="white").pack(pady=50)
    
    # Right frame
    right_frame = tk.Frame(pack_frame, bg="#f39c12", width=100)
    right_frame.pack(side=tk.RIGHT, fill=tk.Y, padx=2)
    tk.Label(right_frame, text="RIGHT", bg="#f39c12", fg="white").pack(pady=50)
    
    # Center frame
    center_frame = tk.Frame(pack_frame, bg="#9b59b6")
    center_frame.pack(fill=tk.BOTH, expand=True, padx=2, pady=2)
    tk.Label(center_frame, text="CENTER\n(fill=BOTH, expand=True)", 
            bg="#9b59b6", fg="white").pack(expand=True)
    
    # GRID Layout
    grid_frame = ttk.Frame(notebook)
    notebook.add(grid_frame, text="Grid Layout")
    
    tk.Label(grid_frame, text="Grid Layout Demo", 
            font=("Arial", 14, "bold")).grid(row=0, column=0, columnspan=3, pady=10)
    
    # Create grid of buttons
    colors = ["#e74c3c", "#27ae60", "#3498db", "#f39c12", "#9b59b6", "#1abc9c"]
    for i in range(3):
        for j in range(3):
            btn = tk.Button(grid_frame, text=f"({i},{j})", 
                          bg=colors[(i*3+j) % len(colors)], fg="white",
                          width=10, height=2)
            btn.grid(row=i+1, column=j, padx=5, pady=5, sticky="nsew")
    
    # Configure grid weights for resizing
    for i in range(3):
        grid_frame.grid_columnconfigure(i, weight=1)
        grid_frame.grid_rowconfigure(i+1, weight=1)
    
    root.mainloop()

# ==========================================
# 3. EVENT HANDLING AND BINDING
# ==========================================

def event_handling_demo():
    """Demonstrate various event handling techniques"""
    root = tk.Tk()
    root.title("Event Handling Demo")
    root.geometry("500x400")
    
    # Event log
    log_frame = tk.Frame(root)
    log_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
    
    tk.Label(log_frame, text="Event Log", font=("Arial", 12, "bold")).pack()
    
    log_text = tk.Text(log_frame, height=15, width=60)
    log_scrollbar = tk.Scrollbar(log_frame, orient=tk.VERTICAL, command=log_text.yview)
    log_text.configure(yscrollcommand=log_scrollbar.set)
    log_text.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
    log_scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
    
    def log_event(event_name, details=""):
        timestamp = datetime.now().strftime("%H:%M:%S")
        log_text.insert(tk.END, f"[{timestamp}] {event_name}: {details}\n")
        log_text.see(tk.END)
    
    # Button frame
    button_frame = tk.Frame(root)
    button_frame.pack(pady=10)
    
    # Mouse events
    mouse_btn = tk.Button(button_frame, text="Mouse Events", 
                         bg="#3498db", fg="white", padx=20)
    mouse_btn.pack(side=tk.LEFT, padx=5)
    
    mouse_btn.bind("<Button-1>", lambda e: log_event("Left Click", "Button clicked"))
    mouse_btn.bind("<Button-3>", lambda e: log_event("Right Click", "Context menu"))
    mouse_btn.bind("<Double-Button-1>", lambda e: log_event("Double Click", "Double clicked"))
    mouse_btn.bind("<Enter>", lambda e: log_event("Mouse Enter", "Cursor entered button"))
    mouse_btn.bind("<Leave>", lambda e: log_event("Mouse Leave", "Cursor left button"))
    
    # Keyboard events
    key_entry = tk.Entry(button_frame, width=20)
    key_entry.pack(side=tk.LEFT, padx=5)
    key_entry.bind("<KeyPress>", lambda e: log_event("Key Press", f"Key: {e.keysym}"))
    key_entry.bind("<Return>", lambda e: log_event("Enter Pressed", f"Text: {e.widget.get()}"))
    
    # Window events
    root.bind("<Configure>", lambda e: log_event("Window Resize", f"Size: {e.width}x{e.height}"))
    root.protocol("WM_DELETE_WINDOW", lambda: (log_event("Window Closing", "Goodbye!"), root.destroy()))
    
    log_event("Application Started", "Ready for events")
    root.mainloop()

# ==========================================
# 4. ADVANCED WIDGETS AND COMPONENTS
# ==========================================

def advanced_widgets_demo():
    """Showcase advanced tkinter widgets"""
    root = tk.Tk()
    root.title("Advanced Widgets")
    root.geometry("700x600")
    
    # Create main notebook
    main_notebook = ttk.Notebook(root)
    main_notebook.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
    
    # TREEVIEW (Table/List)
    tree_frame = ttk.Frame(main_notebook)
    main_notebook.add(tree_frame, text="TreeView")
    
    tk.Label(tree_frame, text="Employee Database", 
            font=("Arial", 14, "bold")).pack(pady=10)
    
    # Create treeview
    columns = ("ID", "Name", "Department", "Salary")
    tree = ttk.Treeview(tree_frame, columns=columns, show="headings", height=10)
    
    # Configure columns
    for col in columns:
        tree.heading(col, text=col)
        tree.column(col, width=120)
    
    # Sample data
    employees = [
        ("001", "John Doe", "Engineering", "$75,000"),
        ("002", "Jane Smith", "Marketing", "$65,000"),
        ("003", "Bob Johnson", "Sales", "$55,000"),
        ("004", "Alice Brown", "HR", "$60,000"),
        ("005", "Charlie Davis", "Engineering", "$80,000")
    ]
    
    for emp in employees:
        tree.insert("", tk.END, values=emp)
    
    tree.pack(pady=10)
    
    # PROGRESSBAR AND SCALE
    progress_frame = ttk.Frame(main_notebook)
    main_notebook.add(progress_frame, text="Progress & Scale")
    
    tk.Label(progress_frame, text="Progress Bars and Scales", 
            font=("Arial", 14, "bold")).pack(pady=10)
    
    # Progress bar
    progress = ttk.Progressbar(progress_frame, length=300, mode='determinate')
    progress.pack(pady=10)
    
    # Scale to control progress
    def update_progress(value):
        progress['value'] = float(value)
    
    scale = tk.Scale(progress_frame, from_=0, to=100, orient=tk.HORIZONTAL,
                    command=update_progress, length=300)
    scale.pack(pady=10)
    scale.set(50)
    
    # Indeterminate progress bar
    tk.Label(progress_frame, text="Loading Animation:").pack(pady=(20,5))
    loading_progress = ttk.Progressbar(progress_frame, length=300, mode='indeterminate')
    loading_progress.pack(pady=5)
    
    def toggle_loading():
        if loading_progress.cget('mode') == 'indeterminate':
            loading_progress.start()
        else:
            loading_progress.stop()
    
    tk.Button(progress_frame, text="Start/Stop Loading", 
             command=toggle_loading).pack(pady=10)
    
    # CANVAS FOR DRAWING
    canvas_frame = ttk.Frame(main_notebook)
    main_notebook.add(canvas_frame, text="Canvas Drawing")
    
    tk.Label(canvas_frame, text="Interactive Canvas", 
            font=("Arial", 14, "bold")).pack(pady=10)
    
    canvas = tk.Canvas(canvas_frame, width=400, height=300, bg="white", relief=tk.SUNKEN, bd=2)
    canvas.pack(pady=10)
    
    # Drawing functionality
    def start_draw(event):
        canvas.old_coords = event.x, event.y
    
    def draw(event):
        if hasattr(canvas, 'old_coords'):
            canvas.create_line(canvas.old_coords[0], canvas.old_coords[1], 
                             event.x, event.y, width=2, fill="#2c3e50")
            canvas.old_coords = event.x, event.y
    
    canvas.bind("<Button-1>", start_draw)
    canvas.bind("<B1-Motion>", draw)
    
    # Canvas controls
    canvas_controls = tk.Frame(canvas_frame)
    canvas_controls.pack()
    
    tk.Button(canvas_controls, text="Clear Canvas", 
             command=lambda: canvas.delete("all")).pack(side=tk.LEFT, padx=5)
    
    def add_shapes():
        canvas.create_rectangle(50, 50, 150, 100, fill="#e74c3c", outline="#c0392b")
        canvas.create_oval(200, 50, 300, 150, fill="#3498db", outline="#2980b9")
        canvas.create_polygon(100, 200, 150, 150, 200, 200, fill="#27ae60", outline="#229954")
    
    tk.Button(canvas_controls, text="Add Shapes", 
             command=add_shapes).pack(side=tk.LEFT, padx=5)
    
    root.mainloop()

# ==========================================
# 5. MENU SYSTEMS AND DIALOGS
# ==========================================

def menu_and_dialog_demo():
    """Demonstrate menu systems and dialog boxes"""
    root = tk.Tk()
    root.title("Menu and Dialog Demo")
    root.geometry("600x400")
    
    # Text area for main content
    text_area = tk.Text(root, wrap=tk.WORD, font=("Arial", 12))
    text_scrollbar = tk.Scrollbar(root, orient=tk.VERTICAL, command=text_area.yview)
    text_area.configure(yscrollcommand=text_scrollbar.set)
    text_area.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
    text_scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
    
    # Menu functions
    def new_file():
        if messagebox.askyesno("New File", "Create new file? Unsaved changes will be lost."):
            text_area.delete(1.0, tk.END)
    
    def open_file():
        filename = filedialog.askopenfilename(
            title="Open File",
            filetypes=[("Text files", "*.txt"), ("All files", "*.*")]
        )
        if filename:
            try:
                with open(filename, 'r') as file:
                    content = file.read()
                    text_area.delete(1.0, tk.END)
                    text_area.insert(1.0, content)
            except Exception as e:
                messagebox.showerror("Error", f"Could not open file: {e}")
    
    def save_file():
        filename = filedialog.asksaveasfilename(
            title="Save File",
            defaultextension=".txt",
            filetypes=[("Text files", "*.txt"), ("All files", "*.*")]
        )
        if filename:
            try:
                with open(filename, 'w') as file:
                    content = text_area.get(1.0, tk.END)
                    file.write(content)
                messagebox.showinfo("Success", "File saved successfully!")
            except Exception as e:
                messagebox.showerror("Error", f"Could not save file: {e}")
    
    def about():
        messagebox.showinfo("About", "Tkinter Menu Demo\nVersion 1.0\nBuilt with Python tkinter")
    
    def show_custom_dialog():
        # Custom dialog window
        dialog = tk.Toplevel(root)
        dialog.title("Custom Dialog")
        dialog.geometry("300x200")
        dialog.grab_set()  # Make dialog modal
        
        tk.Label(dialog, text="Enter your information:", 
                font=("Arial", 12, "bold")).pack(pady=10)
        
        # Form fields
        tk.Label(dialog, text="Name:").pack()
        name_entry = tk.Entry(dialog, width=30)
        name_entry.pack(pady=5)
        
        tk.Label(dialog, text="Email:").pack()
        email_entry = tk.Entry(dialog, width=30)
        email_entry.pack(pady=5)
        
        result = {"submitted": False}
        
        def submit():
            name = name_entry.get()
            email = email_entry.get()
            if name and email:
                text_area.insert(tk.END, f"\n--- User Info ---\nName: {name}\nEmail: {email}\n")
                result["submitted"] = True
                dialog.destroy()
            else:
                messagebox.showwarning("Warning", "Please fill in all fields!")
        
        def cancel():
            dialog.destroy()
        
        # Buttons
        button_frame = tk.Frame(dialog)
        button_frame.pack(pady=20)
        tk.Button(button_frame, text="Submit", command=submit, 
                 bg="#27ae60", fg="white").pack(side=tk.LEFT, padx=5)
        tk.Button(button_frame, text="Cancel", command=cancel, 
                 bg="#e74c3c", fg="white").pack(side=tk.LEFT, padx=5)
    
    # Create menu bar
    menubar = tk.Menu(root)
    root.config(menu=menubar)
    
    # File menu
    file_menu = tk.Menu(menubar, tearoff=0)
    menubar.add_cascade(label="File", menu=file_menu)
    file_menu.add_command(label="New", command=new_file, accelerator="Ctrl+N")
    file_menu.add_command(label="Open", command=open_file, accelerator="Ctrl+O")
    file_menu.add_command(label="Save", command=save_file, accelerator="Ctrl+S")
    file_menu.add_separator()
    file_menu.add_command(label="Exit", command=root.quit)
    
    # Edit menu
    edit_menu = tk.Menu(menubar, tearoff=0)
    menubar.add_cascade(label="Edit", menu=edit_menu)
    edit_menu.add_command(label="Cut", command=lambda: text_area.event_generate("<<Cut>>"))
    edit_menu.add_command(label="Copy", command=lambda: text_area.event_generate("<<Copy>>"))
    edit_menu.add_command(label="Paste", command=lambda: text_area.event_generate("<<Paste>>"))
    
    # Dialog menu
    dialog_menu = tk.Menu(menubar, tearoff=0)
    menubar.add_cascade(label="Dialogs", menu=dialog_menu)
    dialog_menu.add_command(label="Info", command=lambda: messagebox.showinfo("Info", "This is an info dialog"))
    dialog_menu.add_command(label="Warning", command=lambda: messagebox.showwarning("Warning", "This is a warning"))
    dialog_menu.add_command(label="Error", command=lambda: messagebox.showerror("Error", "This is an error"))
    dialog_menu.add_command(label="Yes/No", command=lambda: messagebox.askyesno("Question", "Do you like tkinter?"))
    dialog_menu.add_command(label="Custom Dialog", command=show_custom_dialog)
    
    # Help menu
    help_menu = tk.Menu(menubar, tearoff=0)
    menubar.add_cascade(label="Help", menu=help_menu)
    help_menu.add_command(label="About", command=about)
    
    # Keyboard shortcuts
    root.bind('<Control-n>', lambda e: new_file())
    root.bind('<Control-o>', lambda e: open_file())
    root.bind('<Control-s>', lambda e: save_file())
    
    # Initial content
    text_area.insert(1.0, "Welcome to the Menu and Dialog Demo!\n\n")
    text_area.insert(tk.END, "Try the menu options above:\n")
    text_area.insert(tk.END, "- File menu: Create, open, save files\n")
    text_area.insert(tk.END, "- Edit menu: Basic text operations\n")
    text_area.insert(tk.END, "- Dialogs menu: Various dialog types\n")
    text_area.insert(tk.END, "- Help menu: About information\n\n")
    text_area.insert(tk.END, "Keyboard shortcuts:\n")
    text_area.insert(tk.END, "- Ctrl+N: New file\n")
    text_area.insert(tk.END, "- Ctrl+O: Open file\n")
    text_area.insert(tk.END, "- Ctrl+S: Save file\n")
    
    root.mainloop()

# ==========================================
# 6. DATA VISUALIZATION AND CHARTS
# ==========================================

def data_visualization_demo():
    """Create data visualization using tkinter canvas"""
    root = tk.Tk()
    root.title("Data Visualization with Tkinter")
    root.geometry("800x600")
    
    # Sample data
    sales_data = {
        "January": 12000,
        "February": 15000,
        "March": 18000,
        "April": 14000,
        "May": 22000,
        "June": 25000
    }
    
    # Create notebook for different chart types
    notebook = ttk.Notebook(root)
    notebook.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
    
    # BAR CHART
    bar_frame = ttk.Frame(notebook)
    notebook.add(bar_frame, text="Bar Chart")
    
    tk.Label(bar_frame, text="Monthly Sales Data", 
            font=("Arial", 16, "bold")).pack(pady=10)
    
    bar_canvas = tk.Canvas(bar_frame, width=700, height=400, bg="white")
    bar_canvas.pack(pady=10)
    
    def draw_bar_chart():
        bar_canvas.delete("all")
        
        # Chart dimensions
        chart_x, chart_y = 80, 50
        chart_width, chart_height = 550, 300
        
        # Draw axes
        bar_canvas.create_line(chart_x, chart_y + chart_height, 
                              chart_x + chart_width, chart_y + chart_height, 
                              width=2, fill="#2c3e50")  # X-axis
        bar_canvas.create_line(chart_x, chart_y, 
                              chart_x, chart_y + chart_height, 
                              width=2, fill="#2c3e50")  # Y-axis
        
        # Data processing
        max_value = max(sales_data.values())
        bar_width = chart_width / len(sales_data) * 0.8
        bar_spacing = chart_width / len(sales_data)
        
        colors = ["#e74c3c", "#3498db", "#27ae60", "#f39c12", "#9b59b6", "#1abc9c"]
        
        for i, (month, value) in enumerate(sales_data.items()):
            # Calculate bar height and position
            bar_height = (value / max_value) * chart_height
            x1 = chart_x + i * bar_spacing + (bar_spacing - bar_width) / 2
            y1 = chart_y + chart_height - bar_height
            x2 = x1 + bar_width
            y2 = chart_y + chart_height
            
            # Draw bar
            color = colors[i % len(colors)]
            bar_canvas.create_rectangle(x1, y1, x2, y2, fill=color, outline="#2c3e50")
            
            # Add value label on bar
            bar_canvas.create_text((x1 + x2) / 2, y1 - 10, text=f"${value:,}", 
                                  font=("Arial", 10, "bold"))
            
            # Add month label
            bar_canvas.create_text((x1 + x2) / 2, y2 + 15, text=month[:3], 
                                  font=("Arial", 10))
        
        # Add title and labels
        bar_canvas.create_text(chart_x + chart_width / 2, 20, 
                              text="Monthly Sales Performance", 
                              font=("Arial", 14, "bold"))
        bar_canvas.create_text(40, chart_y + chart_height / 2, 
                              text="Sales ($)", font=("Arial", 12), angle=90)
        bar_canvas.create_text(chart_x + chart_width / 2, chart_y + chart_height + 40, 
                              text="Months", font=("Arial", 12))
    
    draw_bar_chart()
    
    # PIE CHART
    pie_frame = ttk.Frame(notebook)
    notebook.add(pie_frame, text="Pie Chart")
    
    tk.Label(pie_frame, text="Sales Distribution", 
            font=("Arial", 16, "bold")).pack(pady=10)
    
    pie_canvas = tk.Canvas(pie_frame, width=700, height=400, bg="white")
    pie_canvas.pack(pady=10)
    
    def draw_pie_chart():
        pie_canvas.delete("all")
        
        # Chart setup
        center_x, center_y = 350, 200
        radius = 120
        total_sales = sum(sales_data.values())
        
        colors = ["#e74c3c", "#3498db", "#27ae60", "#f39c12", "#9b59b6", "#1abc9c"]
        
        start_angle = 0
        legend_y = 50
        
        for i, (month, value) in enumerate(sales_data.items()):
            # Calculate angle for this slice
            angle = (value / total_sales) * 360
            
            # Draw pie slice
            color = colors[i % len(colors)]
            pie_canvas.create_arc(center_x - radius, center_y - radius,
                                 center_x + radius, center_y + radius,
                                 start=start_angle, extent=angle,
                                 fill=color, outline="white", width=2)
            
            # Calculate label position
            label_angle = start_angle + angle / 2
            label_x = center_x + (radius + 40) * tk.math.cos(tk.math.radians(label_angle))
            label_y = center_y + (radius + 40) * tk.math.sin(tk.math.radians(label_angle))
            
            # Add percentage label
            percentage = (value / total_sales) * 100
            pie_canvas.create_text(label_x, label_y, 
                                  text=f"{percentage:.1f}%", 
                                  font=("Arial", 10, "bold"))
            
            # Add legend
            legend_x = 50
            pie_canvas.create_rectangle(legend_x, legend_y, legend_x + 15, legend_y + 15, 
                                       fill=color, outline="#2c3e50")
            pie_canvas.create_text(legend_x + 25, legend_y + 7, 
                                  text=f"{month}: ${value:,}", 
                                  font=("Arial", 10), anchor="w")
            legend_y += 25
            
            start_angle += angle
        
        # Add title
        pie_canvas.create_text(center_x, 30, 
                              text="Sales Distribution by Month", 
                              font=("Arial", 14, "bold"))
    
    # Fix math import issue
    import math
    tk.math = math
    draw_pie_chart()
    
    root.mainloop()

# ==========================================
# 7. COMPLETE APPLICATION EXAMPLE
# ==========================================

class TaskManagerApp:
    """A complete task management application using tkinter"""
    
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("Task Manager Pro")
        self.root.geometry("800x600")
        self.root.configure(bg="#ecf0f1")
        
        # Data storage
        self.tasks = []
        self.task_id_counter = 1
        
        self.create_widgets()
        self.create_menu()
        
    def create_widgets(self):
        """Create all the widgets for the application"""
        
        # Header
        header_frame = tk.Frame(self.root, bg="#2c3e50", height=60)
        header_frame.pack(fill=tk.X)
        header_frame.pack_propagate(False)
        
        title_label = tk.Label(header_frame, text="📋 Task Manager Pro", 
                              font=("Arial", 18, "bold"), 
                              fg="white", bg="#2c3e50")
        title_label.pack(pady=15)
        
        # Main container
        main_frame = tk.Frame(self.root, bg="#ecf0f1")
        main_frame.pack(fill=tk.BOTH, expand=True, padx=20, pady=20)
        
        # Left panel - Task input
        left_panel = tk.LabelFrame(main_frame, text="Add New Task", 
                                  font=("Arial", 12, "bold"),
                                  bg="#ecf0f1", fg="#2c3e50")
        left_panel.pack(side=tk.LEFT, fill=tk.Y, padx=(0, 10))
        
        # Task title
        tk.Label(left_panel, text="Task Title:", bg="#ecf0f1").pack(pady=5, anchor="w")
        self.title_var = tk.StringVar()
        self.title_entry = tk.Entry(left_panel, textvariable=self.title_var, 
                                   font=("Arial", 11), width=30)
        self.title_entry.pack(pady=5, padx=10, fill=tk.X)
        
        # Task description
        tk.Label(left_panel, text="Description:", bg="#ecf0f1").pack(pady=5, anchor="w")
        self.desc_text = tk.Text(left_panel, height=4, width=30, font=("Arial", 10))
        self.desc_text.pack(pady=5, padx=10, fill=tk.X)
        
        # Priority
        tk.Label(left_panel, text="Priority:", bg="#ecf0f1").pack(pady=5, anchor="w")
        self.priority_var = tk.StringVar(value="Medium")
        priority_frame = tk.Frame(left_panel, bg="#ecf0f1")
        priority_frame.pack(pady=5, padx=10, fill=tk.X)
        
        priorities = ["High", "Medium", "Low"]
        for priority in priorities:
            rb = tk.Radiobutton(priority_frame, text=priority, 
                               variable=self.priority_var, value=priority,
                               bg="#ecf0f1", font=("Arial", 10))
            rb.pack(side=tk.LEFT)
        
        # Due date
        tk.Label(left_panel, text="Due Date:", bg="#ecf0f1").pack(pady=5, anchor="w")
        self.due_date_var = tk.StringVar()
        self.due_date_entry = tk.Entry(left_panel, textvariable=self.due_date_var, 
                                      font=("Arial", 11))
        self.due_date_entry.pack(pady=5, padx=10, fill=tk.X)
        tk.Label(left_panel, text="(YYYY-MM-DD format)", 
                font=("Arial", 8), fg="gray", bg="#ecf0f1").pack()
        
        # Buttons
        button_frame = tk.Frame(left_panel, bg="#ecf0f1")
        button_frame.pack(pady=20, fill=tk.X)
        
        add_btn = tk.Button(button_frame, text="Add Task", 
                           command=self.add_task,
                           bg="#27ae60", fg="white", 
                           font=("Arial", 11, "bold"),
                           padx=20, pady=5)
        add_btn.pack(fill=tk.X, padx=10, pady=2)
        
        clear_btn = tk.Button(button_frame, text="Clear Form", 
                             command=self.clear_form,
                             bg="#95a5a6", fg="white", 
                             font=("Arial", 11))
        clear_btn.pack(fill=tk.X, padx=10, pady=2)
        
        # Right panel - Task list
        right_panel = tk.LabelFrame(main_frame, text="Task List", 
                                   font=("Arial", 12, "bold"),
                                   bg="#ecf0f1", fg="#2c3e50")
        right_panel.pack(side=tk.RIGHT, fill=tk.BOTH, expand=True)
        
        # Task list with treeview
        tree_frame = tk.Frame(right_panel)
        tree_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        columns = ("ID", "Title", "Priority", "Due Date", "Status")
        self.task_tree = ttk.Treeview(tree_frame, columns=columns, show="headings", height=15)
        
        # Configure columns
        self.task_tree.heading("ID", text="ID")
        self.task_tree.heading("Title", text="Task Title")
        self.task_tree.heading("Priority", text="Priority")
        self.task_tree.heading("Due Date", text="Due Date")
        self.task_tree.heading("Status", text="Status")
        
        self.task_tree.column("ID", width=50)
        self.task_tree.column("Title", width=200)
        self.task_tree.column("Priority", width=80)
        self.task_tree.column("Due Date", width=100)
        self.task_tree.column("Status", width=80)
        
        # Scrollbars
        v_scrollbar = ttk.Scrollbar(tree_frame, orient=tk.VERTICAL, command=self.task_tree.yview)
        h_scrollbar = ttk.Scrollbar(tree_frame, orient=tk.HORIZONTAL, command=self.task_tree.xview)
        self.task_tree.configure(yscrollcommand=v_scrollbar.set, xscrollcommand=h_scrollbar.set)
        
        # Pack treeview and scrollbars
        self.task_tree.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        v_scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        h_scrollbar.pack(side=tk.BOTTOM, fill=tk.X)
        
        # Task control buttons
        control_frame = tk.Frame(right_panel, bg="#ecf0f1")
        control_frame.pack(fill=tk.X, padx=10, pady=5)
        
        complete_btn = tk.Button(control_frame, text="Mark Complete", 
                               command=self.mark_complete,
                               bg="#3498db", fg="white", font=("Arial", 10))
        complete_btn.pack(side=tk.LEFT, padx=5)
        
        delete_btn = tk.Button(control_frame, text="Delete Task", 
                              command=self.delete_task,
                              bg="#e74c3c", fg="white", font=("Arial", 10))
        delete_btn.pack(side=tk.LEFT, padx=5)
        
        view_btn = tk.Button(control_frame, text="View Details", 
                            command=self.view_task_details,
                            bg="#f39c12", fg="white", font=("Arial", 10))
        view_btn.pack(side=tk.LEFT, padx=5)
        
        # Status bar
        self.status_bar = tk.Label(self.root, text="Ready", 
                                  relief=tk.SUNKEN, anchor="w", 
                                  bg="#bdc3c7", font=("Arial", 10))
        self.status_bar.pack(side=tk.BOTTOM, fill=tk.X)
        
        # Bind double-click to view details
        self.task_tree.bind("<Double-1>", lambda e: self.view_task_details())
        
    def create_menu(self):
        """Create the application menu"""
        menubar = tk.Menu(self.root)
        self.root.config(menu=menubar)
        
        # File menu
        file_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="File", menu=file_menu)
        file_menu.add_command(label="Export Tasks", command=self.export_tasks)
        file_menu.add_command(label="Import Tasks", command=self.import_tasks)
        file_menu.add_separator()
        file_menu.add_command(label="Exit", command=self.root.quit)
        
        # View menu
        view_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="View", menu=view_menu)
        view_menu.add_command(label="Show All Tasks", command=self.show_all_tasks)
        view_menu.add_command(label="Show Pending Only", command=self.show_pending_tasks)
        view_menu.add_command(label="Show Completed Only", command=self.show_completed_tasks)
        
        # Help menu
        help_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="Help", menu=help_menu)
        help_menu.add_command(label="About", command=self.show_about)
    
    def add_task(self):
        """Add a new task to the list"""
        title = self.title_var.get().strip()
        description = self.desc_text.get(1.0, tk.END).strip()
        priority = self.priority_var.get()
        due_date = self.due_date_var.get().strip()
        
        if not title:
            messagebox.showwarning("Warning", "Please enter a task title!")
            return
        
        # Validate date format
        if due_date:
            try:
                datetime.strptime(due_date, "%Y-%m-%d")
            except ValueError:
                messagebox.showerror("Error", "Invalid date format! Use YYYY-MM-DD")
                return
        
        # Create task
        task = {
            "id": self.task_id_counter,
            "title": title,
            "description": description,
            "priority": priority,
            "due_date": due_date or "No deadline",
            "status": "Pending",
            "created": datetime.now().strftime("%Y-%m-%d %H:%M")
        }
        
        self.tasks.append(task)
        self.task_id_counter += 1
        
        # Add to treeview
        self.task_tree.insert("", tk.END, values=(
            task["id"], task["title"], task["priority"], 
            task["due_date"], task["status"]
        ))
        
        self.clear_form()
        self.update_status(f"Task '{title}' added successfully!")
    
    def clear_form(self):
        """Clear the input form"""
        self.title_var.set("")
        self.desc_text.delete(1.0, tk.END)
        self.priority_var.set("Medium")
        self.due_date_var.set("")
    
    def mark_complete(self):
        """Mark selected task as complete"""
        selection = self.task_tree.selection()
        if not selection:
            messagebox.showwarning("Warning", "Please select a task!")
            return
        
        item = selection[0]
        task_id = int(self.task_tree.item(item)["values"][0])
        
        # Update task in data
        for task in self.tasks:
            if task["id"] == task_id:
                task["status"] = "Completed"
                break
        
        # Update treeview
        values = list(self.task_tree.item(item)["values"])
        values[4] = "Completed"
        self.task_tree.item(item, values=values)
        
        # Change text color for completed tasks
        self.task_tree.set(item, "Status", "✅ Completed")
        
        self.update_status("Task marked as completed!")
    
    def delete_task(self):
        """Delete selected task"""
        selection = self.task_tree.selection()
        if not selection:
            messagebox.showwarning("Warning", "Please select a task!")
            return
        
        if messagebox.askyesno("Confirm", "Are you sure you want to delete this task?"):
            item = selection[0]
            task_id = int(self.task_tree.item(item)["values"][0])
            
            # Remove from data
            self.tasks = [task for task in self.tasks if task["id"] != task_id]
            
            # Remove from treeview
            self.task_tree.delete(item)
            
            self.update_status("Task deleted!")
    
    def view_task_details(self):
        """Show detailed view of selected task"""
        selection = self.task_tree.selection()
        if not selection:
            messagebox.showwarning("Warning", "Please select a task!")
            return
        
        item = selection[0]
        task_id = int(self.task_tree.item(item)["values"][0])
        
        # Find task in data
        task = next((t for t in self.tasks if t["id"] == task_id), None)
        if not task:
            return
        
        # Create details window
        details_window = tk.Toplevel(self.root)
        details_window.title(f"Task Details - {task['title']}")
        details_window.geometry("500x400")
        details_window.grab_set()
        
        # Details content
        details_frame = tk.Frame(details_window, padx=20, pady=20)
        details_frame.pack(fill=tk.BOTH, expand=True)
        
        # Task information
        tk.Label(details_frame, text="Task Details", 
                font=("Arial", 16, "bold")).pack(pady=(0, 20))
        
        info_frame = tk.Frame(details_frame)
        info_frame.pack(fill=tk.X, pady=5)
        
        # Create info display
        for label, value in [
            ("ID:", task["id"]),
            ("Title:", task["title"]),
            ("Priority:", task["priority"]),
            ("Due Date:", task["due_date"]),
            ("Status:", task["status"]),
            ("Created:", task["created"])
        ]:
            row = tk.Frame(info_frame)
            row.pack(fill=tk.X, pady=2)
            tk.Label(row, text=label, font=("Arial", 10, "bold"), width=10, anchor="w").pack(side=tk.LEFT)
            tk.Label(row, text=str(value), font=("Arial", 10), anchor="w").pack(side=tk.LEFT)
        
        # Description
        tk.Label(details_frame, text="Description:", 
                font=("Arial", 10, "bold")).pack(anchor="w", pady=(20, 5))
        
        desc_text = tk.Text(details_frame, height=8, width=50, font=("Arial", 10))
        desc_text.pack(fill=tk.BOTH, expand=True)
        desc_text.insert(1.0, task["description"])
        desc_text.config(state=tk.DISABLED)  # Read-only
        
        # Close button
        tk.Button(details_frame, text="Close", command=details_window.destroy,
                 bg="#95a5a6", fg="white", font=("Arial", 11)).pack(pady=20)
    
    def show_all_tasks(self):
        """Show all tasks in the treeview"""
        self.refresh_task_list()
        self.update_status("Showing all tasks")
    
    def show_pending_tasks(self):
        """Show only pending tasks"""
        self.refresh_task_list(filter_status="Pending")
        self.update_status("Showing pending tasks only")
    
    def show_completed_tasks(self):
        """Show only completed tasks"""
        self.refresh_task_list(filter_status="Completed")
        self.update_status("Showing completed tasks only")
    
    def refresh_task_list(self, filter_status=None):
        """Refresh the task list with optional filtering"""
        # Clear current items
        for item in self.task_tree.get_children():
            self.task_tree.delete(item)
        
        # Add filtered tasks
        for task in self.tasks:
            if filter_status is None or task["status"] == filter_status:
                status_display = "✅ Completed" if task["status"] == "Completed" else task["status"]
                self.task_tree.insert("", tk.END, values=(
                    task["id"], task["title"], task["priority"], 
                    task["due_date"], status_display
                ))
    
    def export_tasks(self):
        """Export tasks to a file"""
        if not self.tasks:
            messagebox.showinfo("Info", "No tasks to export!")
            return
        
        filename = filedialog.asksaveasfilename(
            title="Export Tasks",
            defaultextension=".txt",
            filetypes=[("Text files", "*.txt"), ("All files", "*.*")]
        )
        
        if filename:
            try:
                with open(filename, 'w') as file:
                    file.write("TASK MANAGER EXPORT\n")
                    file.write("=" * 50 + "\n\n")
                    
                    for task in self.tasks:
                        file.write(f"ID: {task['id']}\n")
                        file.write(f"Title: {task['title']}\n")
                        file.write(f"Description: {task['description']}\n")
                        file.write(f"Priority: {task['priority']}\n")
                        file.write(f"Due Date: {task['due_date']}\n")
                        file.write(f"Status: {task['status']}\n")
                        file.write(f"Created: {task['created']}\n")
                        file.write("-" * 30 + "\n\n")
                
                messagebox.showinfo("Success", f"Tasks exported to {filename}")
                self.update_status(f"Tasks exported to {os.path.basename(filename)}")
            except Exception as e:
                messagebox.showerror("Error", f"Could not export tasks: {e}")
    
    def import_tasks(self):
        """Import tasks from a file (placeholder)"""
        messagebox.showinfo("Info", "Import functionality would be implemented here.\nThis is a demo version.")
    
    def show_about(self):
        """Show about dialog"""
        about_text = """
Task Manager Pro v1.0

A comprehensive task management application built with Python tkinter.

Features:
• Add, edit, and delete tasks
• Set priorities and due dates
• Mark tasks as complete
• Filter tasks by status
• Export task lists
• Detailed task view

Built with ❤️ using Python tkinter
        """
        messagebox.showinfo("About Task Manager Pro", about_text)
    
    def update_status(self, message):
        """Update the status bar"""
        self.status_bar.config(text=message)
        # Auto-clear status after 3 seconds
        self.root.after(3000, lambda: self.status_bar.config(text="Ready"))
    
    def run(self):
        """Start the application"""
        # Add some sample tasks
        sample_tasks = [
            {
                "title": "Complete project documentation",
                "description": "Write comprehensive documentation for the new project including API docs and user guide.",
                "priority": "High",
                "due_date": "2025-06-10"
            },
            {
                "title": "Team meeting preparation",
                "description": "Prepare agenda and materials for next week's team meeting.",
                "priority": "Medium",
                "due_date": "2025-06-05"
            }
        ]
        
        for sample in sample_tasks:
            self.title_var.set(sample["title"])
            self.desc_text.insert(1.0, sample["description"])
            self.priority_var.set(sample["priority"])
            self.due_date_var.set(sample["due_date"])
            self.add_task()
        
        self.update_status("Task Manager Pro loaded successfully!")
        self.root.mainloop()

# ==========================================
# HOW TO RUN THE EXAMPLES
# ==========================================

"""
To run any of these examples, uncomment the function call below:

# Basic examples:
# basic_window()
# layout_examples()
# event_handling_demo()

# Advanced examples:
# advanced_widgets_demo()
# menu_and_dialog_demo()
# data_visualization_demo()

# Complete application:
# app = TaskManagerApp()
# app.run()

Each example demonstrates different aspects of tkinter:

1. basic_window() - Essential widgets and basic interactions
2. layout_examples() - Pack and Grid layout managers
3. event_handling_demo() - Mouse, keyboard, and window events
4. advanced_widgets_demo() - TreeView, ProgressBar, Scale, Canvas
5. menu_and_dialog_demo() - Menu systems and various dialogs
6. data_visualization_demo() - Creating charts with Canvas
7. TaskManagerApp() - Complete application with all features

TIPS FOR TKINTER DEVELOPMENT:

1. Layout Management:
   - Use pack() for simple layouts
   - Use grid() for complex forms
   - Use place() for absolute positioning (rarely needed)

2. Event Handling:
   - Bind events with widget.bind()
   - Use command parameter for button clicks
   - Handle window events with root.protocol()

3. Styling:
   - Use ttk widgets for modern appearance
   - Configure colors with bg, fg parameters
   - Set fonts with font parameter

4. Best Practices:
   - Organize code into classes for complex apps
   - Use StringVar, IntVar for data binding
   - Validate user input before processing
   - Provide feedback with status bars or dialogs

5. Common Patterns:
   - Model-View separation
   - Event-driven programming
   - Callback functions for user actions
   - State management with instance variables

KEYBOARD SHORTCUTS TO IMPLEMENT:
- Ctrl+N: New item
- Ctrl+O: Open file
- Ctrl+S: Save file
- Ctrl+Z: Undo
- Ctrl+Y: Redo
- F1: Help
- Escape: Cancel/Close dialog

ACCESSIBILITY FEATURES:
- Proper tab order with takefocus
- Keyboard shortcuts for all major functions
- Clear visual feedback for interactions
- Descriptive labels and tooltips
- High contrast color schemes
"""

# Uncomment to run the complete application:
# app = TaskManagerApp()
# app.run()