# Tcl (Tool Command Language) Examples
# Comprehensive guide to Tcl programming from basic to advanced

# ==========================================
# 1. BASIC TCL SYNTAX AND FUNDAMENTALS
# ==========================================

# Basic "Hello World" - Everything in Tcl is a command
puts "Hello, World!"

# Variables - No declaration needed, everything is a string
set name "John Doe"
set age 30
set height 5.9

# Display variables
puts "Name: $name"
puts "Age: $age years old"
puts "Height: $height feet"

# String operations
set firstname "John"
set lastname "Doe"
set fullname "$firstname $lastname"
puts "Full name: $fullname"

# String concatenation and manipulation
set greeting "Hello"
set target "World"
set message [append greeting ", " $target "!"]
puts $message

# String length and substring
set text "Programming"
puts "Length: [string length $text]"
puts "First 4 chars: [string range $text 0 3]"
puts "Uppercase: [string toupper $text]"
puts "Lowercase: [string tolower $text]"

# Comments start with # and must be at the beginning of a line or after ;
# This is a comment
puts "Code"; # This is also a comment

# Command substitution with brackets
set current_time [clock format [clock seconds]]
puts "Current time: $current_time"

# Mathematical expressions
set a 10
set b 20
set sum [expr $a + $b]
set product [expr $a * $b]
set result [expr {$a > $b ? "a is greater" : "b is greater"}]
puts "Sum: $sum, Product: $product"
puts "Comparison: $result"

# ==========================================
# 2. CONTROL STRUCTURES AND FLOW
# ==========================================

# If-else statements
set temperature 75

if {$temperature > 80} {
    puts "It's hot outside!"
} elseif {$temperature > 60} {
    puts "Nice weather today."
} else {
    puts "It's cold outside."
}

# Switch statement
set day "Monday"
switch $day {
    "Monday" {
        puts "Start of the work week"
    }
    "Friday" {
        puts "TGIF!"
    }
    "Saturday" -
    "Sunday" {
        puts "Weekend time!"
    }
    default {
        puts "Regular weekday"
    }
}

# While loops
set count 1
while {$count <= 5} {
    puts "Count: $count"
    incr count
}

# For loops
for {set i 0} {$i < 5} {incr i} {
    puts "Iteration: $i"
}

# Foreach loops with lists
set fruits {apple banana orange grape}
foreach fruit $fruits {
    puts "Fruit: $fruit"
}

# Nested loops example
for {set row 1} {$row <= 3} {incr row} {
    for {set col 1} {$col <= 3} {incr col} {
        puts -nonewline "($row,$col) "
    }
    puts ""
}

# Break and continue
set numbers {1 2 3 4 5 6 7 8 9 10}
foreach num $numbers {
    if {$num == 5} {
        continue
    }
    if {$num == 8} {
        break
    }
    puts "Number: $num"
}

# ==========================================
# 3. LISTS AND DATA STRUCTURES
# ==========================================

# Creating lists
set empty_list {}
set number_list {1 2 3 4 5}
set mixed_list {apple 25 3.14 "hello world"}

# List operations
set colors {red green blue}
puts "Original list: $colors"

# Append elements
lappend colors yellow purple
puts "After append: $colors"

# Insert elements
set colors [linsert $colors 2 orange]
puts "After insert: $colors"

# Get list length
puts "List length: [llength $colors]"

# Access elements by index
puts "First color: [lindex $colors 0]"
puts "Last color: [lindex $colors end]"
puts "Second and third: [lrange $colors 1 2]"

# Search in list
set position [lsearch $colors "blue"]
puts "Position of blue: $position"

# Sort list
set sorted_colors [lsort $colors]
puts "Sorted colors: $sorted_colors"

# Replace elements
set colors [lreplace $colors 0 0 "crimson"]
puts "After replace: $colors"

# Split and join strings
set sentence "The quick brown fox"
set words [split $sentence " "]
puts "Words: $words"
set rejoined [join $words "-"]
puts "Rejoined: $rejoined"

# Nested lists (matrices)
set matrix {{1 2 3} {4 5 6} {7 8 9}}
puts "Matrix: $matrix"
puts "First row: [lindex $matrix 0]"
puts "Element (1,1): [lindex [lindex $matrix 1] 1]"

# ==========================================
# 4. PROCEDURES AND FUNCTIONS
# ==========================================

# Basic procedure definition
proc greet {name} {
    puts "Hello, $name!"
}

# Call the procedure
greet "Alice"
greet "Bob"

# Procedure with multiple parameters
proc calculate_area {length width} {
    set area [expr $length * $width]
    return $area
}

set room_area [calculate_area 12 15]
puts "Room area: $room_area square feet"

# Procedure with default parameters
proc introduce {name {age "unknown"} {city "somewhere"}} {
    puts "My name is $name, I am $age years old, and I live in $city."
}

introduce "John"
introduce "Jane" 25
introduce "Bob" 30 "New York"

# Procedure with variable arguments
proc sum_all {args} {
    set total 0
    foreach num $args {
        set total [expr $total + $num]
    }
    return $total
}

puts "Sum of 1,2,3: [sum_all 1 2 3]"
puts "Sum of 10,20,30,40: [sum_all 10 20 30 40]"

# Recursive procedure (factorial)
proc factorial {n} {
    if {$n <= 1} {
        return 1
    } else {
        return [expr $n * [factorial [expr $n - 1]]]
    }
}

puts "Factorial of 5: [factorial 5]"
puts "Factorial of 10: [factorial 10]"

# Procedure with global variables
set global_counter 0

proc increment_counter {} {
    global global_counter
    incr global_counter
    puts "Counter is now: $global_counter"
}

increment_counter
increment_counter
increment_counter

# Procedure with local variables and upvar
proc modify_caller_var {var_name new_value} {
    upvar $var_name local_var
    set local_var $new_value
}

set my_variable "original"
puts "Before: $my_variable"
modify_caller_var my_variable "modified"
puts "After: $my_variable"

# ==========================================
# 5. FILE I/O AND SYSTEM OPERATIONS
# ==========================================

# Writing to a file
set filename "example.txt"
set file_handle [open $filename "w"]
puts $file_handle "Line 1: Hello from Tcl"
puts $file_handle "Line 2: This is a test file"
puts $file_handle "Line 3: Created with Tcl script"
close $file_handle
puts "File '$filename' created successfully"

# Reading from a file
if {[file exists $filename]} {
    set file_handle [open $filename "r"]
    set content [read $file_handle]
    close $file_handle
    puts "File content:"
    puts $content
} else {
    puts "File does not exist"
}

# Reading file line by line
set file_handle [open $filename "r"]
set line_number 1
while {[gets $file_handle line] >= 0} {
    puts "Line $line_number: $line"
    incr line_number
}
close $file_handle

# Appending to a file
set file_handle [open $filename "a"]
puts $file_handle "Line 4: Appended later"
close $file_handle

# File operations
puts "File size: [file size $filename] bytes"
puts "File modified: [clock format [file mtime $filename]]"
puts "File readable: [file readable $filename]"
puts "File writable: [file writable $filename]"

# Directory operations
set current_dir [pwd]
puts "Current directory: $current_dir"

# List directory contents
set files [glob -nocomplain *]
puts "Files in current directory:"
foreach file $files {
    if {[file isfile $file]} {
        puts "  File: $file"
    } elseif {[file isdirectory $file]} {
        puts "  Dir:  $file"
    }
}

# Execute system commands
set date_output [exec date]
puts "Current date: $date_output"

# Execute with error handling
if {[catch {exec ls /nonexistent} result]} {
    puts "Command failed: $result"
} else {
    puts "Command output: $result"
}

# Environment variables
puts "Home directory: $env(HOME)"
puts "Path: $env(PATH)"

# ==========================================
# 6. ARRAYS AND ASSOCIATIVE DATA
# ==========================================

# Array creation and manipulation
array set person {
    name "John Doe"
    age 30
    city "New York"
    occupation "Engineer"
}

# Access array elements
puts "Name: $person(name)"
puts "Age: $person(age)"

# Add new elements
set person(email) "john@example.com"
set person(phone) "555-1234"

# Check if array element exists
if {[info exists person(address)]} {
    puts "Address: $person(address)"
} else {
    puts "Address not available"
}

# Get all array names
set keys [array names person]
puts "Available keys: $keys"

# Iterate through array
foreach key [array names person] {
    puts "$key: $person($key)"
}

# Array size
puts "Array size: [array size person]"

# Multi-dimensional arrays (using comma-separated keys)
array set matrix {}
for {set i 0} {$i < 3} {incr i} {
    for {set j 0} {$j < 3} {incr j} {
        set matrix($i,$j) [expr $i * 3 + $j + 1]
    }
}

# Display matrix
puts "3x3 Matrix:"
for {set i 0} {$i < 3} {incr i} {
    set row ""
    for {set j 0} {$j < 3} {incr j} {
        append row "$matrix($i,$j) "
    }
    puts $row
}

# Copy array
array set person_copy [array get person]
puts "Copied array size: [array size person_copy]"

# Clear array
array unset person_copy
puts "After unset: [array size person_copy]"

# ==========================================
# 7. ADVANCED TCL FEATURES
# ==========================================

# Regular expressions
set text "The quick brown fox jumps over the lazy dog"
if {[regexp {brown (\w+)} $text match word]} {
    puts "Found: $match"
    puts "Captured word: $word"
}

# Find all matches
set email_text "Contact: john@example.com or jane@test.org"
set email_pattern {[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}}
regexp -all $email_pattern $email_text emails
puts "Found emails: $emails"

# String substitution with regexp
set phone "123-456-7890"
set formatted [regsub -all {(\d{3})-(\d{3})-(\d{4})} $phone {(\1) \2-\3}]
puts "Formatted phone: $formatted"

# eval command - dynamic code execution
set operation "+"
set a 10
set b 20
set expression "expr $a $operation $b"
set result [eval $expression]
puts "Dynamic calculation: $a $operation $b = $result"

# namespace usage
namespace eval math {
    variable pi 3.14159
    
    proc circle_area {radius} {
        variable pi
        return [expr $pi * $radius * $radius]
    }
    
    proc circle_circumference {radius} {
        variable pi
        return [expr 2 * $pi * $radius]
    }
}

puts "Circle area (r=5): [math::circle_area 5]"
puts "Circle circumference (r=5): [math::circle_circumference 5]"

# Error handling with try-catch (Tcl 8.6+)
proc safe_divide {a b} {
    try {
        if {$b == 0} {
            error "Division by zero"
        }
        return [expr $a / $b]
    } on error {msg} {
        puts "Error: $msg"
        return "undefined"
    }
}

puts "10 / 2 = [safe_divide 10 2]"
puts "10 / 0 = [safe_divide 10 0]"

# Advanced list processing
set numbers {1 2 3 4 5 6 7 8 9 10}

# Filter even numbers
set even_numbers {}
foreach num $numbers {
    if {$num % 2 == 0} {
        lappend even_numbers $num
    }
}
puts "Even numbers: $even_numbers"

# Map function (square each number)
set squared {}
foreach num $numbers {
    lappend squared [expr $num * $num]
}
puts "Squared: $squared"

# Reduce function (sum all numbers)
set total 0
foreach num $numbers {
    set total [expr $total + $num]
}
puts "Sum: $total"

# Dictionary operations (Tcl 8.5+)
set config [dict create \
    server "localhost" \
    port 8080 \
    ssl true \
    timeout 30]

puts "Server: [dict get $config server]"
puts "Port: [dict get $config port]"

# Update dictionary
dict set config database "mydb"
dict set config port 9090

# Check if key exists
if {[dict exists $config ssl]} {
    puts "SSL enabled: [dict get $config ssl]"
}

# Iterate through dictionary
dict for {key value} $config {
    puts "$key = $value"
}

# ==========================================
# 8. PRACTICAL APPLICATIONS
# ==========================================

# Log file analyzer
proc analyze_log {filename} {
    if {![file exists $filename]} {
        puts "Log file '$filename' not found"
        return
    }
    
    array set stats {
        total_lines 0
        error_count 0
        warning_count 0
        info_count 0
    }
    
    set file_handle [open $filename "r"]
    while {[gets $file_handle line] >= 0} {
        incr stats(total_lines)
        
        if {[regexp -nocase {error} $line]} {
            incr stats(error_count)
        } elseif {[regexp -nocase {warning} $line]} {
            incr stats(warning_count)
        } elseif {[regexp -nocase {info} $line]} {
            incr stats(info_count)
        }
    }
    close $file_handle
    
    puts "Log Analysis Results:"
    puts "Total lines: $stats(total_lines)"
    puts "Errors: $stats(error_count)"
    puts "Warnings: $stats(warning_count)"
    puts "Info messages: $stats(info_count)"
}

# Create sample log file for demonstration
set log_content {
2025-06-02 10:00:01 INFO Server started
2025-06-02 10:00:05 WARNING High memory usage
2025-06-02 10:00:10 ERROR Failed to connect to database
2025-06-02 10:00:15 INFO User login successful
2025-06-02 10:00:20 ERROR Authentication failed
}

set log_file [open "sample.log" "w"]
puts $log_file $log_content
close $log_file

analyze_log "sample.log"

# Configuration file parser
proc parse_config {filename} {
    array set config {}
    
    if {![file exists $filename]} {
        puts "Config file not found"
        return [array get config]
    }
    
    set file_handle [open $filename "r"]
    while {[gets $file_handle line] >= 0} {
        # Skip comments and empty lines
        set line [string trim $line]
        if {$line eq "" || [string index $line 0] eq "#"} {
            continue
        }
        
        # Parse key=value pairs
        if {[regexp {^([^=]+)=(.*)$} $line match key value]} {
            set key [string trim $key]
            set value [string trim $value]
            set config($key) $value
        }
    }
    close $file_handle
    
    return [array get config]
}

# Create sample config file
set config_content {
# Database configuration
host=localhost
port=5432
database=myapp
username=admin

# Application settings
debug=true
timeout=30
max_connections=100
}

set config_file [open "app.config" "w"]
puts $config_file $config_content
close $config_file

array set app_config [parse_config "app.config"]
puts "\nParsed configuration:"
foreach {key value} [array get app_config] {
    puts "$key = $value"
}

# Simple web server simulation
proc handle_request {method path} {
    switch $method {
        "GET" {
            switch -glob $path {
                "/" {
                    return "HTTP/1.1 200 OK\n\nWelcome to Tcl Web Server!"
                }
                "/api/time" {
                    set current_time [clock format [clock seconds]]
                    return "HTTP/1.1 200 OK\n\nCurrent time: $current_time"
                }
                "/api/status" {
                    return "HTTP/1.1 200 OK\n\nServer Status: Running"
                }
                default {
                    return "HTTP/1.1 404 Not Found\n\nPage not found"
                }
            }
        }
        "POST" {
            return "HTTP/1.1 200 OK\n\nPOST request received for $path"
        }
        default {
            return "HTTP/1.1 405 Method Not Allowed\n\nMethod $method not supported"
        }
    }
}

# Test the web server simulation
puts "\nWeb Server Simulation:"
puts [handle_request "GET" "/"]
puts [handle_request "GET" "/api/time"]
puts [handle_request "GET" "/nonexistent"]
puts [handle_request "POST" "/api/data"]

# Data processing pipeline
proc process_csv_data {filename} {
    if {![file exists $filename]} {
        puts "CSV file not found"
        return
    }
    
    set file_handle [open $filename "r"]
    set line_count 0
    array set column_sums {}
    
    while {[gets $file_handle line] >= 0} {
        incr line_count
        
        # Skip header line
        if {$line_count == 1} {
            set headers [split $line ","]
            continue
        }
        
        set values [split $line ","]
        for {set i 0} {$i < [llength $values]} {incr i} {
            set header [lindex $headers $i]
            set value [lindex $values $i]
            
            # Try to sum numeric columns
            if {[string is double $value]} {
                if {![info exists column_sums($header)]} {
                    set column_sums($header) 0
                }
                set column_sums($header) [expr $column_sums($header) + $value]
            }
        }
    }
    close $file_handle
    
    puts "CSV Processing Results:"
    puts "Total rows: [expr $line_count - 1]"
    foreach {column sum} [array get column_sums] {
        puts "Sum of $column: $sum"
    }
}

# Create sample CSV file
set csv_content {Name,Age,Salary,Department
John,30,50000,Engineering
Jane,25,45000,Marketing
Bob,35,60000,Engineering
Alice,28,48000,Sales
}

set csv_file [open "employees.csv" "w"]
puts $csv_file $csv_content
close $csv_file

process_csv_data "employees.csv"

# Cleanup created files
file delete -force example.txt sample.log app.config employees.csv

puts "\nTcl examples completed successfully!"

# ==========================================
# TCL BEST PRACTICES AND TIPS
# ==========================================

# 1. Always use braces {} around conditions and loop bodies
# Good: if {$x > 0} { ... }
# Bad:  if $x > 0 { ... }

# 2. Use descriptive variable names
# Good: set user_count 10
# Bad:  set x 10

# 3. Check file operations for errors
# proc safe_file_read {filename} {
#     if {[catch {open $filename "r"} file_handle]} {
#         puts "Error opening file: $file_handle"
#         return ""
#     }
#     set content [read $file_handle]
#     close $file_handle
#     return $content
# }

# 4. Use procedures to organize code
# 5. Comment your code appropriately
# 6. Use namespaces for larger applications
# 7. Always close file handles
# 8. Use proper error handling
# 9. Validate input parameters
# 10. Use consistent indentation

# Common Tcl commands reference:
# set, puts, gets, read, open, close
# if, while, for, foreach, switch
# proc, return, global, upvar
# list operations: lappend, lindex, llength, lrange, lsearch, lsort
# string operations: string length, string range, string match
# array operations: array set, array get, array names, array size
# file operations: file exists, file size, file readable, file writable
# expr, regexp, regsub, split, join
# clock, exec, env, pwd, glob

Created: 2025-06-02 (Enhanced with comprehensive Tcl programming examples)
