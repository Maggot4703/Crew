# Databases - Examples and Code Samples

## Example 1: Database Design and Schema Creation
```sql
-- Relational Database Design Example: E-commerce System
-- Create database and use it
CREATE DATABASE ecommerce_db;
USE ecommerce_db;

-- Users table with proper constraints
CREATE TABLE users (
    user_id INT PRIMARY KEY AUTO_INCREMENT,
    username VARCHAR(50) UNIQUE NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    password_hash VARCHAR(255) NOT NULL,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    phone VARCHAR(20),
    date_of_birth DATE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    is_active BOOLEAN DEFAULT TRUE,
    last_login TIMESTAMP NULL,
    INDEX idx_username (username),
    INDEX idx_email (email),
    INDEX idx_created_at (created_at)
);

-- Categories table for product organization
CREATE TABLE categories (
    category_id INT PRIMARY KEY AUTO_INCREMENT,
    category_name VARCHAR(100) NOT NULL UNIQUE,
    description TEXT,
    parent_category_id INT,
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (parent_category_id) REFERENCES categories(category_id)
);

-- Products table with advanced features
CREATE TABLE products (
    product_id INT PRIMARY KEY AUTO_INCREMENT,
    product_name VARCHAR(200) NOT NULL,
    description TEXT,
    sku VARCHAR(50) UNIQUE NOT NULL,
    price DECIMAL(10,2) NOT NULL,
    cost DECIMAL(10,2),
    weight DECIMAL(8,3),
    dimensions JSON,
    category_id INT,
    brand VARCHAR(100),
    stock_quantity INT DEFAULT 0,
    min_stock_level INT DEFAULT 0,
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (category_id) REFERENCES categories(category_id),
    INDEX idx_sku (sku),
    INDEX idx_category (category_id),
    INDEX idx_price (price),
    INDEX idx_stock (stock_quantity),
    FULLTEXT idx_search (product_name, description)
);

-- Orders table with comprehensive tracking
CREATE TABLE orders (
    order_id INT PRIMARY KEY AUTO_INCREMENT,
    user_id INT NOT NULL,
    order_number VARCHAR(50) UNIQUE NOT NULL,
    order_status ENUM('pending', 'processing', 'shipped', 'delivered', 'cancelled') DEFAULT 'pending',
    total_amount DECIMAL(12,2) NOT NULL,
    tax_amount DECIMAL(10,2),
    shipping_amount DECIMAL(10,2),
    discount_amount DECIMAL(10,2) DEFAULT 0,
    payment_status ENUM('pending', 'paid', 'failed', 'refunded') DEFAULT 'pending',
    shipping_address JSON,
    billing_address JSON,
    order_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    shipped_date TIMESTAMP NULL,
    delivered_date TIMESTAMP NULL,
    notes TEXT,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    INDEX idx_user (user_id),
    INDEX idx_order_number (order_number),
    INDEX idx_status (order_status),
    INDEX idx_order_date (order_date)
);

-- Order items for detailed order tracking
CREATE TABLE order_items (
    order_item_id INT PRIMARY KEY AUTO_INCREMENT,
    order_id INT NOT NULL,
    product_id INT NOT NULL,
    quantity INT NOT NULL,
    unit_price DECIMAL(10,2) NOT NULL,
    total_price DECIMAL(12,2) NOT NULL,
    FOREIGN KEY (order_id) REFERENCES orders(order_id) ON DELETE CASCADE,
    FOREIGN KEY (product_id) REFERENCES products(product_id),
    INDEX idx_order (order_id),
    INDEX idx_product (product_id)
);
```

## Example 2: NoSQL Database - MongoDB Document Structure
```javascript
// MongoDB Collection Examples
// Users collection with embedded documents
{
  "_id": ObjectId("507f1f77bcf86cd799439011"),
  "username": "john_doe",
  "email": "john@example.com",
  "profile": {
    "firstName": "John",
    "lastName": "Doe",
    "avatar": "https://example.com/avatars/john.jpg",
    "bio": "Software developer passionate about databases",
    "location": {
      "city": "New York",
      "state": "NY",
      "country": "USA",
      "coordinates": {
        "lat": 40.7128,
        "lng": -74.0060
      }
    }
  },
  "preferences": {
    "theme": "dark",
    "language": "en",
    "notifications": {
      "email": true,
      "push": false,
      "sms": true
    },
    "privacy": {
      "profilePublic": true,
      "showEmail": false
    }
  },
  "social": {
    "followers": 1250,
    "following": 389,
    "posts": 142
  },
  "createdAt": ISODate("2023-01-15T10:30:00Z"),
  "updatedAt": ISODate("2024-01-15T14:25:30Z"),
  "lastLogin": ISODate("2024-01-15T09:15:45Z"),
  "isActive": true,
  "tags": ["developer", "database", "mongodb"]
}

// Products collection with complex nested data
{
  "_id": ObjectId("507f1f77bcf86cd799439012"),
  "name": "Wireless Bluetooth Headphones",
  "sku": "WBH-001",
  "category": "Electronics",
  "subcategory": "Audio",
  "brand": "TechSound",
  "price": {
    "current": 99.99,
    "original": 129.99,
    "currency": "USD",
    "priceHistory": [
      {"price": 129.99, "date": ISODate("2023-01-01T00:00:00Z")},
      {"price": 119.99, "date": ISODate("2023-06-01T00:00:00Z")},
      {"price": 99.99, "date": ISODate("2024-01-01T00:00:00Z")}
    ]
  },
  "specifications": {
    "color": ["Black", "White", "Blue"],
    "connectivity": "Bluetooth 5.0",
    "batteryLife": "30 hours",
    "weight": "250g",
    "features": ["Active Noise Cancellation", "Quick Charge", "Voice Assistant"],
    "compatibility": ["iOS", "Android", "Windows", "macOS"]
  },
  "inventory": {
    "stock": 45,
    "reserved": 3,
    "available": 42,
    "warehouses": [
      {"location": "NYC", "quantity": 20},
      {"location": "LA", "quantity": 15},
      {"location": "CHI", "quantity": 10}
    ],
    "suppliers": [
      {
        "name": "TechDistributor Inc",
        "contact": "supplier@techdist.com",
        "leadTime": 14,
        "minOrderQuantity": 50
      }
    ]
  },
  "media": {
    "images": [
      {"url": "https://example.com/products/wbh001/main.jpg", "isPrimary": true},
      {"url": "https://example.com/products/wbh001/side.jpg", "isPrimary": false},
      {"url": "https://example.com/products/wbh001/back.jpg", "isPrimary": false}
    ],
    "videos": [
      {"url": "https://example.com/products/wbh001/demo.mp4", "type": "demo"}
    ]
  },
  "reviews": {
    "average": 4.5,
    "count": 328,
    "distribution": {
      "5": 201,
      "4": 89,
      "3": 28,
      "2": 7,
      "1": 3
    }
  },
  "seo": {
    "slug": "wireless-bluetooth-headphones-techsound",
    "metaTitle": "TechSound Wireless Bluetooth Headphones - Premium Audio",
    "metaDescription": "Experience premium sound quality with TechSound wireless headphones...",
    "keywords": ["wireless headphones", "bluetooth", "noise cancellation"]
  },
  "createdAt": ISODate("2023-03-15T08:30:00Z"),
  "updatedAt": ISODate("2024-01-15T12:45:00Z"),
  "isActive": true
}

// MongoDB Query Examples
// Find products by category with price range
db.products.find({
  "category": "Electronics",
  "price.current": { $gte: 50, $lte: 150 },
  "isActive": true
}).sort({"price.current": 1});

// Aggregate pipeline for sales analytics
db.orders.aggregate([
  {
    $match: {
      "orderDate": { 
        $gte: ISODate("2024-01-01"), 
        $lt: ISODate("2024-02-01") 
      },
      "orderStatus": { $in: ["delivered", "shipped"] }
    }
  },
  {
    $unwind: "$items"
  },
  {
    $group: {
      "_id": "$items.productId",
      "totalQuantity": { $sum: "$items.quantity" },
      "totalRevenue": { $sum: "$items.totalPrice" },
      "orderCount": { $sum: 1 }
    }
  },
  {
    $lookup: {
      "from": "products",
      "localField": "_id",
      "foreignField": "_id",
      "as": "productInfo"
    }
  },
  {
    $sort: { "totalRevenue": -1 }
  },
  {
    $limit: 10
  }
]);
```

## Example 3: Graph Database - Neo4j Cypher Queries
```cypher
// Create nodes and relationships for social network
// Create users
CREATE (john:User {name: "John Doe", age: 30, city: "New York", email: "john@example.com"})
CREATE (sarah:User {name: "Sarah Smith", age: 28, city: "Los Angeles", email: "sarah@example.com"})
CREATE (mike:User {name: "Mike Johnson", age: 32, city: "Chicago", email: "mike@example.com"})
CREATE (emma:User {name: "Emma Wilson", age: 27, city: "Seattle", email: "emma@example.com"})

// Create companies
CREATE (techcorp:Company {name: "TechCorp", industry: "Technology", employees: 5000})
CREATE (startupx:Company {name: "StartupX", industry: "Software", employees: 50})

// Create skills
CREATE (python:Skill {name: "Python", category: "Programming"})
CREATE (sql:Skill {name: "SQL", category: "Database"})
CREATE (react:Skill {name: "React", category: "Frontend"})
CREATE (docker:Skill {name: "Docker", category: "DevOps"})

// Create relationships
MATCH (john:User {name: "John Doe"}), (sarah:User {name: "Sarah Smith"})
CREATE (john)-[:FRIEND_OF {since: "2020-01-15", closeness: 8}]->(sarah)

MATCH (john:User {name: "John Doe"}), (techcorp:Company {name: "TechCorp"})
CREATE (john)-[:WORKS_FOR {position: "Senior Developer", since: "2022-03-01", salary: 95000}]->(techcorp)

MATCH (john:User {name: "John Doe"}), (python:Skill {name: "Python"})
CREATE (john)-[:HAS_SKILL {level: "Expert", years: 5}]->(python)

// Complex queries
// Find mutual friends
MATCH (user1:User {name: "John Doe"})-[:FRIEND_OF]-(mutual)-[:FRIEND_OF]-(user2:User {name: "Emma Wilson"})
WHERE user1 <> user2
RETURN mutual.name AS mutual_friend

// Find colleagues with similar skills
MATCH (user:User {name: "John Doe"})-[:WORKS_FOR]->(company:Company)
MATCH (colleague:User)-[:WORKS_FOR]->(company)
MATCH (user)-[:HAS_SKILL]->(skill:Skill)<-[:HAS_SKILL]-(colleague)
WHERE user <> colleague
RETURN colleague.name, collect(skill.name) AS shared_skills

// Recommendation system - suggest connections
MATCH (user:User {name: "John Doe"})-[:FRIEND_OF*2]-(recommendation:User)
WHERE NOT (user)-[:FRIEND_OF]-(recommendation) AND user <> recommendation
WITH recommendation, count(*) AS mutual_connections
MATCH (recommendation)-[:HAS_SKILL]->(skill:Skill)<-[:HAS_SKILL]-(user)
RETURN recommendation.name, mutual_connections, collect(skill.name) AS shared_skills
ORDER BY mutual_connections DESC, size(shared_skills) DESC
LIMIT 5

// Path finding - shortest career path
MATCH path = shortestPath(
  (start:User {name: "John Doe"})-[*]-(target:User {name: "Emma Wilson"})
)
RETURN path
```

## Example 4: Time Series Database - InfluxDB Queries
```sql
-- InfluxDB Line Protocol Examples
-- IoT sensor data
temperature,location=office,sensor_id=temp_01 value=23.5 1609459200000000000
temperature,location=office,sensor_id=temp_01 value=24.1 1609459260000000000
temperature,location=warehouse,sensor_id=temp_02 value=18.7 1609459200000000000

humidity,location=office,sensor_id=hum_01 value=45.2 1609459200000000000
humidity,location=office,sensor_id=hum_01 value=46.8 1609459260000000000

-- Application metrics
cpu_usage,host=server1,region=us-east value=75.5 1609459200000000000
memory_usage,host=server1,region=us-east value=8589934592 1609459200000000000
disk_io,host=server1,region=us-east,device=sda1 read=1024,write=2048 1609459200000000000

-- Business metrics
sales,store=store_01,product_category=electronics amount=1250.75,quantity=5 1609459200000000000
website_visits,page=homepage,source=google count=150 1609459200000000000

-- InfluxQL Queries
-- Basic temperature monitoring
SELECT mean("value") as avg_temp
FROM "temperature"
WHERE time >= now() - 1h
GROUP BY time(5m), "location"

-- Anomaly detection
SELECT value
FROM "temperature"
WHERE time >= now() - 24h
  AND (value > 30 OR value < 10)

-- Downsampling and continuous queries
SELECT mean("value") as mean_temp, max("value") as max_temp, min("value") as min_temp
INTO "temperature_hourly"
FROM "temperature"
GROUP BY time(1h), "location"

-- Complex aggregation with multiple measurements
SELECT
  mean("cpu_usage"."value") as avg_cpu,
  mean("memory_usage"."value") as avg_memory,
  max("disk_io"."read") as max_disk_read
FROM "cpu_usage", "memory_usage", "disk_io"
WHERE time >= now() - 6h
  AND "host" = 'server1'
GROUP BY time(10m)

-- Retention policies
CREATE RETENTION POLICY "one_week" ON "mydb" DURATION 7d REPLICATION 1 DEFAULT
CREATE RETENTION POLICY "one_year" ON "mydb" DURATION 365d REPLICATION 1

-- Continuous queries for real-time aggregation
CREATE CONTINUOUS QUERY "cq_mean_temp" ON "mydb"
BEGIN
  SELECT mean("value") as mean_temp
  INTO "temperature_5m"
  FROM "temperature"
  GROUP BY time(5m), "location"
END
```

## Example 5: Key-Value Store - Redis Operations
```bash
# Redis CLI Examples
# Basic string operations
SET user:1001:name "John Doe"
GET user:1001:name
MSET user:1001:email "john@example.com" user:1001:age "30"
MGET user:1001:name user:1001:email user:1001:age

# Expiration
SETEX session:abc123 3600 "user_data"
TTL session:abc123
EXPIRE user:1001:name 7200

# Hash operations for complex objects
HSET user:1001 name "John Doe" email "john@example.com" age 30
HGET user:1001 name
HGETALL user:1001
HINCRBY user:1001 age 1

# List operations for queues and stacks
LPUSH notifications:user:1001 "New message from Sarah"
RPUSH notifications:user:1001 "Order #12345 shipped"
LRANGE notifications:user:1001 0 -1
LPOP notifications:user:1001

# Set operations for unique collections
SADD user:1001:skills "Python" "SQL" "Docker"
SADD user:1002:skills "JavaScript" "React" "SQL"
SISMEMBER user:1001:skills "Python"
SINTER user:1001:skills user:1002:skills

# Sorted sets for rankings and leaderboards
ZADD leaderboard 1500 "player1"
ZADD leaderboard 2300 "player2"
ZADD leaderboard 1800 "player3"
ZRANGE leaderboard 0 -1 WITHSCORES
ZREVRANK leaderboard "player2"

# Pub/Sub for real-time messaging
SUBSCRIBE notifications
PUBLISH notifications "New user registered"

# Lua scripting for atomic operations
EVAL "
local current = redis.call('GET', KEYS[1])
if current == false then
  return redis.call('SET', KEYS[1], ARGV[1])
else
  return nil
end
" 1 counter:visits 1

# Pipeline for batch operations
MULTI
SET key1 "value1"
SET key2 "value2"
INCR counter
EXEC
```

## Example 6: Database Performance and Optimization
```sql
-- MySQL Performance Analysis and Optimization
-- Query performance analysis
EXPLAIN SELECT 
    e.first_name, e.last_name, d.department_name
FROM employees e
JOIN departments d ON e.department_id = d.department_id
WHERE e.salary > 75000;

-- Index optimization
SHOW INDEX FROM employees;
CREATE INDEX idx_salary ON employees(salary);
CREATE INDEX idx_dept_salary ON employees(department_id, salary);

-- Query optimization techniques
-- Slow query log analysis
SET global slow_query_log = 'ON';
SET global long_query_time = 2;
SHOW VARIABLES LIKE 'slow_query_log%';

-- Performance schema queries
SELECT 
    DIGEST_TEXT,
    COUNT_STAR,
    AVG_TIMER_WAIT/1000000000 as avg_exec_time_sec,
    SUM_TIMER_WAIT/1000000000 as total_exec_time_sec
FROM performance_schema.events_statements_summary_by_digest
ORDER BY SUM_TIMER_WAIT DESC
LIMIT 10;

-- Table optimization
OPTIMIZE TABLE employees;
ANALYZE TABLE employees;

-- Partitioning example
CREATE TABLE orders_partitioned (
    order_id INT NOT NULL,
    order_date DATE NOT NULL,
    customer_id INT,
    amount DECIMAL(10,2),
    PRIMARY KEY (order_id, order_date)
)
PARTITION BY RANGE (YEAR(order_date)) (
    PARTITION p2022 VALUES LESS THAN (2023),
    PARTITION p2023 VALUES LESS THAN (2024),
    PARTITION p2024 VALUES LESS THAN (2025),
    PARTITION p_future VALUES LESS THAN MAXVALUE
);

-- Database maintenance
-- Backup and restore
mysqldump -u root -p --databases ecommerce_db > backup.sql
mysql -u root -p < backup.sql

-- Replication setup
-- Master configuration
[mysqld]
log-bin=mysql-bin
server-id=1
binlog-do-db=ecommerce_db

-- Slave configuration
[mysqld]
server-id=2
relay-log=mysql-relay-bin
read-only=1
```

## Example 7: Database Security and Data Protection
```sql
-- User management and security
-- Create users with specific privileges
CREATE USER 'app_user'@'localhost' IDENTIFIED BY 'secure_password_123';
CREATE USER 'read_only'@'%' IDENTIFIED BY 'readonly_pass';
CREATE USER 'backup_user'@'localhost' IDENTIFIED BY 'backup_secure_pass';

-- Grant specific privileges
GRANT SELECT, INSERT, UPDATE, DELETE ON ecommerce_db.* TO 'app_user'@'localhost';
GRANT SELECT ON ecommerce_db.* TO 'read_only'@'%';
GRANT SELECT, LOCK TABLES, SHOW VIEW ON *.* TO 'backup_user'@'localhost';

-- Row-level security example
CREATE VIEW user_orders AS
SELECT * FROM orders 
WHERE user_id = CURRENT_USER_ID();

-- Data encryption
-- Enable encryption at rest
ALTER TABLE users 
ADD COLUMN encrypted_ssn VARBINARY(255);

-- Encryption functions
UPDATE users 
SET encrypted_ssn = AES_ENCRYPT(ssn, 'encryption_key_here')
WHERE ssn IS NOT NULL;

-- Audit logging
CREATE TABLE audit_log (
    log_id INT PRIMARY KEY AUTO_INCREMENT,
    table_name VARCHAR(50),
    operation VARCHAR(10),
    user VARCHAR(50),
    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    old_values JSON,
    new_values JSON
);

-- Trigger for audit logging
DELIMITER //
CREATE TRIGGER user_audit_trigger
AFTER UPDATE ON users
FOR EACH ROW
BEGIN
    INSERT INTO audit_log (table_name, operation, user, old_values, new_values)
    VALUES ('users', 'UPDATE', USER(), 
            JSON_OBJECT('email', OLD.email, 'last_login', OLD.last_login),
            JSON_OBJECT('email', NEW.email, 'last_login', NEW.last_login));
END //
DELIMITER ;

-- Data masking for development environments
CREATE VIEW users_masked AS
SELECT 
    user_id,
    username,
    CONCAT(LEFT(email, 3), '***@***.com') as email,
    '***-***-****' as phone,
    first_name,
    CONCAT(LEFT(last_name, 1), '***') as last_name,
    created_at,
    is_active
FROM users;

-- Backup encryption
mysqldump --single-transaction --routines --triggers \
  --set-gtid-purged=OFF ecommerce_db | \
  openssl enc -aes-256-cbc -salt -out backup_encrypted.sql.enc

-- Data retention policies
-- Archive old data
CREATE TABLE orders_archive LIKE orders;

INSERT INTO orders_archive 
SELECT * FROM orders 
WHERE order_date < DATE_SUB(NOW(), INTERVAL 7 YEAR);

DELETE FROM orders 
WHERE order_date < DATE_SUB(NOW(), INTERVAL 7 YEAR);
```

## Usage Notes:
- **Example 1**: Comprehensive relational database design with proper normalization, constraints, and indexing
- **Example 2**: NoSQL document database (MongoDB) with complex nested structures and aggregation queries
- **Example 3**: Graph database (Neo4j) for relationship-heavy data with path finding and recommendations
- **Example 4**: Time series database (InfluxDB) for IoT and monitoring data with retention policies
- **Example 5**: Key-value store (Redis) for caching, sessions, and real-time operations
- **Example 6**: Database performance optimization, indexing strategies, and maintenance procedures
- **Example 7**: Database security implementation including user management, encryption, and audit logging

These examples cover the major database paradigms and provide practical implementations for various use cases from simple web applications to complex enterprise systems.