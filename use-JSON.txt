# COMPREHENSIVE JSON GUIDE
=============================

## WHAT IS JSON?
------------------------

**JSON (JavaScript Object Notation)** is a lightweight data-interchange format that is easy for humans to read and write and easy for machines to parse and generate. It is based on a subset of JavaScript syntax but is language-independent and widely used for data exchange on the web.

## JSON SYNTAX
------------------------

JSON has six data types:
- **Objects**: Collections of name/value pairs
- **Arrays**: Ordered lists of values
- **Strings**: Text enclosed in double quotes
- **Numbers**: Integer or floating-point
- **Booleans**: true or false
- **null**: Empty value

### JSON Object
```json
{
  "firstName": "John",
  "lastName": "Doe",
  "age": 30,
  "isEmployed": true,
  "address": {
    "street": "123 Main St",
    "city": "Anytown",
    "state": "CA",
    "postalCode": "12345"
  },
  "phoneNumbers": [
    {
      "type": "home",
      "number": "555-1234"
    },
    {
      "type": "work",
      "number": "555-5678"
    }
  ],
  "children": [],
  "spouse": null
}
```

### JSON Array
```json
[
  "apple",
  "orange",
  "banana",
  42,
  true,
  null,
  {
    "name": "nested object"
  }
]
```

## JSON RULES
------------------------

1. **Data is in name/value pairs**
2. **Data is separated by commas**
3. **Objects are enclosed in curly braces {}**
4. **Arrays are enclosed in square brackets []**
5. **Names must be in double quotes**
6. **Strings must be in double quotes**
7. **No comments allowed in standard JSON**
8. **No trailing commas allowed**

## JSON vs. JAVASCRIPT OBJECTS
------------------------

| JSON | JavaScript Objects |
|------|-------------------|
| Keys must be strings with double quotes | Keys can be unquoted if they're valid identifiers |
| Cannot contain functions or methods | Can contain functions and methods |
| Cannot use comments | Can use comments |
| No undefined value | Can have undefined values |
| Only double quotes for strings | Single, double, or backtick quotes for strings |
| Cannot have trailing commas | Can have trailing commas |

Example JavaScript object:
```javascript
const person = {
  firstName: 'John', // No quotes needed
  lastName: "Doe",   // Can use double quotes
  getFullName() {    // Can contain methods
    return this.firstName + ' ' + this.lastName;
  },
  'address-line-1': '123 Main St' // Quoted if not a valid identifier
};
```

## WORKING WITH JSON IN JAVASCRIPT
------------------------

### Converting JavaScript Objects to JSON
```javascript
const person = {
  name: "John Doe",
  age: 30,
  isEmployed: true
};

// Convert object to JSON string
const jsonString = JSON.stringify(person);
console.log(jsonString);
// Output: {"name":"John Doe","age":30,"isEmployed":true}

// Pretty-print with indentation
const prettyJson = JSON.stringify(person, null, 2);
console.log(prettyJson);
// Output:
// {
//   "name": "John Doe",
//   "age": 30,
//   "isEmployed": true
// }

// Custom replacer function
const jsonWithReplacer = JSON.stringify(person, (key, value) => {
  if (typeof value === "string") {
    return value.toUpperCase();
  }
  return value;
}, 2);
console.log(jsonWithReplacer);
// Output:
// {
//   "name": "JOHN DOE",
//   "age": 30,
//   "isEmployed": true
// }
```

### Parsing JSON to JavaScript Objects
```javascript
const jsonString = '{"name":"John Doe","age":30,"isEmployed":true}';

// Parse JSON string to JavaScript object
const person = JSON.parse(jsonString);
console.log(person.name); // "John Doe"
console.log(person.age);  // 30

// Parse with reviver function
const personWithReviver = JSON.parse(jsonString, (key, value) => {
  if (key === 'age') {
    return value + 1;  // Add one year to age
  }
  return value;
});
console.log(personWithReviver.age); // 31
```

## JSON IN OTHER LANGUAGES
------------------------

### Python
```python
import json

# Python dict to JSON
person = {
    "name": "John Doe",
    "age": 30,
    "isEmployed": True,  # Python True will convert to JSON true
    "hobbies": ["reading", "coding"],
    "address": None  # None will convert to JSON null
}
json_string = json.dumps(person)
pretty_json = json.dumps(person, indent=2)

# JSON to Python dict
json_string = '{"name":"John Doe","age":30,"isEmployed":true}'
person = json.loads(json_string)
print(person["name"])  # John Doe
```

### Java
```java
// Using org.json library
import org.json.JSONObject;
import org.json.JSONArray;

// Create JSON object
JSONObject person = new JSONObject();
person.put("name", "John Doe");
person.put("age", 30);
person.put("isEmployed", true);

JSONArray hobbies = new JSONArray();
hobbies.put("reading");
hobbies.put("coding");
person.put("hobbies", hobbies);

String jsonString = person.toString();
String prettyJson = person.toString(2);  // With 2-space indentation

// Parse JSON
JSONObject parsedPerson = new JSONObject(jsonString);
String name = parsedPerson.getString("name");
int age = parsedPerson.getInt("age");
```

### C#
```csharp
using System.Text.Json;

// Create JSON
Person person = new Person
{
    Name = "John Doe",
    Age = 30,
    IsEmployed = true,
    Hobbies = new List<string> { "reading", "coding" }
};

string jsonString = JsonSerializer.Serialize(person);
string prettyJson = JsonSerializer.Serialize(person, new JsonSerializerOptions
{
    WriteIndented = true
});

// Parse JSON
Person parsedPerson = JsonSerializer.Deserialize<Person>(jsonString);
string name = parsedPerson.Name;  // John Doe
```

## JSON SCHEMA
------------------------

JSON Schema is a vocabulary that allows you to validate JSON documents. It's used to describe the structure and constraints of JSON data.

### Example JSON Schema
```json
{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Person",
  "type": "object",
  "required": ["name", "age"],
  "properties": {
    "name": {
      "type": "string",
      "minLength": 2,
      "maxLength": 100
    },
    "age": {
      "type": "integer",
      "minimum": 0,
      "maximum": 120
    },
    "email": {
      "type": "string",
      "format": "email"
    },
    "phoneNumbers": {
      "type": "array",
      "items": {
        "type": "object",
        "required": ["type", "number"],
        "properties": {
          "type": {
            "type": "string",
            "enum": ["home", "work", "mobile"]
          },
          "number": {
            "type": "string",
            "pattern": "^[0-9-]+$"
          }
        }
      }
    }
  }
}
```

## JSON-BASED FORMATS
------------------------

### JSON-LD (JSON for Linked Data)
JSON-LD is a method of encoding Linked Data using JSON, specifically designed for the web to help with SEO and data integration.

```json
{
  "@context": "https://schema.org",
  "@type": "Person",
  "name": "John Doe",
  "jobTitle": "Software Developer",
  "telephone": "+1-555-555-5555",
  "url": "http://www.johndoe.com",
  "address": {
    "@type": "PostalAddress",
    "streetAddress": "123 Main St",
    "addressLocality": "Anytown",
    "addressRegion": "CA",
    "postalCode": "12345",
    "addressCountry": "US"
  }
}
```

### GeoJSON
GeoJSON is a format for encoding geographic data structures using JSON.

```json
{
  "type": "Feature",
  "geometry": {
    "type": "Point",
    "coordinates": [-122.4194, 37.7749]
  },
  "properties": {
    "name": "San Francisco",
    "country": "United States",
    "population": 874961
  }
}
```

### JSON Web Token (JWT)
JWT is a compact, URL-safe means of representing claims to be transferred between two parties, commonly used for authentication.

```
// Format: header.payload.signature

// Header (encoded)
{
  "alg": "HS256",
  "typ": "JWT"
}

// Payload (encoded)
{
  "sub": "1234567890",
  "name": "John Doe",
  "iat": 1516239022,
  "exp": 1516242622
}

// Result (with signature)
eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJleHAiOjE1MTYyNDI2MjJ9.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
```

## JSON BEST PRACTICES
------------------------

1. **Use descriptive property names** that clearly indicate what the data represents.
2. **Keep it simple** - avoid deeply nested structures when possible.
3. **Be consistent** with naming conventions (e.g., camelCase or snake_case).
4. **Validate JSON** against a schema for critical applications.
5. **Handle errors** when parsing JSON from external sources.
6. **Use appropriate data types** (don't store numbers as strings unless necessary).
7. **Consider size** for network transfer - minimize unnecessary fields.
8. **Date format**: Use ISO 8601 format for dates (YYYY-MM-DDTHH:mm:ss.sssZ).
9. **Security**: Never trust JSON from external sources without validation.
10. **Document your schema** for other developers.

## JSON TOOLS AND RESOURCES
------------------------

### Online Tools
- **JSONLint**: Validates and formats JSON (jsonlint.com)
- **JSON Formatter & Validator**: Formats and validates JSON (jsonformatter.curiousconcept.com)
- **JSON Schema Validator**: Validates JSON against a schema (jsonschemavalidator.net)
- **JSON Path Finder**: Extract data using JSONPath (jsonpathfinder.com)
- **JSON to CSV Converter**: Converts JSON to CSV and vice versa

### Libraries
- **JavaScript**: Native JSON object, Lodash, json5
- **Python**: json (built-in), simplejson, ujson (faster)
- **Java**: Gson, Jackson, org.json
- **C#**: System.Text.Json, Newtonsoft.Json
- **PHP**: json_encode/json_decode, Zend\Json

### Standards and Specifications
- **JSON Specification**: json.org
- **JSON Schema**: json-schema.org
- **JSON-LD**: json-ld.org
- **GeoJSON**: geojson.org
- **JSON Web Token**: jwt.io