# Streamlit - Usage Guide

## Getting Started

### Installation
```bash
# Install Streamlit
pip install streamlit

# Install with additional dependencies
pip install streamlit[all]

# Verify installation
streamlit hello
```

### Basic App Structure
```python
import streamlit as st
import pandas as pd
import numpy as np

# App title
st.title('My First Streamlit App')

# Basic text
st.write('Hello, Streamlit!')

# Simple widget
name = st.text_input('Enter your name:')
if name:
    st.write(f'Hello, {name}!')
```

### Running Your App
```bash
# Run from command line
streamlit run your_app.py

# Run on specific port
streamlit run your_app.py --server.port 8080

# Run with debugging
streamlit run your_app.py --logger.level debug
```

## Common Operations

### Data Display
```python
# Display DataFrames
df = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6]})
st.dataframe(df)
st.table(df)  # Static table

# Display metrics
col1, col2, col3 = st.columns(3)
col1.metric("Temperature", "70 °F", "1.2 °F")
col2.metric("Wind", "9 mph", "-8%")
col3.metric("Humidity", "86%", "4%")
```

### Input Widgets
```python
# Text inputs
text = st.text_input('Text input')
textarea = st.text_area('Text area')
password = st.text_input('Password', type='password')

# Numeric inputs
number = st.number_input('Number input', value=0)
slider = st.slider('Slider', 0, 100, 50)

# Selection widgets
option = st.selectbox('Select option', ['A', 'B', 'C'])
multiselect = st.multiselect('Multi-select', ['A', 'B', 'C'])
radio = st.radio('Radio', ['Option 1', 'Option 2'])

# Date and time
date = st.date_input('Date')
time = st.time_input('Time')

# File upload
uploaded_file = st.file_uploader('Upload file', type=['csv', 'xlsx'])
```

### Charts and Visualizations
```python
# Line chart
chart_data = pd.DataFrame(np.random.randn(20, 3), columns=['a', 'b', 'c'])
st.line_chart(chart_data)

# Bar chart
st.bar_chart(chart_data)

# Map
map_data = pd.DataFrame(
    np.random.randn(1000, 2) / [50, 50] + [37.76, -122.4],
    columns=['lat', 'lon']
)
st.map(map_data)

# Plotly integration
import plotly.express as px
fig = px.scatter(df, x='A', y='B')
st.plotly_chart(fig)
```

## Advanced Usage

### Layout and Containers
```python
# Columns
col1, col2 = st.columns(2)
with col1:
    st.write('Column 1')
with col2:
    st.write('Column 2')

# Sidebar
with st.sidebar:
    option = st.selectbox('Sidebar option', ['A', 'B', 'C'])

# Containers
container = st.container()
with container:
    st.write('Inside container')

# Expander
with st.expander('Click to expand'):
    st.write('Hidden content')
```

### Session State
```python
# Initialize session state
if 'counter' not in st.session_state:
    st.session_state.counter = 0

# Use session state
if st.button('Increment'):
    st.session_state.counter += 1

st.write(f'Counter: {st.session_state.counter}')
```

### Caching
```python
@st.cache_data
def load_data():
    # Expensive data loading operation
    return pd.read_csv('large_file.csv')

@st.cache_resource
def load_model():
    # Load ML model (singleton resource)
    return load_trained_model()

# Use cached functions
data = load_data()
model = load_model()
```

## Tips and Tricks

### Performance Optimization
```python
# Use fragments for partial reruns
@st.fragment
def expensive_component():
    # Only reruns when specific inputs change
    return process_data()

# Lazy loading
@st.cache_data
def load_on_demand(page_num):
    return get_page_data(page_num)
```

### Custom Styling
```python
# Custom CSS
st.markdown("""
<style>
.main-header {
    font-size: 2em;
    color: #1e88e5;
}
</style>
""", unsafe_allow_html=True)

# Custom HTML
st.markdown('<h1 class="main-header">Custom Header</h1>', 
           unsafe_allow_html=True)
```

### Error Handling
```python
try:
    result = risky_operation()
    st.success('Operation successful!')
except Exception as e:
    st.error(f'Error: {str(e)}')
```

Created: 2025-06-02 (Updated with comprehensive usage guide)
