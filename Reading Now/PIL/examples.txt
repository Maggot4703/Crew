# PIL (Python Imaging Library/Pillow) - Examples and Code Samples

## Example 1: Basic Image Operations - Opening, Resizing, and Saving Images
```python
from PIL import Image, ImageEnhance
import os

# Basic image operations
def basic_image_operations():
    # Open an image
    image = Image.open('input.jpg')
    
    # Display basic image information
    print(f"Image format: {image.format}")
    print(f"Image mode: {image.mode}")
    print(f"Image size: {image.size}")
    
    # Resize image (maintaining aspect ratio)
    width, height = image.size
    new_width = 800
    new_height = int((new_width * height) / width)
    resized_image = image.resize((new_width, new_height), Image.LANCZOS)
    
    # Rotate image
    rotated_image = image.rotate(45, expand=True, fillcolor='white')
    
    # Crop image (left, top, right, bottom)
    cropped_image = image.crop((100, 100, 400, 400))
    
    # Convert image modes
    grayscale_image = image.convert('L')  # Convert to grayscale
    rgb_image = image.convert('RGB')      # Convert to RGB
    
    # Save images in different formats
    resized_image.save('resized_image.jpg', 'JPEG', quality=95)
    rotated_image.save('rotated_image.png', 'PNG')
    cropped_image.save('cropped_image.webp', 'WEBP')
    grayscale_image.save('grayscale_image.jpg', 'JPEG')
    
    # Create thumbnail
    image.thumbnail((150, 150), Image.LANCZOS)
    image.save('thumbnail.jpg', 'JPEG')

# Usage
basic_image_operations()
```

## Example 2: Image Enhancement and Filters - Color, Brightness, Contrast, and Sharpness
```python
from PIL import Image, ImageEnhance, ImageFilter
import numpy as np

def image_enhancement_and_filters():
    # Open original image
    image = Image.open('photo.jpg')
    
    # Brightness enhancement
    brightness_enhancer = ImageEnhance.Brightness(image)
    bright_image = brightness_enhancer.enhance(1.3)  # 30% brighter
    dim_image = brightness_enhancer.enhance(0.7)     # 30% darker
    
    # Contrast enhancement
    contrast_enhancer = ImageEnhance.Contrast(image)
    high_contrast = contrast_enhancer.enhance(1.5)   # 50% more contrast
    low_contrast = contrast_enhancer.enhance(0.5)    # 50% less contrast
    
    # Color saturation
    color_enhancer = ImageEnhance.Color(image)
    saturated_image = color_enhancer.enhance(1.4)    # More vivid
    desaturated_image = color_enhancer.enhance(0.3)  # More muted
    
    # Sharpness enhancement
    sharpness_enhancer = ImageEnhance.Sharpness(image)
    sharp_image = sharpness_enhancer.enhance(2.0)    # Sharper
    soft_image = sharpness_enhancer.enhance(0.5)     # Softer
    
    # Apply various filters
    blurred_image = image.filter(ImageFilter.BLUR)
    edge_enhanced = image.filter(ImageFilter.EDGE_ENHANCE)
    embossed_image = image.filter(ImageFilter.EMBOSS)
    smooth_image = image.filter(ImageFilter.SMOOTH)
    
    # Custom kernel filter (edge detection)
    edge_kernel = ImageFilter.Kernel((3, 3), [-1, -1, -1, -1, 8, -1, -1, -1, -1], 1, 0)
    edge_detected = image.filter(edge_kernel)
    
    # Gaussian blur with custom radius
    gaussian_blur = image.filter(ImageFilter.GaussianBlur(radius=3))
    
    # Unsharp mask filter
    unsharp_mask = image.filter(ImageFilter.UnsharpMask(radius=2, percent=150, threshold=3))
    
    # Save enhanced images
    bright_image.save('enhanced_bright.jpg')
    high_contrast.save('enhanced_contrast.jpg')
    saturated_image.save('enhanced_color.jpg')
    sharp_image.save('enhanced_sharp.jpg')
    edge_enhanced.save('filtered_edges.jpg')
    gaussian_blur.save('filtered_blur.jpg')

# Usage
image_enhancement_and_filters()
```

## Example 3: Image Composition and Overlays - Watermarks, Text, and Image Blending
```python
from PIL import Image, ImageDraw, ImageFont
from PIL.Image import Resampling

def image_composition_and_overlays():
    # Load base image
    base_image = Image.open('background.jpg').convert('RGBA')
    
    # Create a watermark
    watermark = Image.open('logo.png').convert('RGBA')
    
    # Resize watermark to 1/4 of base image width
    base_width = base_image.width
    watermark_width = base_width // 4
    watermark_height = int((watermark_width * watermark.height) / watermark.width)
    watermark = watermark.resize((watermark_width, watermark_height), Resampling.LANCZOS)
    
    # Make watermark semi-transparent
    watermark_alpha = Image.new('RGBA', watermark.size, (255, 255, 255, 0))
    watermark_alpha.paste(watermark, (0, 0))
    watermark_alpha.putalpha(128)  # 50% transparency
    
    # Position watermark (bottom-right corner)
    watermark_position = (
        base_image.width - watermark.width - 20,
        base_image.height - watermark.height - 20
    )
    
    # Paste watermark onto base image
    watermarked_image = base_image.copy()
    watermarked_image.paste(watermark_alpha, watermark_position, watermark_alpha)
    
    # Add text overlay
    draw = ImageDraw.Draw(watermarked_image)
    
    # Load font (use default if custom font not available)
    try:
        font_large = ImageFont.truetype("arial.ttf", 48)
        font_small = ImageFont.truetype("arial.ttf", 24)
    except OSError:
        font_large = ImageFont.load_default()
        font_small = ImageFont.load_default()
    
    # Add title text
    title_text = "Nature Photography"
    title_bbox = draw.textbbox((0, 0), title_text, font=font_large)
    title_width = title_bbox[2] - title_bbox[0]
    title_position = ((base_image.width - title_width) // 2, 50)
    
    # Draw text with outline effect
    outline_color = "black"
    text_color = "white"
    
    # Draw outline
    for adj in range(-2, 3):
        for adj2 in range(-2, 3):
            draw.text((title_position[0] + adj, title_position[1] + adj2), 
                     title_text, font=font_large, fill=outline_color)
    
    # Draw main text
    draw.text(title_position, title_text, font=font_large, fill=text_color)
    
    # Add timestamp
    timestamp_text = "Â© 2024 - Professional Photography"
    timestamp_position = (20, base_image.height - 40)
    draw.text(timestamp_position, timestamp_text, font=font_small, fill="white")
    
    # Create image blend/composite
    overlay_image = Image.open('texture.jpg').convert('RGBA')
    overlay_image = overlay_image.resize(base_image.size, Resampling.LANCZOS)
    
    # Blend images (multiply mode simulation)
    blended_image = Image.blend(base_image, overlay_image, alpha=0.3)
    
    # Save results
    watermarked_image.convert('RGB').save('watermarked_image.jpg', 'JPEG', quality=95)
    blended_image.convert('RGB').save('blended_image.jpg', 'JPEG', quality=95)

# Usage
image_composition_and_overlays()
```

## Example 4: Image Analysis and Processing - Histograms, Statistics, and Color Manipulation
```python
from PIL import Image, ImageStat, ImageOps
import matplotlib.pyplot as plt
from collections import Counter

def image_analysis_and_processing():
    # Load image for analysis
    image = Image.open('analyze_me.jpg')
    
    # Basic image statistics
    stat = ImageStat.Stat(image)
    print(f"Image statistics:")
    print(f"Mean values (R, G, B): {stat.mean}")
    print(f"Median values (R, G, B): {stat.median}")
    print(f"Standard deviation (R, G, B): {stat.stddev}")
    print(f"Min/Max values: {stat.extrema}")
    
    # Get image histogram
    histogram = image.histogram()
    
    # For RGB images, split histogram into channels
    if image.mode == 'RGB':
        red_histogram = histogram[0:256]
        green_histogram = histogram[256:512]
        blue_histogram = histogram[512:768]
        
        # Plot histogram
        plt.figure(figsize=(12, 4))
        plt.subplot(1, 3, 1)
        plt.plot(red_histogram, color='red', alpha=0.7)
        plt.title('Red Channel')
        
        plt.subplot(1, 3, 2)
        plt.plot(green_histogram, color='green', alpha=0.7)
        plt.title('Green Channel')
        
        plt.subplot(1, 3, 3)
        plt.plot(blue_histogram, color='blue', alpha=0.7)
        plt.title('Blue Channel')
        
        plt.tight_layout()
        plt.savefig('histogram_analysis.png')
        plt.close()
    
    # Color quantization (reduce colors)
    quantized_image = image.quantize(colors=16)  # Reduce to 16 colors
    quantized_rgb = quantized_image.convert('RGB')
    
    # Get dominant colors
    def get_dominant_colors(image, num_colors=5):
        # Convert to RGB and get all pixel colors
        rgb_image = image.convert('RGB')
        colors = rgb_image.getcolors(maxcolors=256*256*256)
        
        if colors:
            # Sort by frequency and get top colors
            colors.sort(key=lambda x: x[0], reverse=True)
            dominant_colors = [color[1] for color in colors[:num_colors]]
            return dominant_colors
        return []
    
    dominant_colors = get_dominant_colors(image)
    print(f"Dominant colors: {dominant_colors}")
    
    # Color transformations
    # Invert colors
    inverted_image = ImageOps.invert(image.convert('RGB'))
    
    # Posterize (reduce color levels)
    posterized_image = ImageOps.posterize(image, bits=4)
    
    # Solarize (partial color inversion)
    solarized_image = ImageOps.solarize(image, threshold=128)
    
    # Equalize histogram (improve contrast)
    equalized_image = ImageOps.equalize(image)
    
    # Auto-contrast
    autocontrast_image = ImageOps.autocontrast(image)
    
    # Color balance adjustment
    def adjust_color_balance(image, red_factor=1.0, green_factor=1.0, blue_factor=1.0):
        if image.mode != 'RGB':
            image = image.convert('RGB')
        
        # Split into channels
        r, g, b = image.split()
        
        # Apply factors to each channel
        r = r.point(lambda x: min(255, int(x * red_factor)))
        g = g.point(lambda x: min(255, int(x * green_factor)))
        b = b.point(lambda x: min(255, int(x * blue_factor)))
        
        # Merge channels back
        return Image.merge('RGB', (r, g, b))
    
    # Apply color balance (warm tone)
    warm_image = adjust_color_balance(image, red_factor=1.1, green_factor=1.05, blue_factor=0.9)
    
    # Apply color balance (cool tone)
    cool_image = adjust_color_balance(image, red_factor=0.9, green_factor=1.0, blue_factor=1.1)
    
    # Save processed images
    quantized_rgb.save('quantized_image.jpg')
    inverted_image.save('inverted_image.jpg')
    posterized_image.save('posterized_image.jpg')
    solarized_image.save('solarized_image.jpg')
    equalized_image.save('equalized_image.jpg')
    autocontrast_image.save('autocontrast_image.jpg')
    warm_image.save('warm_tone_image.jpg')
    cool_image.save('cool_tone_image.jpg')

# Usage
image_analysis_and_processing()
```

## Example 5: Batch Processing and Automation - Processing Multiple Images
```python
from PIL import Image, ImageOps
import os
import glob
from concurrent.futures import ThreadPoolExecutor
import time

def batch_processing_and_automation():
    # Configuration
    input_folder = "input_images"
    output_folder = "processed_images"
    
    # Create output folder if it doesn't exist
    os.makedirs(output_folder, exist_ok=True)
    
    # Supported image formats
    supported_formats = ['*.jpg', '*.jpeg', '*.png', '*.bmp', '*.tiff', '*.webp']
    
    # Get all image files
    image_files = []
    for format_pattern in supported_formats:
        image_files.extend(glob.glob(os.path.join(input_folder, format_pattern)))
        image_files.extend(glob.glob(os.path.join(input_folder, format_pattern.upper())))
    
    print(f"Found {len(image_files)} images to process")
    
    def process_single_image(image_path):
        """Process a single image with multiple operations"""
        try:
            # Get filename without extension
            filename = os.path.splitext(os.path.basename(image_path))[0]
            
            # Open image
            image = Image.open(image_path)
            
            # Convert to RGB if necessary
            if image.mode != 'RGB':
                image = image.convert('RGB')
            
            # 1. Create thumbnail
            thumbnail = image.copy()
            thumbnail.thumbnail((200, 200), Image.LANCZOS)
            thumbnail.save(os.path.join(output_folder, f"{filename}_thumb.jpg"), 'JPEG', quality=85)
            
            # 2. Create web-optimized version
            web_image = image.copy()
            web_image.thumbnail((1200, 1200), Image.LANCZOS)
            web_image.save(os.path.join(output_folder, f"{filename}_web.jpg"), 'JPEG', quality=80, optimize=True)
            
            # 3. Create high-quality print version
            print_image = image.copy()
            print_image.save(os.path.join(output_folder, f"{filename}_print.jpg"), 'JPEG', quality=95, optimize=True)
            
            # 4. Create grayscale version
            grayscale = ImageOps.grayscale(image)
            grayscale.save(os.path.join(output_folder, f"{filename}_bw.jpg"), 'JPEG', quality=85)
            
            # 5. Create square crop for social media
            size = min(image.width, image.height)
            left = (image.width - size) // 2
            top = (image.height - size) // 2
            right = left + size
            bottom = top + size
            
            square_crop = image.crop((left, top, right, bottom))
            square_crop = square_crop.resize((1080, 1080), Image.LANCZOS)
            square_crop.save(os.path.join(output_folder, f"{filename}_square.jpg"), 'JPEG', quality=85)
            
            # 6. Create watermarked version
            watermarked = image.copy()
            from PIL import ImageDraw, ImageFont
            draw = ImageDraw.Draw(watermarked)
            
            # Add simple text watermark
            try:
                font = ImageFont.truetype("arial.ttf", 36)
            except OSError:
                font = ImageFont.load_default()
            
            watermark_text = "Â© My Photography"
            bbox = draw.textbbox((0, 0), watermark_text, font=font)
            text_width = bbox[2] - bbox[0]
            text_height = bbox[3] - bbox[1]
            
            # Position in bottom right
            position = (watermarked.width - text_width - 20, watermarked.height - text_height - 20)
            
            # Draw with semi-transparent effect
            draw.text(position, watermark_text, font=font, fill=(255, 255, 255, 128))
            watermarked.save(os.path.join(output_folder, f"{filename}_watermarked.jpg"), 'JPEG', quality=90)
            
            return f"Processed: {filename}"
            
        except Exception as e:
            return f"Error processing {image_path}: {str(e)}"
    
    # Process images in parallel
    start_time = time.time()
    
    with ThreadPoolExecutor(max_workers=4) as executor:
        results = list(executor.map(process_single_image, image_files))
    
    end_time = time.time()
    
    # Print results
    for result in results:
        print(result)
    
    print(f"\nBatch processing completed in {end_time - start_time:.2f} seconds")
    print(f"Processed {len(image_files)} images")
    print(f"Generated {len(image_files) * 6} output files")
    
    # Create an index HTML file to view results
    create_image_gallery(output_folder)

def create_image_gallery(folder_path):
    """Create an HTML gallery to view processed images"""
    html_content = """
    <!DOCTYPE html>
    <html>
    <head>
        <title>Processed Images Gallery</title>
        <style>
            body { font-family: Arial, sans-serif; margin: 20px; }
            .gallery { display: grid; grid-template-columns: repeat(auto-fill, minmax(300px, 1fr)); gap: 20px; }
            .image-set { border: 1px solid #ddd; padding: 15px; border-radius: 8px; }
            .image-set h3 { margin-top: 0; }
            .image-set img { max-width: 100%; height: auto; margin: 5px 0; border-radius: 4px; }
            .thumbnail { max-width: 150px; }
        </style>
    </head>
    <body>
        <h1>Processed Images Gallery</h1>
        <div class="gallery">
    """
    
    # Group images by base name
    processed_images = {}
    for file in os.listdir(folder_path):
        if file.endswith('.jpg'):
            base_name = file.split('_')[0]
            if base_name not in processed_images:
                processed_images[base_name] = []
            processed_images[base_name].append(file)
    
    for base_name, files in processed_images.items():
        html_content += f"""
        <div class="image-set">
            <h3>{base_name}</h3>
        """
        
        for file in sorted(files):
            if 'thumb' in file:
                html_content += f'<p>Thumbnail: <img src="{file}" class="thumbnail" alt="{file}"></p>'
            else:
                html_content += f'<p>{file.split("_")[-1].split(".")[0].title()}: <img src="{file}" alt="{file}"></p>'
        
        html_content += '</div>'
    
    html_content += """
        </div>
    </body>
    </html>
    """
    
    with open(os.path.join(folder_path, 'gallery.html'), 'w') as f:
        f.write(html_content)
    
    print(f"Gallery created: {os.path.join(folder_path, 'gallery.html')}")

# Usage
batch_processing_and_automation()
```

## Example 6: Advanced Image Effects - Artistic Filters and Creative Processing
```python
from PIL import Image, ImageFilter, ImageEnhance, ImageDraw
import numpy as np
from PIL.Image import Resampling

def advanced_image_effects():
    # Load base image
    image = Image.open('artistic_input.jpg').convert('RGB')
    
    # 1. Oil Painting Effect
    def oil_painting_effect(image, intensity=1):
        # Apply multiple blur passes with varying radii
        oil_image = image.copy()
        for i in range(intensity * 3):
            oil_image = oil_image.filter(ImageFilter.SMOOTH_MORE)
        
        # Enhance contrast and saturation
        enhancer = ImageEnhance.Contrast(oil_image)
        oil_image = enhancer.enhance(1.3)
        
        enhancer = ImageEnhance.Color(oil_image)
        oil_image = enhancer.enhance(1.2)
        
        return oil_image
    
    oil_painting = oil_painting_effect(image, intensity=2)
    
    # 2. Vintage/Retro Effect
    def vintage_effect(image):
        # Convert to arrays for manipulation
        img_array = np.array(image)
        
        # Apply sepia tone
        sepia_filter = np.array([
            [0.393, 0.769, 0.189],
            [0.349, 0.686, 0.168],
            [0.272, 0.534, 0.131]
        ])
        
        sepia_img = img_array.dot(sepia_filter.T)
        sepia_img = np.clip(sepia_img, 0, 255).astype(np.uint8)
        vintage_image = Image.fromarray(sepia_img)
        
        # Add vignette effect
        width, height = vintage_image.size
        vignette = Image.new('L', (width, height), 0)
        vignette_draw = ImageDraw.Draw(vignette)
        
        # Create radial gradient
        center_x, center_y = width // 2, height // 2
        max_radius = min(center_x, center_y)
        
        for radius in range(max_radius, 0, -5):
            intensity = int(255 * (radius / max_radius) * 0.8)
            vignette_draw.ellipse([
                center_x - radius, center_y - radius,
                center_x + radius, center_y + radius
            ], fill=intensity)
        
        # Apply vignette
        vintage_image = Image.composite(vintage_image, Image.new('RGB', vintage_image.size, (101, 67, 33)), vignette)
        
        # Reduce contrast slightly
        enhancer = ImageEnhance.Contrast(vintage_image)
        vintage_image = enhancer.enhance(0.9)
        
        return vintage_image
    
    vintage_image = vintage_effect(image)
    
    # 3. Pencil Sketch Effect
    def pencil_sketch_effect(image):
        # Convert to grayscale
        gray_image = image.convert('L')
        
        # Invert the image
        inverted_image = ImageOps.invert(gray_image)
        
        # Apply Gaussian blur
        blurred_image = inverted_image.filter(ImageFilter.GaussianBlur(radius=21))
        
        # Blend using color dodge mode simulation
        sketch_array = np.array(gray_image, dtype=np.float32)
        blur_array = np.array(blurred_image, dtype=np.float32)
        
        # Color dodge blend mode
        result_array = sketch_array / (255 - blur_array) * 255
        result_array = np.clip(result_array, 0, 255).astype(np.uint8)
        
        sketch_image = Image.fromarray(result_array, mode='L')
        
        return sketch_image
    
    pencil_sketch = pencil_sketch_effect(image)
    
    # 4. HDR (High Dynamic Range) Effect
    def hdr_effect(image):
        # Create multiple exposure versions
        bright = ImageEnhance.Brightness(image).enhance(1.5)
        normal = image.copy()
        dark = ImageEnhance.Brightness(image).enhance(0.5)
        
        # Convert to arrays
        bright_array = np.array(bright, dtype=np.float32)
        normal_array = np.array(normal, dtype=np.float32)
        dark_array = np.array(dark, dtype=np.float32)
        
        # Tone mapping simulation
        hdr_array = (bright_array * 0.3 + normal_array * 0.4 + dark_array * 0.3)
        hdr_array = np.clip(hdr_array, 0, 255).astype(np.uint8)
        
        hdr_image = Image.fromarray(hdr_array)
        
        # Enhance local contrast
        enhancer = ImageEnhance.Contrast(hdr_image)
        hdr_image = enhancer.enhance(1.2)
        
        # Enhance saturation
        enhancer = ImageEnhance.Color(hdr_image)
        hdr_image = enhancer.enhance(1.3)
        
        return hdr_image
    
    hdr_image = hdr_effect(image)
    
    # 5. Pop Art Effect
    def pop_art_effect(image):
        # Posterize to reduce colors
        posterized = ImageOps.posterize(image, bits=3)
        
        # Enhance saturation dramatically
        enhancer = ImageEnhance.Color(posterized)
        pop_image = enhancer.enhance(2.0)
        
        # Enhance contrast
        enhancer = ImageEnhance.Contrast(pop_image)
        pop_image = enhancer.enhance(1.5)
        
        return pop_image
    
    pop_art_image = pop_art_effect(image)
    
    # 6. Cross Processing Effect
    def cross_processing_effect(image):
        # Convert to arrays for channel manipulation
        img_array = np.array(image, dtype=np.float32)
        
        # Split channels
        r, g, b = img_array[:,:,0], img_array[:,:,1], img_array[:,:,2]
        
        # Apply cross processing curves
        # Red channel: increase highlights, decrease shadows
        r = np.where(r < 128, r * 0.8, r * 1.2)
        
        # Green channel: S-curve
        g = np.where(g < 64, g * 0.7, 
             np.where(g < 192, g * 1.1, g * 0.9))
        
        # Blue channel: increase shadows, decrease highlights
        b = np.where(b < 128, b * 1.2, b * 0.8)
        
        # Recombine channels
        cross_array = np.stack([r, g, b], axis=2)
        cross_array = np.clip(cross_array, 0, 255).astype(np.uint8)
        
        cross_image = Image.fromarray(cross_array)
        
        # Add slight color cast
        enhancer = ImageEnhance.Color(cross_image)
        cross_image = enhancer.enhance(1.1)
        
        return cross_image
    
    cross_processed = cross_processing_effect(image)
    
    # 7. Infrared Effect
    def infrared_effect(image):
        # Convert to arrays
        img_array = np.array(image, dtype=np.float32)
        
        # Swap red and blue channels, invert red
        r, g, b = img_array[:,:,0], img_array[:,:,1], img_array[:,:,2]
        
        # Create infrared effect
        ir_r = 255 - b  # Invert blue to red
        ir_g = g        # Keep green
        ir_b = r * 0.3  # Reduce original red to blue
        
        ir_array = np.stack([ir_r, ir_g, ir_b], axis=2)
        ir_array = np.clip(ir_array, 0, 255).astype(np.uint8)
        
        ir_image = Image.fromarray(ir_array)
        
        # Enhance contrast
        enhancer = ImageEnhance.Contrast(ir_image)
        ir_image = enhancer.enhance(1.3)
        
        return ir_image
    
    infrared_image = infrared_effect(image)
    
    # Save all artistic effects
    oil_painting.save('artistic_oil_painting.jpg', 'JPEG', quality=95)
    vintage_image.save('artistic_vintage.jpg', 'JPEG', quality=95)
    pencil_sketch.save('artistic_pencil_sketch.jpg', 'JPEG', quality=95)
    hdr_image.save('artistic_hdr.jpg', 'JPEG', quality=95)
    pop_art_image.save('artistic_pop_art.jpg', 'JPEG', quality=95)
    cross_processed.save('artistic_cross_processing.jpg', 'JPEG', quality=95)
    infrared_image.save('artistic_infrared.jpg', 'JPEG', quality=95)
    
    print("All artistic effects applied and saved!")

# Usage
advanced_image_effects()
```

## Example 7: Professional Workflow Integration - EXIF Data, Format Conversion, and Quality Control
```python
from PIL import Image, ExifTags
from PIL.ExifTags import TAGS
import os
import json
from datetime import datetime
import hashlib

def professional_workflow_integration():
    # Professional image processing workflow
    
    def extract_exif_data(image_path):
        """Extract and format EXIF data from image"""
        try:
            image = Image.open(image_path)
            exif_data = {}
            
            if hasattr(image, '_getexif') and image._getexif() is not None:
                exif = image._getexif()
                
                for tag_id in exif:
                    tag = TAGS.get(tag_id, tag_id)
                    data = exif.get(tag_id)
                    
                    # Decode bytes if necessary
                    if isinstance(data, bytes):
                        try:
                            data = data.decode('utf-8')
                        except:
                            data = str(data)
                    
                    exif_data[tag] = data
            
            return exif_data
            
        except Exception as e:
            print(f"Error extracting EXIF data: {e}")
            return {}
    
    def quality_control_check(image_path):
        """Perform quality control checks on image"""
        checks = {
            'file_exists': False,
            'readable': False,
            'min_resolution': False,
            'aspect_ratio_normal': False,
            'file_size_reasonable': False,
            'color_mode_valid': False,
            'no_corruption': False
        }
        
        try:
            # Check if file exists
            checks['file_exists'] = os.path.exists(image_path)
            
            if checks['file_exists']:
                # Check file size (not too small, not too large)
                file_size = os.path.getsize(image_path)
                checks['file_size_reasonable'] = 1024 < file_size < 50 * 1024 * 1024  # 1KB to 50MB
                
                # Try to open and analyze image
                image = Image.open(image_path)
                checks['readable'] = True
                
                # Check resolution (minimum 100x100)
                width, height = image.size
                checks['min_resolution'] = width >= 100 and height >= 100
                
                # Check aspect ratio (not too extreme)
                aspect_ratio = max(width, height) / min(width, height)
                checks['aspect_ratio_normal'] = aspect_ratio <= 10  # Max 10:1 ratio
                
                # Check color mode
                checks['color_mode_valid'] = image.mode in ['RGB', 'RGBA', 'L', 'P']
                
                # Basic corruption check (try to load pixel data)
                try:
                    image.load()
                    checks['no_corruption'] = True
                except:
                    checks['no_corruption'] = False
                
        except Exception as e:
            print(f"Quality control error: {e}")
        
        return checks
    
    def convert_image_formats(image_path, output_dir):
        """Convert image to multiple professional formats"""
        image = Image.open(image_path)
        base_name = os.path.splitext(os.path.basename(image_path))[0]
        
        conversions = {}
        
        # Ensure RGB mode for most conversions
        if image.mode not in ['RGB', 'RGBA']:
            rgb_image = image.convert('RGB')
        else:
            rgb_image = image
        
        # High-quality JPEG (for web/print)
        jpeg_path = os.path.join(output_dir, f"{base_name}_hq.jpg")
        rgb_image.save(jpeg_path, 'JPEG', quality=95, optimize=True, progressive=True)
        conversions['JPEG_HQ'] = jpeg_path
        
        # Web-optimized JPEG
        web_jpeg_path = os.path.join(output_dir, f"{base_name}_web.jpg")
        web_image = rgb_image.copy()
        web_image.thumbnail((1920, 1920), Image.LANCZOS)
        web_image.save(web_jpeg_path, 'JPEG', quality=85, optimize=True)
        conversions['JPEG_WEB'] = web_jpeg_path
        
        # PNG (lossless)
        png_path = os.path.join(output_dir, f"{base_name}_lossless.png")
        if image.mode == 'RGBA':
            image.save(png_path, 'PNG', optimize=True)
        else:
            rgb_image.save(png_path, 'PNG', optimize=True)
        conversions['PNG'] = png_path
        
        # WebP (modern format)
        webp_path = os.path.join(output_dir, f"{base_name}_modern.webp")
        rgb_image.save(webp_path, 'WEBP', quality=90, method=6)
        conversions['WEBP'] = webp_path
        
        # TIFF (archival)
        tiff_path = os.path.join(output_dir, f"{base_name}_archive.tiff")
        rgb_image.save(tiff_path, 'TIFF', compression='lzw')
        conversions['TIFF'] = tiff_path
        
        return conversions
    
    def generate_image_report(image_path):
        """Generate comprehensive image analysis report"""
        report = {
            'file_info': {},
            'image_properties': {},
            'exif_data': {},
            'quality_checks': {},
            'file_hash': '',
            'analysis_timestamp': datetime.now().isoformat()
        }
        
        # File information
        if os.path.exists(image_path):
            stat = os.stat(image_path)
            report['file_info'] = {
                'path': image_path,
                'size_bytes': stat.st_size,
                'size_mb': round(stat.st_size / (1024 * 1024), 2),
                'created': datetime.fromtimestamp(stat.st_ctime).isoformat(),
                'modified': datetime.fromtimestamp(stat.st_mtime).isoformat()
            }
            
            # Generate file hash for integrity checking
            with open(image_path, 'rb') as f:
                file_hash = hashlib.md5(f.read()).hexdigest()
            report['file_hash'] = file_hash
        
        try:
            # Image properties
            image = Image.open(image_path)
            report['image_properties'] = {
                'format': image.format,
                'mode': image.mode,
                'size': image.size,
                'width': image.width,
                'height': image.height,
                'megapixels': round((image.width * image.height) / 1000000, 2)
            }
            
            # Extract EXIF data
            report['exif_data'] = extract_exif_data(image_path)
            
        except Exception as e:
            report['error'] = str(e)
        
        # Quality control checks
        report['quality_checks'] = quality_control_check(image_path)
        
        return report
    
    def process_professional_workflow(input_path, output_dir):
        """Complete professional image processing workflow"""
        os.makedirs(output_dir, exist_ok=True)
        
        print(f"Processing: {input_path}")
        
        # 1. Generate analysis report
        report = generate_image_report(input_path)
        
        # Save report
        report_path = os.path.join(output_dir, 'image_analysis_report.json')
        with open(report_path, 'w') as f:
            json.dump(report, f, indent=2)
        
        # 2. Quality control check
        qc_results = report['quality_checks']
        passed_checks = sum(qc_results.values())
        total_checks = len(qc_results)
        
        print(f"Quality Control: {passed_checks}/{total_checks} checks passed")
        
        if passed_checks < total_checks:
            print("â ï¸  Quality issues detected:")
            for check, result in qc_results.items():
                if not result:
                    print(f"   - {check.replace('_', ' ').title()}: FAILED")
        
        # 3. Convert to multiple formats
        if qc_results['readable'] and qc_results['no_corruption']:
            conversions = convert_image_formats(input_path, output_dir)
            print(f"â Generated {len(conversions)} format variations")
            
            # 4. Create format comparison report
            format_report = {}
            for format_name, file_path in conversions.items():
                if os.path.exists(file_path):
                    size = os.path.getsize(file_path)
                    format_report[format_name] = {
                        'file_path': file_path,
                        'size_bytes': size,
                        'size_mb': round(size / (1024 * 1024), 2),
                        'compression_ratio': round(report['file_info']['size_bytes'] / size, 2) if size > 0 else 0
                    }
            
            # Save format comparison
            format_report_path = os.path.join(output_dir, 'format_comparison.json')
            with open(format_report_path, 'w') as f:
                json.dump(format_report, f, indent=2)
            
            print(f"ð Format comparison saved to: {format_report_path}")
            
        else:
            print("â Image failed quality checks - skipping conversions")
        
        print(f"ð Analysis report saved to: {report_path}")
        print("-" * 50)
    
    # Example usage - process multiple images
    input_images = [
        'professional_photo1.jpg',
        'professional_photo2.png',
        'professional_photo3.tiff'
    ]
    
    for image_path in input_images:
        if os.path.exists(image_path):
            output_dir = f"processed_{os.path.splitext(os.path.basename(image_path))[0]}"
            process_professional_workflow(image_path, output_dir)
        else:
            print(f"â ï¸  File not found: {image_path}")

# Usage
professional_workflow_integration()

# Additional utility functions for professional workflows

def create_contact_sheet(image_folder, output_path, images_per_row=4):
    """Create a contact sheet from multiple images"""
    image_files = []
    for ext in ['*.jpg', '*.jpeg', '*.png', '*.bmp']:
        image_files.extend(glob.glob(os.path.join(image_folder, ext)))
    
    if not image_files:
        print("No images found for contact sheet")
        return
    
    # Load and resize images
    thumb_size = (200, 200)
    thumbnails = []
    
    for img_path in image_files[:20]:  # Limit to 20 images
        try:
            img = Image.open(img_path)
            img.thumbnail(thumb_size, Image.LANCZOS)
            
            # Create a white background thumbnail
            thumb = Image.new('RGB', thumb_size, 'white')
            # Center the image
            offset = ((thumb_size[0] - img.width) // 2, (thumb_size[1] - img.height) // 2)
            thumb.paste(img, offset)
            
            thumbnails.append((thumb, os.path.basename(img_path)))
        except Exception as e:
            print(f"Error processing {img_path}: {e}")
    
    # Calculate contact sheet dimensions
    rows = (len(thumbnails) + images_per_row - 1) // images_per_row
    contact_width = images_per_row * thumb_size[0]
    contact_height = rows * (thumb_size[1] + 30)  # Extra space for filename
    
    # Create contact sheet
    contact_sheet = Image.new('RGB', (contact_width, contact_height), 'white')
    draw = ImageDraw.Draw(contact_sheet)
    
    try:
        font = ImageFont.truetype("arial.ttf", 12)
    except OSError:
        font = ImageFont.load_default()
    
    # Place thumbnails
    for i, (thumb, filename) in enumerate(thumbnails):
        row = i // images_per_row
        col = i % images_per_row
        
        x = col * thumb_size[0]
        y = row * (thumb_size[1] + 30)
        
        contact_sheet.paste(thumb, (x, y))
        
        # Add filename
        draw.text((x + 5, y + thumb_size[1] + 5), filename, font=font, fill='black')
    
    contact_sheet.save(output_path, 'JPEG', quality=90)
    print(f"Contact sheet created: {output_path}")

# Create contact sheet example
# create_contact_sheet('input_images', 'contact_sheet.jpg')
```

This comprehensive PIL documentation covers:

1. **Basic Operations**: Opening, resizing, rotating, cropping, format conversion
2. **Enhancement & Filters**: Brightness, contrast, color, sharpness, various filters
3. **Composition & Overlays**: Watermarks, text overlays, image blending
4. **Analysis & Processing**: Histograms, statistics, color manipulation
5. **Batch Processing**: Automated processing of multiple images with threading
6. **Artistic Effects**: Oil painting, vintage, pencil sketch, HDR, pop art effects
7. **Professional Workflows**: EXIF handling, quality control, format conversion, reporting

Each example includes practical, real-world applications with detailed code that can be directly implemented in professional projects.