# JavaScript - Usage Guide

## Getting Started

### Environment Setup
```bash
# Install Node.js (includes npm)
# Download from https://nodejs.org or use package manager

# Using Node Version Manager (nvm)
curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | bash
nvm install node        # Install latest version
nvm use node           # Use latest version
nvm install 18.17.0    # Install specific version
nvm use 18.17.0        # Switch to specific version

# Verify installation
node --version
npm --version

# Alternative package managers
npm install -g yarn    # Yarn package manager
npm install -g pnpm    # PNPM package manager
```

### Project Initialization
```bash
# Create new project
mkdir my-project
cd my-project

# Initialize package.json
npm init                    # Interactive setup
npm init -y                # Default setup

# Install dependencies
npm install express         # Install package
npm install --save express  # Save to dependencies
npm install --save-dev jest # Save to devDependencies
npm install -g nodemon     # Install globally

# Project structure
my-project/
├── package.json
├── package-lock.json
├── node_modules/
├── src/
│   ├── index.js
│   ├── components/
│   └── utils/
├── tests/
├── public/
└── README.md
```

### Basic Configuration Files
```json
// package.json - Project configuration
{
  "name": "my-project",
  "version": "1.0.0",
  "description": "My JavaScript project",
  "main": "src/index.js",
  "scripts": {
    "start": "node src/index.js",
    "dev": "nodemon src/index.js",
    "test": "jest",
    "build": "webpack --mode production",
    "lint": "eslint src/",
    "format": "prettier --write src/"
  },
  "dependencies": {
    "express": "^4.18.0",
    "lodash": "^4.17.21"
  },
  "devDependencies": {
    "jest": "^29.0.0",
    "eslint": "^8.0.0",
    "prettier": "^2.7.0",
    "nodemon": "^2.0.20"
  },
  "engines": {
    "node": ">=16.0.0"
  }
}
```

## Common Operations

### Variables and Data Types
```javascript
// Variable declarations
let mutableVariable = "can be changed";
const immutableVariable = "cannot be changed";
var oldStyleVariable = "function scoped";

// Data types
const string = "Hello World";
const number = 42;
const boolean = true;
const array = [1, 2, 3, "mixed", true];
const object = { name: "John", age: 30 };
const nullValue = null;
const undefinedValue = undefined;

// Type checking
console.log(typeof string);      // "string"
console.log(Array.isArray(array)); // true
console.log(object instanceof Object); // true
```

### Functions
```javascript
// Function declarations
function regularFunction(param1, param2) {
    return param1 + param2;
}

// Function expressions
const functionExpression = function(x, y) {
    return x * y;
};

// Arrow functions
const arrowFunction = (a, b) => a + b;
const singleParam = x => x * 2;
const noParams = () => console.log("Hello");

// Default parameters
function greet(name = "Guest") {
    return `Hello, ${name}!`;
}

// Rest parameters
function sum(...numbers) {
    return numbers.reduce((total, num) => total + num, 0);
}

// Destructuring parameters
function processUser({ name, email, age = 18 }) {
    console.log(`${name} (${age}): ${email}`);
}
```

### Object Operations
```javascript
// Object creation
const person = {
    name: "Alice",
    age: 30,
    greet() {
        return `Hello, I'm ${this.name}`;
    }
};

// Property access
console.log(person.name);        // Dot notation
console.log(person["age"]);      // Bracket notation

// Object methods
Object.keys(person);             // ["name", "age", "greet"]
Object.values(person);           // ["Alice", 30, function]
Object.entries(person);          // [["name", "Alice"], ...]

// Object destructuring
const { name, age } = person;

// Object spread
const updatedPerson = { ...person, city: "New York" };

// Object.assign
const merged = Object.assign({}, person, { job: "Developer" });
```

### Array Operations
```javascript
// Array creation and manipulation
const fruits = ["apple", "banana", "orange"];

// Adding elements
fruits.push("grape");            // Add to end
fruits.unshift("mango");         // Add to beginning
fruits.splice(2, 0, "kiwi");     // Insert at index

// Removing elements
fruits.pop();                    // Remove from end
fruits.shift();                  // Remove from beginning
fruits.splice(1, 1);            // Remove at index

// Array methods
const numbers = [1, 2, 3, 4, 5];

// Iteration
numbers.forEach(num => console.log(num));
const doubled = numbers.map(num => num * 2);
const evens = numbers.filter(num => num % 2 === 0);
const sum = numbers.reduce((total, num) => total + num, 0);

// Searching
const found = numbers.find(num => num > 3);
const index = numbers.findIndex(num => num === 3);
const includes = numbers.includes(4);

// Sorting
const sorted = fruits.sort();
const sortedNumbers = numbers.sort((a, b) => a - b);
```

### String Operations
```javascript
// String methods
const text = "Hello, JavaScript World!";

// Basic operations
text.length;                     // 23
text.toUpperCase();             // "HELLO, JAVASCRIPT WORLD!"
text.toLowerCase();             // "hello, javascript world!"
text.charAt(7);                 // "J"
text.indexOf("Script");         // 10
text.slice(7, 17);              // "JavaScript"
text.substring(7, 17);          // "JavaScript"
text.replace("World", "Universe"); // "Hello, JavaScript Universe!"

// Template literals
const name = "John";
const age = 30;
const message = `Hello, ${name}! You are ${age} years old.`;

// String splitting and joining
const words = text.split(" ");   // ["Hello,", "JavaScript", "World!"]
const joined = words.join("-");  // "Hello,-JavaScript-World!"

// Regular expressions
const emailPattern = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
const isValidEmail = emailPattern.test("user@example.com");
```

## Advanced Usage

### Asynchronous Programming
```javascript
// Promises
function fetchData() {
    return new Promise((resolve, reject) => {
        setTimeout(() => {
            const success = Math.random() > 0.5;
            if (success) {
                resolve("Data fetched successfully");
            } else {
                reject(new Error("Failed to fetch data"));
            }
        }, 1000);
    });
}

// Promise usage
fetchData()
    .then(data => console.log(data))
    .catch(error => console.error(error))
    .finally(() => console.log("Request completed"));

// Async/Await
async function getData() {
    try {
        const data = await fetchData();
        console.log(data);
        return data;
    } catch (error) {
        console.error("Error:", error.message);
        throw error;
    }
}

// Promise.all and Promise.race
const promises = [fetchData(), fetchData(), fetchData()];
Promise.all(promises).then(results => console.log(results));
Promise.race(promises).then(result => console.log("First:", result));
```

### ES6+ Features
```javascript
// Classes
class Person {
    constructor(name, age) {
        this.name = name;
        this.age = age;
    }
    
    greet() {
        return `Hello, I'm ${this.name}`;
    }
    
    static species() {
        return "Homo sapiens";
    }
}

class Student extends Person {
    constructor(name, age, grade) {
        super(name, age);
        this.grade = grade;
    }
    
    study() {
        return `${this.name} is studying`;
    }
}

// Modules (ES6)
// math.js
export const PI = 3.14159;
export function add(a, b) { return a + b; }
export default function multiply(a, b) { return a * b; }

// main.js
import multiply, { PI, add } from './math.js';
import * as math from './math.js';

// Destructuring
const [first, second, ...rest] = [1, 2, 3, 4, 5];
const { name, age, ...otherProps } = person;

// Spread operator
const arr1 = [1, 2, 3];
const arr2 = [4, 5, 6];
const combined = [...arr1, ...arr2];

const obj1 = { a: 1, b: 2 };
const obj2 = { c: 3, d: 4 };
const merged = { ...obj1, ...obj2 };
```

### Error Handling
```javascript
// Try-catch blocks
try {
    const result = riskyOperation();
    console.log(result);
} catch (error) {
    console.error("Error occurred:", error.message);
    console.error("Stack trace:", error.stack);
} finally {
    console.log("Cleanup operations");
}

// Custom errors
class ValidationError extends Error {
    constructor(message, field) {
        super(message);
        this.name = "ValidationError";
        this.field = field;
    }
}

function validateEmail(email) {
    if (!email.includes("@")) {
        throw new ValidationError("Invalid email format", "email");
    }
}

// Error handling in async functions
async function handleAsyncError() {
    try {
        await someAsyncOperation();
    } catch (error) {
        if (error instanceof ValidationError) {
            console.log(`Validation error in ${error.field}: ${error.message}`);
        } else {
            console.log("Unexpected error:", error);
        }
    }
}
```

### DOM Manipulation (Browser Environment)
```javascript
// Element selection
const element = document.getElementById("myId");
const elements = document.querySelectorAll(".myClass");
const firstMatch = document.querySelector("div.container");

// Element creation and modification
const newDiv = document.createElement("div");
newDiv.textContent = "Hello World";
newDiv.classList.add("highlight");
newDiv.setAttribute("data-id", "123");

// Event handling
element.addEventListener("click", function(event) {
    event.preventDefault();
    console.log("Element clicked");
});

// Arrow function event handler
element.addEventListener("click", (e) => {
    e.target.style.backgroundColor = "blue";
});

// Form handling
const form = document.getElementById("myForm");
form.addEventListener("submit", (e) => {
    e.preventDefault();
    const formData = new FormData(form);
    const data = Object.fromEntries(formData);
    console.log(data);
});
```

### Working with APIs
```javascript
// Fetch API
async function fetchUserData(userId) {
    try {
        const response = await fetch(`/api/users/${userId}`);
        
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const user = await response.json();
        return user;
    } catch (error) {
        console.error("Failed to fetch user:", error);
        throw error;
    }
}

// POST request
async function createUser(userData) {
    const response = await fetch("/api/users", {
        method: "POST",
        headers: {
            "Content-Type": "application/json",
        },
        body: JSON.stringify(userData),
    });
    
    return response.json();
}

// XMLHttpRequest (older approach)
function makeRequest(url, callback) {
    const xhr = new XMLHttpRequest();
    xhr.open("GET", url);
    xhr.onreadystatechange = function() {
        if (xhr.readyState === 4 && xhr.status === 200) {
            callback(JSON.parse(xhr.responseText));
        }
    };
    xhr.send();
}
```

## Performance Optimization

### Code Optimization
```javascript
// Debouncing
function debounce(func, delay) {
    let timeoutId;
    return function(...args) {
        clearTimeout(timeoutId);
        timeoutId = setTimeout(() => func.apply(this, args), delay);
    };
}

const debouncedSearch = debounce(searchFunction, 300);

// Throttling
function throttle(func, limit) {
    let inThrottle;
    return function(...args) {
        if (!inThrottle) {
            func.apply(this, args);
            inThrottle = true;
            setTimeout(() => inThrottle = false, limit);
        }
    };
}

// Memoization
function memoize(func) {
    const cache = new Map();
    return function(...args) {
        const key = JSON.stringify(args);
        if (cache.has(key)) {
            return cache.get(key);
        }
        const result = func(...args);
        cache.set(key, result);
        return result;
    };
}

const memoizedFibonacci = memoize(function fibonacci(n) {
    if (n < 2) return n;
    return fibonacci(n - 1) + fibonacci(n - 2);
});
```

### Memory Management
```javascript
// Avoid memory leaks
function setupEventListener() {
    const element = document.getElementById("myButton");
    const handler = () => console.log("Clicked");
    
    element.addEventListener("click", handler);
    
    // Cleanup
    return () => {
        element.removeEventListener("click", handler);
    };
}

// WeakMap for private data
const privateData = new WeakMap();

class MyClass {
    constructor(value) {
        privateData.set(this, { value });
    }
    
    getValue() {
        return privateData.get(this).value;
    }
}
```

## Tips and Tricks

### Best Practices
```javascript
// Use strict mode
"use strict";

// Meaningful variable names
const userAge = 25;  // Good
const a = 25;        // Bad

// Consistent naming conventions
const userName = "john";      // camelCase for variables
const MAX_RETRIES = 3;        // UPPER_CASE for constants
class UserService {}          // PascalCase for classes

// Early returns
function processUser(user) {
    if (!user) return null;
    if (!user.email) return null;
    
    // Main logic here
    return processedUser;
}

// Use const by default, let when reassignment needed
const PI = 3.14159;           // Never changes
let counter = 0;              // Will be reassigned

// Avoid global variables
(function() {
    // Your code here is isolated
})();

// Or use modules
export function myFunction() {
    // Function implementation
}
```

### Common Pitfalls to Avoid
```javascript
// 1. Avoid == (use === instead)
if (value === "5") {          // Good
    // code
}

// 2. Be careful with this context
const obj = {
    name: "Test",
    greet: function() {
        console.log(this.name);   // Works
    },
    arrowGreet: () => {
        console.log(this.name);   // Doesn't work as expected
    }
};

// 3. Avoid modifying arrays while iterating
const items = [1, 2, 3, 4, 5];
// Bad
for (let i = 0; i < items.length; i++) {
    if (items[i] % 2 === 0) {
        items.splice(i, 1);  // Modifying array while iterating
    }
}

// Good
const filtered = items.filter(item => item % 2 !== 0);

// 4. Handle async operations properly
// Bad
function getData() {
    fetch("/api/data")
        .then(response => response.json())
        .then(data => {
            return data;  // This doesn't work as expected
        });
}

// Good
async function getData() {
    const response = await fetch("/api/data");
    return response.json();
}
```

### Development Tools
```bash
# ESLint configuration
npm install --save-dev eslint
npx eslint --init

# Prettier configuration
npm install --save-dev prettier
echo '{"semi": true, "singleQuote": true}' > .prettierrc

# Jest testing
npm install --save-dev jest
npm test

# Webpack bundling
npm install --save-dev webpack webpack-cli
npx webpack

# Babel transpilation
npm install --save-dev @babel/core @babel/preset-env
```

### Debugging Tips
```javascript
// Console methods
console.log("Basic logging");
console.error("Error message");
console.warn("Warning message");
console.table([{name: "John", age: 30}, {name: "Jane", age: 25}]);
console.time("Operation");
// ... some code ...
console.timeEnd("Operation");

// Debugger statement
function complexFunction() {
    debugger;  // Pauses execution in browser dev tools
    // Complex logic here
}

// Stack trace
console.trace("Current call stack");

// Conditional logging
const DEBUG = true;
if (DEBUG) {
    console.log("Debug information");
}
```
