# GitHub Workflow Examples
# Comprehensive guide to Git and GitHub workflows, from basic to advanced

# ==========================================
# 1. BASIC GIT SETUP AND FIRST REPOSITORY
# ==========================================

"""
INITIAL SETUP - Run these commands once on your system
"""

# Configure Git with your identity
git config --global user.name "Your Name"
git config --global user.email "your.email@example.com"

# Optional: Set default branch name to 'main'
git config --global init.defaultBranch main

# Optional: Set up credential helper (Linux/Mac)
git config --global credential.helper cache

# Verify configuration
git config --list --global

"""
CREATING YOUR FIRST REPOSITORY
"""

# Method 1: Start from scratch locally
mkdir my-project
cd my-project
git init
echo "# My Project" > README.md
git add README.md
git commit -m "Initial commit"

# Create repository on GitHub (via web interface), then:
git remote add origin https://github.com/username/my-project.git
git branch -M main
git push -u origin main

# Method 2: Clone existing repository
git clone https://github.com/username/existing-repo.git
cd existing-repo

# Method 3: Fork and clone
# 1. Fork repository on GitHub web interface
# 2. Clone your fork
git clone https://github.com/yourusername/forked-repo.git
cd forked-repo

# Add original repository as upstream
git remote add upstream https://github.com/originaluser/original-repo.git

"""
BASIC DAILY WORKFLOW
"""

# Check status of your working directory
git status

# See what changes you've made
git diff

# Add files to staging area
git add filename.txt          # Add specific file
git add .                     # Add all files in current directory
git add *.py                  # Add all Python files
git add -A                    # Add all changes (including deletions)

# Commit changes
git commit -m "Add new feature"
git commit -m "Fix bug in user authentication"
git commit -m "Update documentation"

# Push to GitHub
git push                      # Push to current branch
git push origin main          # Push to specific branch

# Pull latest changes
git pull                      # Pull from current branch
git pull origin main          # Pull from specific branch

# ==========================================
# 2. BRANCHING AND MERGING WORKFLOWS
# ==========================================

"""
FEATURE BRANCH WORKFLOW
"""

# Create and switch to new branch
git checkout -b feature/user-profile
# Or using newer syntax:
git switch -c feature/user-profile

# List all branches
git branch                    # Local branches
git branch -r                 # Remote branches
git branch -a                 # All branches

# Switch between branches
git checkout main
git switch main               # Newer syntax

# Work on your feature
echo "User profile code" > user_profile.py
git add user_profile.py
git commit -m "Add user profile functionality"

# Push feature branch to GitHub
git push -u origin feature/user-profile

# Merge feature branch (after review)
git checkout main
git pull origin main          # Get latest changes
git merge feature/user-profile
git push origin main

# Delete feature branch (cleanup)
git branch -d feature/user-profile    # Delete local branch
git push origin --delete feature/user-profile  # Delete remote branch

"""
COLLABORATIVE WORKFLOW WITH PULL REQUESTS
"""

# 1. Fork repository on GitHub
# 2. Clone your fork
git clone https://github.com/yourusername/project.git
cd project

# 3. Add upstream remote
git remote add upstream https://github.com/original/project.git

# 4. Create feature branch
git checkout -b fix/error-handling

# 5. Make your changes
echo "Improved error handling" > error_handler.py
git add error_handler.py
git commit -m "Improve error handling in main module"

# 6. Push to your fork
git push -u origin fix/error-handling

# 7. Create Pull Request on GitHub web interface

# 8. Keep your fork updated
git checkout main
git pull upstream main
git push origin main

"""
GITFLOW WORKFLOW
"""

# Main branches
# - main: Production-ready code
# - develop: Integration branch for features

# Supporting branches
# - feature/*: New features
# - release/*: Prepare releases
# - hotfix/*: Emergency fixes

# Start new feature
git checkout develop
git pull origin develop
git checkout -b feature/payment-integration

# Work on feature
git add .
git commit -m "Add payment gateway integration"
git push -u origin feature/payment-integration

# Finish feature (merge to develop)
git checkout develop
git pull origin develop
git merge --no-ff feature/payment-integration
git push origin develop
git branch -d feature/payment-integration

# Start release
git checkout develop
git pull origin develop
git checkout -b release/v1.2.0

# Prepare release (version bumps, documentation)
echo "Version 1.2.0" > VERSION
git add VERSION
git commit -m "Bump version to 1.2.0"

# Finish release
git checkout main
git merge --no-ff release/v1.2.0
git tag -a v1.2.0 -m "Release version 1.2.0"
git push origin main --tags

git checkout develop
git merge --no-ff release/v1.2.0
git push origin develop

git branch -d release/v1.2.0

# ==========================================
# 3. ADVANCED GIT OPERATIONS
# ==========================================

"""
REBASE AND HISTORY MANAGEMENT
"""

# Interactive rebase to clean up commits
git rebase -i HEAD~3         # Rebase last 3 commits

# Example interactive rebase commands:
# pick abc1234 Add user authentication
# squash def5678 Fix typo in auth
# reword ghi9012 Update user model

# Rebase feature branch onto latest main
git checkout feature/new-ui
git rebase main

# Continue rebase after resolving conflicts
git add .
git rebase --continue

# Abort rebase if things go wrong
git rebase --abort

"""
STASHING CHANGES
"""

# Save current work without committing
git stash

# Stash with description
git stash save "Work in progress on user dashboard"

# List stashes
git stash list

# Apply most recent stash
git stash apply

# Apply specific stash
git stash apply stash@{1}

# Pop stash (apply and remove)
git stash pop

# Drop stash
git stash drop stash@{0}

"""
CHERRY-PICKING COMMITS
"""

# Apply specific commit from another branch
git cherry-pick abc1234

# Cherry-pick range of commits
git cherry-pick abc1234..def5678

# Cherry-pick without committing
git cherry-pick --no-commit abc1234

"""
UNDOING CHANGES
"""

# Undo last commit (keep changes in working directory)
git reset --soft HEAD~1

# Undo last commit (remove changes)
git reset --hard HEAD~1

# Undo specific file
git checkout -- filename.txt

# Revert commit (create new commit that undoes changes)
git revert abc1234

# Reset to specific commit
git reset --hard abc1234

"""
WORKING WITH REMOTES
"""

# List remotes
git remote -v

# Add remote
git remote add upstream https://github.com/original/repo.git

# Change remote URL
git remote set-url origin https://github.com/newuser/repo.git

# Remove remote
git remote remove upstream

# Fetch from all remotes
git fetch --all

# Prune deleted remote branches
git remote prune origin

# ==========================================
# 4. GITHUB ADVANCED FEATURES
# ==========================================

"""
GITHUB CLI (gh) COMMANDS
"""

# Install GitHub CLI first
# Ubuntu: sudo apt install gh
# macOS: brew install gh

# Authenticate
gh auth login

# Create repository
gh repo create my-new-repo --public --description "My awesome project"

# Clone with GitHub CLI
gh repo clone username/repository

# Create pull request
gh pr create --title "Add new feature" --body "Description of changes"

# List pull requests
gh pr list

# Check out pull request locally
gh pr checkout 123

# Review pull request
gh pr review 123 --approve
gh pr review 123 --request-changes --body "Please fix the tests"

# Merge pull request
gh pr merge 123 --squash

# Create issue
gh issue create --title "Bug report" --body "Description of the bug"

# List issues
gh issue list

# View issue
gh issue view 456

"""
GITHUB ACTIONS WORKFLOW
"""

# .github/workflows/ci.yml
name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: [3.8, 3.9, 3.10]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest coverage
    
    - name: Run tests
      run: |
        coverage run -m pytest
        coverage report
        coverage xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
    
  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Deploy to production
      run: |
        echo "Deploying to production..."
        # Add deployment commands here

"""
GITHUB PAGES DEPLOYMENT
"""

# .github/workflows/pages.yml
name: Deploy to GitHub Pages

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '16'
    
    - name: Install dependencies
      run: npm install
    
    - name: Build
      run: npm run build
    
    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./dist

"""
REPOSITORY TEMPLATES AND SETTINGS
"""

# .gitignore for Python projects
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
*.egg-info/
.installed.cfg
*.egg

# Virtual environments
venv/
env/
ENV/

# IDE
.vscode/
.idea/
*.swp
*.swo

# OS
.DS_Store
Thumbs.db

# Environment variables
.env
.env.local

# Issue and PR templates
# .github/ISSUE_TEMPLATE/bug_report.md
---
name: Bug report
about: Create a report to help us improve
title: ''
labels: 'bug'
assignees: ''
---

**Describe the bug**
A clear and concise description of what the bug is.

**To Reproduce**
Steps to reproduce the behavior:
1. Go to '...'
2. Click on '....'
3. See error

**Expected behavior**
A clear and concise description of what you expected to happen.

**Screenshots**
If applicable, add screenshots to help explain your problem.

**Environment:**
 - OS: [e.g. Ubuntu 20.04]
 - Python version: [e.g. 3.9]
 - Project version: [e.g. 1.2.0]

# .github/pull_request_template.md
## Description
Brief description of what this PR does.

## Type of change
- [ ] Bug fix (non-breaking change which fixes an issue)
- [ ] New feature (non-breaking change which adds functionality)
- [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected)
- [ ] Documentation update

## Testing
- [ ] I have added tests that prove my fix is effective or that my feature works
- [ ] New and existing unit tests pass locally with my changes

## Checklist
- [ ] My code follows the style guidelines of this project
- [ ] I have performed a self-review of my own code
- [ ] I have commented my code, particularly in hard-to-understand areas
- [ ] I have made corresponding changes to the documentation

# ==========================================
# 5. COLLABORATION AND CODE REVIEW
# ==========================================

"""
CODE REVIEW BEST PRACTICES
"""

# Before creating a PR
git checkout main
git pull origin main
git checkout feature/my-feature
git rebase main                # Ensure your branch is up to date

# Create meaningful commits
git add .
git commit -m "feat: add user authentication with JWT

- Implement login/logout endpoints
- Add password hashing with bcrypt
- Create JWT token generation and validation
- Add middleware for protected routes
- Include comprehensive error handling

Fixes #123"

# Push and create PR
git push -u origin feature/my-feature

# Reviewing code (GitHub CLI)
gh pr checkout 456            # Check out PR locally
gh pr diff 456               # See the diff
gh pr review 456 --approve   # Approve after review

"""
SEMANTIC COMMIT MESSAGES
"""

# Format: <type>(<scope>): <subject>

# Types:
# feat: New feature
# fix: Bug fix
# docs: Documentation
# style: Formatting, missing semicolons, etc.
# refactor: Code change that neither fixes a bug nor adds a feature
# test: Adding tests
# chore: Updating build tasks, package manager configs, etc.

# Examples:
git commit -m "feat(auth): add two-factor authentication"
git commit -m "fix(api): handle null response in user endpoint"
git commit -m "docs(readme): update installation instructions"
git commit -m "refactor(utils): simplify date formatting function"
git commit -m "test(auth): add unit tests for login flow"
git commit -m "chore(deps): update dependencies to latest versions"

"""
MANAGING RELEASES
"""

# Create release branch
git checkout main
git pull origin main
git checkout -b release/v2.1.0

# Update version files
echo "2.1.0" > VERSION
echo "__version__ = '2.1.0'" > src/__init__.py
git add VERSION src/__init__.py
git commit -m "chore(release): bump version to 2.1.0"

# Create changelog
cat > CHANGELOG.md << EOF
# Changelog

## [2.1.0] - 2025-06-02

### Added
- New user dashboard with analytics
- Export functionality for user data
- Dark mode theme option

### Fixed
- Memory leak in data processing
- Incorrect timezone handling
- Login redirect loop

### Changed
- Improved performance of search functionality
- Updated UI design for better accessibility

### Deprecated
- Old API endpoints (will be removed in v3.0.0)
EOF

git add CHANGELOG.md
git commit -m "docs(changelog): add release notes for v2.1.0"

# Merge to main and create tag
git checkout main
git merge --no-ff release/v2.1.0
git tag -a v2.1.0 -m "Release version 2.1.0"
git push origin main --tags

# Create GitHub release
gh release create v2.1.0 --title "Version 2.1.0" --notes-file CHANGELOG.md

# ==========================================
# 6. TROUBLESHOOTING AND RECOVERY
# ==========================================

"""
COMMON PROBLEMS AND SOLUTIONS
"""

# Merge conflicts
git status                    # See conflicted files
# Edit files to resolve conflicts
git add .
git commit -m "resolve merge conflicts"

# Accidentally committed to wrong branch
git log --oneline -n 5       # Find commit hash
git reset --hard HEAD~1      # Remove commit from current branch
git checkout correct-branch
git cherry-pick abc1234      # Apply commit to correct branch

# Accidentally pushed sensitive data
git filter-branch --force --index-filter \
  'git rm --cached --ignore-unmatch path/to/sensitive/file' \
  --prune-empty --tag-name-filter cat -- --all
git push origin --force --all

# Or using git-filter-repo (recommended)
git filter-repo --path path/to/sensitive/file --invert-paths

# Lost commits (find with reflog)
git reflog                   # Find lost commit
git checkout abc1234         # Check out lost commit
git checkout -b recovery     # Create branch from lost commit

# Corrupted repository
git fsck --full              # Check for corruption
git gc --aggressive          # Garbage collection

"""
BACKUP AND SYNC STRATEGIES
"""

# Multiple remotes for backup
git remote add backup https://github.com/username/project-backup.git
git push backup main

# Automated backups with hooks
# .git/hooks/post-commit
#!/bin/bash
git push backup main

# Sync fork with upstream
git remote add upstream https://github.com/original/repo.git
git fetch upstream
git checkout main
git merge upstream/main
git push origin main

"""
REPOSITORY MAINTENANCE
"""

# Clean up merged branches
git branch --merged main | grep -v "main" | xargs -n 1 git branch -d

# Prune remote branches
git remote prune origin

# Reduce repository size
git gc --aggressive --prune=now

# Analyze repository size
git count-objects -vH

# ==========================================
# 7. AUTOMATION AND PRODUCTIVITY
# ==========================================

"""
GIT ALIASES FOR PRODUCTIVITY
"""

# Add to ~/.gitconfig
[alias]
    # Shortcuts
    st = status
    co = checkout
    br = branch
    ci = commit
    ca = commit -a
    cm = commit -m
    cam = commit -am
    
    # Logging
    lg = log --oneline --graph --decorate --all
    hist = log --pretty=format:'%h %ad | %s%d [%an]' --graph --date=short
    last = log -1 HEAD
    
    # Branching
    new = checkout -b
    del = branch -d
    
    # Syncing
    sync = !git fetch upstream && git checkout main && git merge upstream/main && git push origin main
    
    # Utilities
    unstage = reset HEAD --
    uncommit = reset --soft HEAD~1
    amend = commit --amend --no-edit
    
    # Find files
    find = "!git ls-files | grep -i"
    
    # Show contributors
    contributors = shortlog -sn

"""
SHELL FUNCTIONS FOR GIT WORKFLOW
"""

# Add to ~/.bashrc or ~/.zshrc

# Quick commit and push
function gcp() {
    git add .
    git commit -m "$1"
    git push
}

# Create and checkout branch
function gcb() {
    git checkout -b "$1"
    git push -u origin "$1"
}

# Delete branch locally and remotely
function gdb() {
    git branch -d "$1"
    git push origin --delete "$1"
}

# Pull request creation
function gpr() {
    git push -u origin "$(git branch --show-current)"
    gh pr create --fill
}

# Release workflow
function grel() {
    local version=$1
    git checkout main
    git pull origin main
    git checkout -b "release/v$version"
    echo "$version" > VERSION
    git add VERSION
    git commit -m "chore(release): bump version to $version"
    git checkout main
    git merge --no-ff "release/v$version"
    git tag -a "v$version" -m "Release version $version"
    git push origin main --tags
    git branch -d "release/v$version"
    gh release create "v$version" --generate-notes
}

"""
GITHUB ACTIONS FOR AUTOMATION
"""

# Auto-assign reviewers
# .github/workflows/auto-assign.yml
name: Auto Assign
on:
  pull_request:
    types: [opened, ready_for_review]

jobs:
  assign:
    runs-on: ubuntu-latest
    steps:
      - uses: kentaro-m/auto-assign-action@v1.2.1
        with:
          configuration-path: '.github/auto-assign.yml'

# .github/auto-assign.yml
addReviewers: true
addAssignees: true
reviewers:
  - teamlead
  - senior-dev
assignees:
  - author

# Auto-label PRs
# .github/workflows/labeler.yml
name: Labeler
on:
  pull_request:
    types: [opened, synchronize]

jobs:
  label:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/labeler@v4
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

# .github/labeler.yml
'feature':
  - src/**/*
'documentation':
  - docs/**/*
  - '**/*.md'
'dependencies':
  - requirements.txt
  - package.json

"""
SECURITY AND BEST PRACTICES
"""

# Enable branch protection rules via GitHub CLI
gh api repos/:owner/:repo/branches/main/protection \
  --method PUT \
  --field required_status_checks='{"strict":true,"contexts":["ci"]}' \
  --field enforce_admins=true \
  --field required_pull_request_reviews='{"required_approving_review_count":2}' \
  --field restrictions=null

# Secrets management
# Store sensitive data in GitHub Secrets, not in code
# Access in workflows: ${{ secrets.SECRET_NAME }}

# Security scanning
# .github/workflows/security.yml
name: Security Scan
on:
  push:
    branches: [main]
  pull_request:

jobs:
  security:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'

# Dependency updates with Dependabot
# .github/dependabot.yml
version: 2
updates:
  - package-ecosystem: "pip"
    directory: "/"
    schedule:
      interval: "weekly"
  - package-ecosystem: "github-actions"
    directory: "/"
    schedule:
      interval: "weekly"

"""
USAGE EXAMPLES SUMMARY
"""

# Daily workflow
git pull                      # Start with latest changes
git checkout -b feature/new-feature
# Make changes
git add .
git commit -m "feat: implement new feature"
git push -u origin feature/new-feature
gh pr create --fill          # Create PR
# After review and approval
gh pr merge --squash         # Merge PR

# Team collaboration
git clone https://github.com/team/project.git
git checkout -b fix/bug-123
# Fix bug
git commit -m "fix: resolve user login issue

- Fix null pointer exception in auth service
- Add validation for empty email fields
- Update error messages for better UX

Fixes #123"
git push -u origin fix/bug-123
gh pr create --title "Fix user login bug" --body "Resolves #123"

# Release management
git checkout main
git pull origin main
git checkout -b release/v1.5.0
# Update version, changelog
git commit -m "chore(release): prepare v1.5.0"
git checkout main
git merge --no-ff release/v1.5.0
git tag -a v1.5.0 -m "Release v1.5.0"
git push origin main --tags
gh release create v1.5.0 --generate-notes

# Emergency hotfix
git checkout main
git pull origin main
git checkout -b hotfix/critical-bug
# Fix critical issue
git commit -m "hotfix: fix critical security vulnerability"
git push -u origin hotfix/critical-bug
gh pr create --title "URGENT: Security fix" --body "Critical security patch"
# After immediate review
gh pr merge --squash
git tag -a v1.5.1 -m "Hotfix v1.5.1"
git push origin main --tags

Created: 2025-06-02 (Enhanced with comprehensive GitHub workflows)
