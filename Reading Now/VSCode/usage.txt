# VSCode - Usage Guide

## Getting Started

### Installation
```bash
# Download from official website
# https://code.visualstudio.com/

# Or install via package manager:

# Windows (using Chocolatey)
choco install vscode

# macOS (using Homebrew)
brew install --cask visual-studio-code

# Linux (Ubuntu/Debian)
sudo apt update
sudo apt install software-properties-common apt-transport-https wget
wget -q https://packages.microsoft.com/keys/microsoft.asc -O- | sudo apt-key add -
sudo add-apt-repository "deb [arch=amd64,arm64,armhf] https://packages.microsoft.com/repos/code stable main"
sudo apt install code

# Linux (CentOS/RHEL/Fedora)
sudo rpm --import https://packages.microsoft.com/keys/microsoft.asc
sudo sh -c 'echo -e "[code]\nname=Visual Studio Code\nbaseurl=https://packages.microsoft.com/yumrepos/vscode\nenabled=1\ngpgcheck=1\ngpgkey=https://packages.microsoft.com/keys/microsoft.asc" > /etc/yum.repos.d/vscode.repo'
sudo yum check-update
sudo yum install code
```

### First Launch Setup
1. **Choose Theme**: Select color theme (Dark+, Light+, High Contrast)
2. **Install Extensions**: Get recommended extensions for your languages
3. **Configure Settings**: Set up basic preferences
4. **Open Folder**: Open your first project folder

### Essential Extensions
```bash
# Install essential extensions via command palette (Ctrl+Shift+P)
# Or use CLI:

# Language support
code --install-extension ms-python.python
code --install-extension ms-vscode.cpptools
code --install-extension ms-dotnettools.csharp
code --install-extension golang.go

# Productivity
code --install-extension ms-vscode.vscode-typescript-next
code --install-extension esbenp.prettier-vscode
code --install-extension ms-vscode.vscode-eslint
code --install-extension eamodio.gitlens

# Themes and UI
code --install-extension PKief.material-icon-theme
code --install-extension zhuangtongfa.Material-theme
```

## Basic Operations

### File and Folder Management
```bash
# Keyboard shortcuts (Windows/Linux | macOS)
Ctrl+N | Cmd+N          # New file
Ctrl+O | Cmd+O          # Open file
Ctrl+S | Cmd+S          # Save file
Ctrl+Shift+S | Cmd+Shift+S    # Save as
Ctrl+W | Cmd+W          # Close file
Ctrl+Shift+N | Cmd+Shift+N    # New window
Ctrl+Shift+W | Cmd+Shift+W    # Close window
```

### Navigation
```bash
# File navigation
Ctrl+P | Cmd+P          # Quick open file
Ctrl+Shift+P | Cmd+Shift+P    # Command palette
Ctrl+Shift+E | Cmd+Shift+E    # Explorer panel
Ctrl+` | Cmd+`          # Terminal panel
Ctrl+Shift+F | Cmd+Shift+F    # Search panel
Ctrl+Shift+G | Cmd+Shift+G    # Source control panel

# Code navigation
F12                     # Go to definition
Alt+F12 | Option+F12    # Peek definition
Shift+F12               # Find all references
Ctrl+Shift+O | Cmd+Shift+O    # Go to symbol
Ctrl+G | Cmd+G          # Go to line
```

### Editing Features
```bash
# Selection and editing
Ctrl+A | Cmd+A          # Select all
Ctrl+L | Cmd+L          # Select line
Ctrl+D | Cmd+D          # Select word (multi-cursor)
Alt+Click | Option+Click # Add cursor
Ctrl+Shift+L | Cmd+Shift+L    # Select all occurrences
Ctrl+/ | Cmd+/          # Toggle comment
Ctrl+Shift+A | Cmd+Shift+A    # Toggle block comment

# Code manipulation
Alt+Up/Down | Option+Up/Down    # Move line up/down
Shift+Alt+Up/Down | Shift+Option+Up/Down    # Copy line up/down
Ctrl+Shift+K | Cmd+Shift+K    # Delete line
Ctrl+Enter | Cmd+Enter  # Insert line below
Ctrl+Shift+Enter | Cmd+Shift+Enter    # Insert line above
```

## Common Operations

### Project Setup
```json
// .vscode/settings.json - Workspace settings
{
    "editor.tabSize": 2,
    "editor.insertSpaces": true,
    "files.autoSave": "onFocusChange",
    "editor.formatOnSave": true,
    "editor.codeActionsOnSave": {
        "source.organizeImports": true,
        "source.fixAll.eslint": true
    },
    "python.defaultInterpreterPath": "./venv/bin/python",
    "terminal.integrated.cwd": "${workspaceFolder}"
}
```

```json
// .vscode/launch.json - Debugging configuration
{
    "version": "0.2.0",
    "configurations": [
        {
            "name": "Python: Current File",
            "type": "python",
            "request": "launch",
            "program": "${file}",
            "console": "integratedTerminal"
        },
        {
            "name": "Node.js: Current File",
            "type": "node",
            "request": "launch",
            "program": "${file}",
            "skipFiles": ["<node_internals>/**"]
        }
    ]
}
```

```json
// .vscode/tasks.json - Build tasks
{
    "version": "2.0.0",
    "tasks": [
        {
            "label": "npm: start",
            "type": "npm",
            "script": "start",
            "group": "build",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": false,
                "panel": "shared"
            }
        },
        {
            "label": "python: run",
            "type": "shell",
            "command": "python",
            "args": ["${file}"],
            "group": {
                "kind": "build",
                "isDefault": true
            }
        }
    ]
}
```

### Git Integration
```bash
# Source control operations
Ctrl+Shift+G | Cmd+Shift+G    # Open source control
# In source control panel:
# - View changes
# - Stage files (+)
# - Unstage files (-)
# - Commit changes (âœ“)
# - Push/pull (sync icon)

# Git commands via terminal
git init                # Initialize repository
git add .              # Stage all changes
git commit -m "message" # Commit changes
git push origin main   # Push to remote
git pull origin main   # Pull from remote
```

### Search and Replace
```bash
# Search operations
Ctrl+F | Cmd+F          # Find in file
Ctrl+H | Cmd+H          # Replace in file
Ctrl+Shift+F | Cmd+Shift+F    # Find in files
Ctrl+Shift+H | Cmd+Shift+H    # Replace in files
F3 | Cmd+G              # Find next
Shift+F3 | Cmd+Shift+G  # Find previous
```

## Advanced Usage

### Multi-cursor Editing
```bash
# Create multiple cursors
Alt+Click | Option+Click    # Add cursor at position
Ctrl+Alt+Up/Down | Cmd+Option+Up/Down    # Add cursor above/below
Ctrl+D | Cmd+D             # Select next occurrence
Ctrl+Shift+L | Cmd+Shift+L # Select all occurrences
Ctrl+U | Cmd+U             # Undo last cursor operation
```

### Code Snippets
```json
// Custom snippets in .vscode/snippets/language.json
{
    "Console log": {
        "prefix": "cl",
        "body": [
            "console.log('$1');",
            "$2"
        ],
        "description": "Log output to console"
    },
    "Function": {
        "prefix": "func",
        "body": [
            "function ${1:name}(${2:params}) {",
            "\t$3",
            "}"
        ],
        "description": "Create a function"
    }
}
```

### Integrated Terminal
```bash
# Terminal management
Ctrl+` | Cmd+`          # Toggle terminal
Ctrl+Shift+` | Cmd+Shift+`    # New terminal
Ctrl+Shift+5 | Cmd+Shift+5    # Split terminal
Ctrl+PageUp/PageDown | Cmd+Shift+[ / ]    # Navigate terminals

# Terminal commands
cd project-folder       # Change directory
npm install            # Install dependencies
python app.py          # Run Python script
node server.js         # Run Node.js application
```

### Debugging
```bash
# Debugging shortcuts
F5                     # Start debugging
Shift+F5               # Stop debugging
Ctrl+Shift+F5 | Cmd+Shift+F5    # Restart debugging
F9                     # Toggle breakpoint
F10                    # Step over
F11                    # Step into
Shift+F11              # Step out
Ctrl+F10 | Cmd+F10     # Run to cursor
```

### Extensions Management
```bash
# Via Command Palette (Ctrl+Shift+P | Cmd+Shift+P)
>Extensions: Install Extensions
>Extensions: Show Installed Extensions
>Extensions: Disable Extension
>Extensions: Uninstall Extension

# Via CLI
code --list-extensions
code --install-extension publisher.extension-name
code --uninstall-extension publisher.extension-name
```

### Workspace Management
```bash
# Multi-root workspaces
File > Add Folder to Workspace
File > Save Workspace As...

# Workspace settings priority:
# 1. Workspace settings (.vscode/settings.json)
# 2. User settings (settings.json)
# 3. Default settings
```

## Configuration

### User Settings
```json
// Global settings.json
{
    "editor.fontSize": 14,
    "editor.fontFamily": "Fira Code, Monaco, monospace",
    "editor.fontLigatures": true,
    "editor.minimap.enabled": true,
    "editor.wordWrap": "on",
    "editor.rulers": [80, 120],
    "files.autoSave": "afterDelay",
    "files.autoSaveDelay": 1000,
    "workbench.colorTheme": "Dark+ (default dark)",
    "workbench.iconTheme": "material-icon-theme",
    "terminal.integrated.shell.windows": "C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe",
    "git.autofetch": true,
    "extensions.autoUpdate": true
}
```

### Keybindings
```json
// keybindings.json - Custom key bindings
[
    {
        "key": "ctrl+shift+d",
        "command": "editor.action.duplicateSelection"
    },
    {
        "key": "ctrl+k ctrl+d",
        "command": "editor.action.formatDocument"
    },
    {
        "key": "ctrl+alt+n",
        "command": "explorer.newFile"
    }
]
```

## Tips and Tricks

### Productivity Tips
1. **Command Palette**: Use `Ctrl+Shift+P` to access all commands
2. **Quick Open**: Use `Ctrl+P` to quickly open files
3. **Go to Symbol**: Use `Ctrl+Shift+O` to navigate within files
4. **Multi-cursor**: Select text and press `Ctrl+D` to select next occurrence
5. **Zen Mode**: Press `Ctrl+K Z` for distraction-free editing

### Code Quality
- **Format on Save**: Enable automatic code formatting
- **Linting**: Install language-specific linters (ESLint, Pylint, etc.)
- **Type Checking**: Use TypeScript or Python type hints
- **Code Analysis**: Install extensions for code quality analysis

### Performance Optimization
- **Disable Unused Extensions**: Improve startup time
- **Large Files**: Use "Large File Optimizations" setting
- **Search Exclusions**: Exclude `node_modules`, `.git` from search
- **Auto Save**: Configure appropriate auto-save settings

### Customization
- **Themes**: Install custom color themes
- **Icons**: Use icon themes for better file recognition
- **Fonts**: Use programming fonts with ligatures (Fira Code, JetBrains Mono)
- **Layout**: Customize panel and sidebar positions

### Collaboration
- **Live Share**: Real-time collaborative editing
- **Git Integration**: Built-in version control features
- **Comments**: Use TODO comments for task tracking
- **Documentation**: Generate and maintain code documentation
- Best practices for daily use
- Troubleshooting common issues

## Advanced Usage
- Advanced features and capabilities
- Integration with other tools
- Automation and scripting
- Performance optimization

## Tips and Tricks
- Productivity enhancements
- Common pitfalls to avoid
- Community recommendations
- Workflow optimization

Created: 2025-06-02 19:39:56
