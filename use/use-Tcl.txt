# COMPREHENSIVE TCL GUIDE
=============================

## WHAT IS TCL?
------------------------

**Tcl (Tool Command Language)** is a dynamic scripting language with simple syntax designed to be easily embedded into applications. Created by John Ousterhout in 1988, Tcl is widely used for rapid prototyping, scripted applications, GUIs, and testing. Its companion toolkit, **Tk**, provides cross-platform GUI capabilities.

## TCL BASICS
------------------------

### Hello World
```tcl
puts "Hello, World!"
```

### Variables
```tcl
# No declaration needed, just use set
set name "John"
set age 30

# Variable substitution with $
puts "Name: $name, Age: $age"

# Alternative variable substitution
puts "Name: ${name}, Age: ${age}"

# Command substitution with [ ]
set sum [expr 5 + 10]
puts "Sum: $sum"
```

### Data Types
Tcl has a simple type system - everything is a string, but values are converted as needed:

```tcl
# Numbers
set integer 42
set double 3.14159

# Strings
set greeting "Hello, Tcl!"
set with_quotes {This is a "quoted" string}

# Lists
set fruits {apple orange banana}
set mixed_list {1 "two" 3.0}

# Arrays (associative)
array set person {
    name "John"
    age 30
    city "New York"
}
puts $person(name)
```

### Control Structures

#### Conditional Statements
```tcl
# If-else statement
set x 10
if {$x > 5} {
    puts "x is greater than 5"
} elseif {$x == 5} {
    puts "x equals 5"
} else {
    puts "x is less than 5"
}

# Switch statement
set fruit "apple"
switch $fruit {
    "apple" {
        puts "Selected apple"
    }
    "orange" {
        puts "Selected orange"
    }
    default {
        puts "Unknown fruit"
    }
}
```

#### Loops
```tcl
# For loop
for {set i 0} {$i < 5} {incr i} {
    puts "i = $i"
}

# While loop
set counter 0
while {$counter < 5} {
    puts "counter = $counter"
    incr counter
}

# Foreach loop
set colors {red green blue}
foreach color $colors {
    puts "Color: $color"
}

# Break and continue
for {set i 0} {$i < 10} {incr i} {
    if {$i == 3} {
        continue
    }
    if {$i == 7} {
        break
    }
    puts "Loop value: $i"
}
```

### Procedures
```tcl
# Basic procedure
proc greet {} {
    puts "Hello from a procedure!"
}
greet

# Procedure with parameters
proc greet_person {name} {
    puts "Hello, $name!"
}
greet_person "Alice"

# Procedure with multiple parameters
proc add {a b} {
    return [expr {$a + $b}]
}
set result [add 5 3]
puts "5 + 3 = $result"

# Default parameter values
proc greet_with_default {name {greeting "Hello"}} {
    puts "$greeting, $name!"
}
greet_with_default "Bob"
greet_with_default "Charlie" "Hi"

# Variable number of arguments
proc sum {args} {
    set total 0
    foreach num $args {
        set total [expr {$total + $num}]
    }
    return $total
}
puts "Sum: [sum 1 2 3 4 5]"
```

## ADVANCED TCL CONCEPTS
------------------------

### String Manipulation
```tcl
set str "Hello, Tcl World!"

# String length
puts "Length: [string length $str]"

# Substring
puts "Substring: [string range $str 0 4]"

# Finding a substring
puts "Position of 'Tcl': [string first "Tcl" $str]"

# Case conversion
puts "Uppercase: [string toupper $str]"
puts "Lowercase: [string tolower $str]"

# Trimming
puts "Trimmed: [string trim " spaces around "]"

# Replacement
puts "Replaced: [string map {"Tcl" "awesome Tcl"} $str]"

# Regular expression match
if {[regexp {Tcl} $str]} {
    puts "Match found"
}

# Regular expression substitution
puts "Regex replace: [regsub {Tcl} $str "Tool Command Language"]"
```

### List Operations
```tcl
set fruits {apple orange banana mango}

# List length
puts "List length: [llength $fruits]"

# Accessing elements (0-based indexing)
puts "First fruit: [lindex $fruits 0]"
puts "Last fruit: [lindex $fruits end]"

# List slice
puts "Middle fruits: [lrange $fruits 1 2]"

# Adding to a list
set fruits [lappend fruits "grape"]
puts "Updated list: $fruits"

# Inserting into a list
set fruits [linsert $fruits 2 "pear"]
puts "After insert: $fruits"

# Replacing an element
set fruits [lreplace $fruits 1 1 "strawberry"]
puts "After replace: $fruits"

# Joining lists
set more_fruits {kiwi pineapple}
set all_fruits [concat $fruits $more_fruits]
puts "All fruits: $all_fruits"

# Sorting
puts "Sorted: [lsort $all_fruits]"
puts "Sorted by length: [lsort -command {apply {{a b} {
    expr {[string length $a] - [string length $b]}
}}} $all_fruits]"
```

### Array Operations
```tcl
# Creating an array
array set employee {
    name "John Doe"
    position "Developer"
    salary 75000
    department "Engineering"
}

# Accessing array elements
puts "Name: $employee(name)"
puts "Position: $employee(position)"

# Checking if key exists
if {[info exists employee(salary)]} {
    puts "Salary: $employee(salary)"
}

# Getting all keys
puts "Keys: [array names employee]"

# Iterating over array
foreach key [array names employee] {
    puts "$key: $employee($key)"
}

# Getting array size
puts "Number of entries: [array size employee]"

# Deleting an element
unset employee(salary)
puts "After deletion: [array names employee]"

# Creating nested arrays (simulated)
array set company {}
set company(headquarters) "New York"
array set company(departments) {}
set company(departments,engineering) 50
set company(departments,marketing) 30

puts "HQ: $company(headquarters)"
puts "Engineering staff: $company(departments,engineering)"
```

### File I/O
```tcl
# Writing to a file
set filename "example.txt"
set filehandle [open $filename "w"]
puts $filehandle "Line 1: This is a test file"
puts $filehandle "Line 2: Created with Tcl"
close $filehandle

# Reading from a file
set filehandle [open $filename "r"]
while {[gets $filehandle line] >= 0} {
    puts "Read: $line"
}
close $filehandle

# Reading entire file
set filehandle [open $filename "r"]
set content [read $filehandle]
close $filehandle
puts "File content:\n$content"

# File operations
puts "Does file exist? [file exists $filename]"
puts "File size: [file size $filename]"
puts "File type: [file type $filename]"
puts "Modification time: [clock format [file mtime $filename]]"

# Directory operations
puts "Current directory: [pwd]"
puts "Files in directory: [glob *]"

# Create directory
file mkdir "temp_dir"

# Check if it's a directory
puts "Is temp_dir a directory? [file isdirectory temp_dir]"

# Remove directory
file delete "temp_dir"
```

## TCL/TK GUI PROGRAMMING
------------------------

Tk is a graphical user interface toolkit that provides widgets for building GUI applications.

### Basic Window
```tcl
package require Tk

# Create main window with title
wm title . "Simple Tk Example"

# Create a label widget
label .label -text "Hello, Tk!" -font "Helvetica 16 bold"
pack .label -padx 20 -pady 20

# Start the event loop
mainloop
```

### Common Widgets

```tcl
package require Tk

# Create and configure window
wm title . "Tk Widgets Demo"
wm geometry . "400x400"

# Label
label .lblTitle -text "Tk Widgets Demo" -font "Helvetica 14 bold"
pack .lblTitle -pady 10

# Frame for organization
frame .frm -borderwidth 2 -relief groove
pack .frm -padx 10 -pady 10 -fill both

# Button widget
button .frm.btn -text "Click Me" -command {
    tk_messageBox -message "Button clicked!"
}
pack .frm.btn -pady 5

# Entry (text input)
label .frm.lblEntry -text "Enter text:"
entry .frm.entry -width 30
pack .frm.lblEntry .frm.entry -pady 5

# Checkbutton
checkbutton .frm.check -text "Enable feature" -variable featureEnabled
pack .frm.check -anchor w -pady 5

# Radio buttons
label .frm.lblRadio -text "Select option:"
pack .frm.lblRadio -anchor w

set choice 1
radiobutton .frm.radio1 -text "Option 1" -variable choice -value 1
radiobutton .frm.radio2 -text "Option 2" -variable choice -value 2
radiobutton .frm.radio3 -text "Option 3" -variable choice -value 3
pack .frm.radio1 .frm.radio2 .frm.radio3 -anchor w -padx 20

# Listbox
label .frm.lblList -text "Select item(s):"
pack .frm.lblList -anchor w
listbox .frm.list -height 4 -selectmode multiple
.frm.list insert 0 "Item 1" "Item 2" "Item 3" "Item 4" "Item 5"
pack .frm.list -pady 5 -fill x

# Show selected button
button .frm.btnShow -text "Show Selection" -command {
    set items [.frm.list curselection]
    set selected ""
    foreach item $items {
        append selected "[.frm.list get $item] "
    }
    tk_messageBox -message "Selected: $selected"
}
pack .frm.btnShow -pady 5

mainloop
```

### Canvas Widget
```tcl
package require Tk

wm title . "Tk Canvas Demo"
wm geometry . "500x400"

# Create canvas
canvas .c -width 400 -height 300 -background white
pack .c -padx 10 -pady 10

# Draw rectangle
.c create rectangle 50 50 150 150 -fill blue -outline black -width 2

# Draw oval
.c create oval 200 50 350 150 -fill red -outline black -width 2

# Draw line
.c create line 50 200 350 200 -fill black -width 3 -arrow last

# Draw text
.c create text 200 250 -text "Canvas Text" -font "Helvetica 16"

# Create movable object
set img [.c create oval 75 75 100 100 -fill green]

# Bind mouse events to move the green circle
.c bind $img <ButtonPress-1> {
    set lastX %x
    set lastY %y
}

.c bind $img <B1-Motion> {
    .c move $img [expr {%x - $lastX}] [expr {%y - $lastY}]
    set lastX %x
    set lastY %y
}

mainloop
```

## NAMESPACES AND PACKAGES
------------------------

### Namespaces
```tcl
# Creating a namespace
namespace eval MyProject {
    # Namespace variables
    variable version "1.0"
    variable author "John Doe"
    
    # Namespace procedure
    proc about {} {
        variable version
        variable author
        puts "MyProject version $version by $author"
    }
    
    # Procedure that can be exported
    proc calculate {a b} {
        return [expr {$a * $b + 5}]
    }
}

# Accessing namespace elements
puts "Version: $MyProject::version"
MyProject::about

# Importing specific procedure
namespace import MyProject::calculate
puts "Result: [calculate 6 7]"

# Importing all procedures (if exported)
namespace export calculate
namespace import MyProject::*
```

### Packages
```tcl
# Example package definition (in file mylib.tcl)
package provide mylib 1.0

namespace eval ::mylib {
    # Public procedures
    namespace export sum difference
    
    # Private procedures
    proc _validate {arg} {
        if {![string is double $arg]} {
            error "Invalid argument: $arg must be a number"
        }
        return $arg
    }
    
    # Public interfaces
    proc sum {args} {
        set total 0
        foreach arg $args {
            set arg [_validate $arg]
            set total [expr {$total + $arg}]
        }
        return $total
    }
    
    proc difference {a b} {
        set a [_validate $a]
        set b [_validate $b]
        return [expr {$a - $b}]
    }
}

# Using the package (in another script)
package require mylib 1.0

# Access the package
set result [::mylib::sum 10 20 30]
puts "Sum: $result"

# Import to current namespace
namespace import ::mylib::*
puts "Difference: [difference 50 30]"
```

## ADVANCED TOPICS
------------------------

### Event-driven Programming
```tcl
package require Tk

# Create a button that initiates a long operation
button .btn -text "Start Process" -command {
    .btn configure -state disabled
    .status configure -text "Processing..."
    
    # Schedule task to run after 100ms
    # (simulating a long operation)
    after 2000 {
        .status configure -text "Completed!"
        .btn configure -state normal
    }
}
pack .btn -pady 10

# Status label
label .status -text "Ready"
pack .status -pady 5

# Create a timer that updates every second
label .time -text "Timer: 0"
pack .time -pady 5

set counter 0
proc updateTimer {} {
    global counter
    incr counter
    .time configure -text "Timer: $counter"
    # Reschedule the timer
    after 1000 updateTimer
}

# Start the timer
updateTimer

mainloop
```

### Regular Expressions
```tcl
# Basic match
set string "The quick brown fox jumps over the lazy dog"
if {[regexp {fox} $string]} {
    puts "Found 'fox' in the string"
}

# Capture groups
regexp {(\w+) fox} $string -> adjective
puts "The adjective is: $adjective"

# Multiple captures
regexp {(\w+) (\w+) fox} $string -> adj1 adj2
puts "Adjectives: $adj1 $adj2"

# Replace with regexp
set result [regsub {lazy} $string "energetic"]
puts "Modified: $result"

# Global replace
set result [regsub -all {\w+} "abc def ghi" "word"]
puts "All words replaced: $result"

# Case insensitive matching
if {[regexp -nocase {FOX} $string]} {
    puts "Found 'fox' (case insensitive)"
}

# Common patterns
set number "42"
set letters "abc"
puts "Is '$number' a number? [regexp {^[0-9]+$} $number]"
puts "Is '$letters' a number? [regexp {^[0-9]+$} $letters]"
puts "Is '$letters' alphabetic? [regexp {^[a-zA-Z]+$} $letters]"
```

### Interprocess Communication
```tcl
# Open a pipe to another process
set pipe [open "|ls -la" r]
while {[gets $pipe line] >= 0} {
    puts "Read: $line"
}
close $pipe

# Execute a command and get the output
set output [exec date]
puts "Current date: $output"

# Handle errors from command execution
if {[catch {exec grep nonexistentpattern somefile.txt} result]} {
    puts "Command failed: $result"
}

# Start a child process and communicate with it
set io [open "|tclsh" r+]
puts $io "puts {Hello from child process}"
flush $io

gets $io line
puts "Child says: $line"
close $io
```

## TCL BEST PRACTICES
------------------------

### Code Organization
1. Use namespaces for larger projects
2. Group related procedures together
3. Document your code with comments
4. Use consistent indentation (typically 4 spaces)
5. Separate UI code from business logic

### Performance Tips
1. Use `expr` with braces: `expr {$a + $b}` instead of `expr $a + $b`
2. Minimize variable substitutions in loops
3. Use binary I/O for large files
4. Use array keys wisely
5. Consider using compiled extensions for CPU-intensive tasks

### Error Handling
```tcl
# Basic error handling
if {[catch {open "nonexistent.txt" r} filehandle]} {
    puts "Error: $filehandle"
} else {
    # Process the file
    close $filehandle
}

# More detailed error info
if {[catch {
    open "nonexistent.txt" r
} result options]} {
    puts "Error: $result"
    puts "Error code: [dict get $options -errorcode]"
    puts "Stack trace: [dict get $options -errorinfo]"
}

# Custom error handling
proc divide {a b} {
    if {$b == 0} {
        error "Division by zero" "ARITH" "DIVZERO"
    }
    return [expr {$a / $b}]
}

if {[catch {divide 10 0} result options]} {
    puts "Error: $result"
    puts "Error code: [dict get $options -errorcode]"
}
```

## TCL RESOURCES AND TOOLS
------------------------

### Useful Tcl Extensions
- **Tk**: GUI toolkit
- **Expect**: Automation of interactive programs
- **TclOO**: Object-oriented programming in Tcl
- **Thread**: Multi-threading support
- **TclUDP/TclTLS**: Network programming
- **SQLite**: Database integration
- **BLT**: Additional widgets and charting

### Online Resources
- **Official Website**: tcl.tk
- **Tcl Wiki**: wiki.tcl-lang.org
- **Tcler's Wiki**: wiki.tcl.tk
- **Documentation**: tcl.tk/doc/
- **Package Repository**: teapot.activestate.com

### Development Tools
- **ActiveTcl**: Comprehensive Tcl distribution
- **KitCreator**: Creates standalone Tcl applications
- **Tclkit**: Standalone runtime
- **TDK**: Tcl Dev Kit for development and deployment
- **Eclipse + Dynamic Languages Toolkit**: IDE support