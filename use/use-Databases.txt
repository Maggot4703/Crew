# COMPREHENSIVE DATABASE GUIDE
=============================

## WHAT ARE DATABASES?
------------------------

A **database** is an organized collection of structured information or data, typically stored electronically in a computer system. Databases are designed to efficiently store, retrieve, manage, and update data.

## DATABASE TYPES
------------------------

### Relational Databases
Relational databases store data in tables with predefined relationships between them. They use SQL (Structured Query Language) for defining and manipulating the data.

**Examples:**
- MySQL/MariaDB
- PostgreSQL
- Microsoft SQL Server
- Oracle Database
- SQLite
- IBM Db2

### NoSQL Databases
NoSQL (Not Only SQL) databases provide mechanisms for storage and retrieval of data that are modeled differently from the tabular relations used in relational databases.

**Types of NoSQL databases:**

1. **Document databases**
   - Store data in document-like structures (JSON, BSON)
   - Examples: MongoDB, Couchbase, Firebase Firestore

2. **Key-value stores**
   - Simple key-value pairs, highly partitionable
   - Examples: Redis, Amazon DynamoDB, Memcached

3. **Wide-column stores**
   - Store data in tables with rows and dynamic columns
   - Examples: Apache Cassandra, Google Bigtable, ScyllaDB

4. **Graph databases**
   - Store data in nodes and edges representing relationships
   - Examples: Neo4j, Amazon Neptune, ArangoDB

### NewSQL Databases
NewSQL databases attempt to provide the scalability of NoSQL systems while maintaining the ACID guarantees of traditional database systems.

**Examples:**
- Google Spanner
- CockroachDB
- VoltDB
- NuoDB

### Time-Series Databases
Databases optimized for time-stamped or time-series data.

**Examples:**
- InfluxDB
- TimescaleDB
- Prometheus
- QuestDB

### In-Memory Databases
Databases that primarily rely on main memory for data storage.

**Examples:**
- Redis
- Memcached
- SAP HANA
- Apache Ignite

## DATABASE CONCEPTS
------------------------

### Data Models

#### Relational Model
- Data organized in tables (relations)
- Tables contain rows (tuples) and columns (attributes)
- Relationships between tables established through keys
- Uses SQL for manipulation

#### Document Model
- Data stored as documents (typically JSON or BSON)
- Schema flexibility (fields can vary between documents)
- Hierarchical structure with nested data

#### Key-Value Model
- Simplest data model
- Data stored as key-value pairs
- Extremely fast for simple operations

#### Graph Model
- Data represented as nodes and edges
- Nodes store information about entities
- Edges represent relationships between entities
- Natural for highly connected data

### Database Schemas
A schema is the structure that defines how data is organized in a database:

- **Conceptual Schema**: High-level view describing entities and relationships
- **Logical Schema**: Implementation-independent definition of the database structure
- **Physical Schema**: How data is physically stored on storage media

### Keys

#### Primary Key
- Uniquely identifies each record in a table
- Cannot contain NULL values
- Should be immutable (not changing over time)
- Examples: customer_id, order_number

#### Foreign Key
- Creates a link between two tables
- References the primary key of another table
- Maintains referential integrity
- Example: customer_id in orders table referencing customer_id in customers table

#### Composite Key
- Primary key consisting of two or more columns combined
- Used when a single column cannot uniquely identify records
- Example: (course_id, student_id) in an enrollments table

#### Candidate Key
- Column or set of columns that could potentially serve as a primary key
- Must contain unique values and not be NULL

#### Surrogate Key
- Artificial key created solely to serve as a primary key
- Usually an auto-incrementing integer or UUID
- No business meaning

### Normalization
Process of organizing database structure to reduce redundancy and improve data integrity:

#### First Normal Form (1NF)
- Each table cell should contain a single value
- Each record needs to be unique

#### Second Normal Form (2NF)
- Meet all requirements of 1NF
- All non-key attributes are fully dependent on the primary key

#### Third Normal Form (3NF)
- Meet all requirements of 2NF
- No transitive dependencies (non-key attributes dependent on other non-key attributes)

#### Boyce-Codd Normal Form (BCNF)
- Stricter version of 3NF
- For any dependency A â†’ B, A must be a superkey

#### Fourth Normal Form (4NF)
- Meet all requirements of BCNF
- No multi-valued dependencies

#### Fifth Normal Form (5NF)
- Meet all requirements of 4NF
- No join dependencies

### ACID Properties
Properties that guarantee reliable processing of database transactions:

- **Atomicity**: Transactions are "all or nothing" - either fully completed or fully rolled back
- **Consistency**: Transactions bring the database from one valid state to another
- **Isolation**: Concurrent transactions do not interfere with each other
- **Durability**: Completed transactions persist, even in case of system failure

### CAP Theorem
States that distributed data systems can provide at most two out of three guarantees:

- **Consistency**: All nodes see the same data at the same time
- **Availability**: Every request receives a response (success/failure)
- **Partition tolerance**: System continues to operate despite network partitions

### BASE Properties
Alternative to ACID, often used in NoSQL systems:

- **Basically Available**: System guarantees availability
- **Soft state**: State may change over time
- **Eventually consistent**: System will become consistent over time

## DATABASE DESIGN
------------------------

### Entity-Relationship Model
Conceptual data model for database design:

#### Entities
- Represent real-world objects or concepts
- Examples: Customer, Product, Order

#### Attributes
- Properties that describe entities
- Examples: name, price, date

#### Relationships
- Connections between entities
- Types:
  - One-to-one (1:1)
  - One-to-many (1:N)
  - Many-to-many (M:N)

#### ER Diagrams
Visual representation of entities, attributes, and relationships:
- Rectangle boxes: Entities
- Ellipses: Attributes
- Diamonds: Relationships
- Lines: Connect entities to relationships

### Data Modeling Techniques

#### Conceptual Modeling
- High-level description of data requirements
- Technology-independent
- Focus on entities and relationships

#### Logical Modeling
- Implementation-independent structure
- Defines tables, columns, relationships
- Normalization is applied

#### Physical Modeling
- Implementation-specific model
- Includes storage considerations
- Indexing strategies, partitioning

### Database Schema Design Patterns

#### Star Schema
Used in data warehousing:
- Central fact table with measurements
- Surrounded by dimension tables with descriptive attributes
- Good for analytical queries

#### Snowflake Schema
Extension of star schema:
- Dimension tables are normalized into multiple tables
- Creates a snowflake shape in the diagram
- Reduces redundancy but increases joins

#### Slowly Changing Dimensions
Techniques for handling changes in dimension tables:
- Type 1: Overwrite the old value
- Type 2: Add a new row with the new value
- Type 3: Add a new column for the new value

## DATABASE ADMINISTRATION
------------------------

### Installation and Setup

#### General steps:
1. Choose the appropriate database system
2. Download and install the software
3. Configure server parameters
4. Create database instances
5. Set up authentication and user accounts
6. Configure networking and security
7. Test the connection

#### Configuration Parameters
Important parameters to consider:
- Memory allocation
- CPU usage
- Connection limits
- Authentication methods
- Transaction logging
- Storage paths

### Backup and Recovery

#### Backup Types
- **Full backup**: Complete copy of the database
- **Incremental backup**: Changes since the last backup
- **Differential backup**: Changes since the last full backup
- **Logical backup**: SQL statements to recreate data
- **Physical backup**: Copies of actual data files

#### Backup Strategies
- Determine backup frequency
- Automate backup processes
- Test restoration procedures
- Store backups in multiple locations
- Monitor backup success/failure

#### Recovery Procedures
- Point-in-time recovery
- Disaster recovery
- Recovery from corruption
- Testing recovery procedures

### Monitoring and Performance Tuning

#### Key Metrics to Monitor
- Query performance
- CPU usage
- Memory usage
- Disk I/O
- Cache hit ratio
- Connection count
- Transaction throughput
- Lock contention

#### Performance Tuning Techniques
- Query optimization
- Indexing strategies
- Database configuration
- Hardware upgrades
- Caching mechanisms
- Partitioning and sharding

### Security

#### Authentication
- Username/password
- Certificate-based
- Multi-factor authentication
- Directory service integration (LDAP, Active Directory)

#### Authorization
- Role-based access control
- Row-level security
- Column-level security
- Dynamic data masking

#### Encryption
- Data at rest encryption
- Data in transit encryption (TLS/SSL)
- Client-side encryption
- Transparent data encryption

#### Auditing
- Login attempts
- Privileged operations
- Schema changes
- Data access patterns
- Security policy violations

## DATABASE CONNECTIVITY
------------------------

### Database Drivers
Software components that applications use to connect to databases:

- **JDBC** (Java Database Connectivity)
- **ODBC** (Open Database Connectivity)
- **ADO.NET** (for .NET applications)
- **PyODBC**, **psycopg2**, etc. (for Python)
- Native database drivers

### Connection Pooling
Technique to maintain a cache of database connections:
- Reduces connection establishment overhead
- Manages maximum number of connections
- Handles connection timeouts
- Improves application performance

### ORM (Object-Relational Mapping)
Software technique that connects object-oriented programming languages to databases:

- **Hibernate** (Java)
- **Entity Framework** (.NET)
- **SQLAlchemy** (Python)
- **Sequelize** (JavaScript/Node.js)
- **ActiveRecord** (Ruby)

Benefits:
- Reduces boilerplate code
- Abstracts database details
- Object-oriented approach to data
- Database independence

### Database APIs

#### REST APIs
- HTTP-based access to database
- Uses JSON/XML for data interchange
- Stateless operations
- Examples: Firebase REST API, MongoDB Atlas Data API

#### GraphQL
- Query language for APIs
- Client specifies exact data requirements
- Reduces over-fetching and under-fetching
- Single endpoint for multiple resources

## DATABASE SCALING
------------------------

### Vertical Scaling
Adding more resources to a single server:
- Increasing CPU
- Adding more memory
- Upgrading storage
- Limitations: hardware constraints, single point of failure

### Horizontal Scaling
Adding more servers to distribute load:

#### Sharding
- Splitting data across multiple database instances
- Each instance holds a subset of data
- Sharding strategies:
  - Range-based sharding
  - Hash-based sharding
  - Directory-based sharding

#### Replication
Maintaining copies of data across multiple nodes:

- **Master-Slave Replication**
  - Single master for writes
  - Multiple slaves for reads
  - Asynchronous or synchronous replication

- **Multi-Master Replication**
  - Multiple nodes accept writes
  - Requires conflict resolution
  - Higher availability

#### Database Clustering
Multiple database servers working together:

- Shared storage clusters
- Shared nothing architecture
- Automatic failover
- Load balancing
- Examples: Oracle RAC, MySQL Cluster, PostgreSQL with Patroni

### Caching Strategies
Storing frequently accessed data in memory:

- **Database query cache**
- **Application-level cache** (Redis, Memcached)
- **Page cache**
- **Object cache**
- Cache invalidation strategies

## POPULAR DATABASE MANAGEMENT SYSTEMS
------------------------

### MySQL/MariaDB
- Open-source relational database
- ACID-compliant with InnoDB engine
- Good performance, reliability
- Wide adoption and community support
- Suitable for web applications, OLTP

### PostgreSQL
- Advanced open-source relational database
- Strong standards compliance
- Robust feature set (JSON, spatial data)
- Extensibility
- Good for complex queries and data integrity

### Microsoft SQL Server
- Commercial relational database
- Integrated with Microsoft ecosystem
- Business intelligence capabilities
- Strong security features
- Enterprise-grade support

### Oracle Database
- Enterprise-class commercial RDBMS
- High reliability and performance
- Advanced features (partitioning, RAC)
- Comprehensive security
- Used in large enterprises

### MongoDB
- Document-oriented NoSQL database
- JSON-like documents with dynamic schemas
- Horizontal scaling with sharding
- Good for unstructured/semi-structured data
- Used in content management, real-time analytics

### Redis
- In-memory key-value store
- Extremely fast operations
- Data structures (strings, hashes, lists, sets)
- Persistence options
- Used for caching, messaging, real-time analytics

### Cassandra
- Wide-column NoSQL database
- Linear scalability and fault-tolerance
- Tunable consistency
- Designed for big data
- Used for time-series data, IoT, large-scale web applications

## DATABASE MIGRATION
------------------------

### Migration Planning
- Assess current database
- Define migration scope
- Choose target database platform
- Create test environment
- Develop migration strategy
- Establish success criteria

### Migration Techniques
- **Big Bang Migration**: Complete switch at once
- **Phased Migration**: Gradual transition
- **Parallel Operation**: Run both systems simultaneously

### ETL (Extract, Transform, Load)
Process for database migration:
- **Extract**: Get data from source
- **Transform**: Convert to target format
- **Load**: Import to target database
- ETL tools: Informatica, Talend, Microsoft SSIS

### Schema Conversion
Tools to help convert database schemas:
- AWS Schema Conversion Tool
- Oracle SQL Developer Migration Workbench
- Database-specific migration assistants

### Data Validation
Ensuring data integrity after migration:
- Record count validation
- Sum checks
- Sample record comparison
- Data profile comparison
- Business logic testing

## EMERGING TRENDS
------------------------

### Cloud Databases
Database services provided by cloud providers:
- **Amazon RDS**, **Aurora**, **DynamoDB**
- **Azure SQL Database**, **Cosmos DB**
- **Google Cloud SQL**, **Firestore**, **Bigtable**
- **Benefits**: Managed service, scalability, reduced maintenance

### Serverless Databases
Pay-per-use database services:
- **Amazon Aurora Serverless**
- **Azure Cosmos DB Serverless**
- **PlanetScale**
- **FaunaDB**
- **Benefits**: Auto-scaling, cost efficiency, reduced operational overhead

### Multi-Model Databases
Single database system supporting multiple data models:
- **ArangoDB**: Documents, graphs, key-value
- **FaunaDB**: Relational, document, graph, temporal
- **Couchbase**: Document, key-value
- **Benefits**: Unified platform, reduced complexity