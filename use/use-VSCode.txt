# COMPREHENSIVE VISUAL STUDIO CODE (VSCODE) GUIDE
=============================

## WHAT IS VSCODE?
------------------------

**Visual Studio Code (VSCode)** is a lightweight but powerful source code editor developed by Microsoft. It's free, open-source, and available for Windows, macOS, and Linux. VSCode supports a wide range of programming languages through extensions and offers features like syntax highlighting, intelligent code completion, snippets, code refactoring, and embedded Git control.

## INSTALLATION & SETUP
------------------------

### Install VSCode on Linux
```bash
# Using snap
sudo snap install --classic code

# Using apt (Debian/Ubuntu)
sudo apt update
sudo apt install software-properties-common apt-transport-https wget
wget -q https://packages.microsoft.com/keys/microsoft.asc -O- | sudo apt-key add -
sudo add-apt-repository "deb [arch=amd64] https://packages.microsoft.com/repos/vscode stable main"
sudo apt update
sudo apt install code
```

### Install VSCode on macOS
- Download the installer from [code.visualstudio.com](https://code.visualstudio.com)
- Open the downloaded file and drag Visual Studio Code to Applications

### Install VSCode on Windows
- Download the installer from [code.visualstudio.com](https://code.visualstudio.com)
- Run the installer and follow the installation wizard

## BASIC USAGE
------------------------

### Opening VSCode
```bash
# Open VSCode
code

# Open VSCode with a specific file
code file.py

# Open VSCode with a specific directory
code /path/to/project

# Open VSCode in the current directory
code .
```

### User Interface
VSCode's interface consists of:
- **Activity Bar**: Left sidebar for accessing different views
- **Side Bar**: Shows file explorer, search, source control, debug, and extensions
- **Editor Group**: Main area where files are edited
- **Status Bar**: Information about the opened file and editor
- **Panel**: Terminal, output, problems, and debug console

### Basic Keyboard Shortcuts
| Action | Windows/Linux | macOS |
|--------|--------------|-------|
| Open Command Palette | Ctrl+Shift+P | Cmd+Shift+P |
| Quick Open | Ctrl+P | Cmd+P |
| Save | Ctrl+S | Cmd+S |
| Save All | Ctrl+K S | Cmd+Alt+S |
| Open Settings | Ctrl+, | Cmd+, |
| Toggle Sidebar | Ctrl+B | Cmd+B |
| Toggle Terminal | Ctrl+` | Cmd+` |
| Toggle Zen Mode | Ctrl+K Z | Cmd+K Z |
| New File | Ctrl+N | Cmd+N |
| Close Editor | Ctrl+W | Cmd+W |

## FILE MANAGEMENT
------------------------

### Working with Files
```
# Create a new file
Ctrl+N (Windows/Linux) or Cmd+N (macOS)

# Save a file
Ctrl+S (Windows/Linux) or Cmd+S (macOS)

# Save As
Ctrl+Shift+S (Windows/Linux) or Cmd+Shift+S (macOS)

# Open a file
Ctrl+O (Windows/Linux) or Cmd+O (macOS)
```

### Working with Multiple Files
- **Split Editor**: Right-click on tab and select "Split Editor"
- **Navigate between editors**: Ctrl+1, Ctrl+2, etc.
- **Close All Files**: Ctrl+K W

### File Explorer
- Toggle File Explorer: Ctrl+Shift+E (Windows/Linux) or Cmd+Shift+E (macOS)
- Create new file: Click the New File icon
- Create new folder: Click the New Folder icon
- Collapse folders: Click on folder or use arrow keys

## EDITING FEATURES
------------------------

### Basic Editing
- **Multi-cursor editing**: Alt+Click (Windows/Linux) or Opt+Click (macOS)
- **Select all occurrences**: Ctrl+Shift+L (Windows/Linux) or Cmd+Shift+L (macOS)
- **Expand selection**: Shift+Alt+Right (Windows/Linux) or Shift+Opt+Right (macOS)
- **Move line up/down**: Alt+Up/Down (Windows/Linux) or Opt+Up/Down (macOS)
- **Copy line up/down**: Shift+Alt+Up/Down (Windows/Linux) or Shift+Opt+Up/Down (macOS)
- **Delete line**: Ctrl+Shift+K (Windows/Linux) or Cmd+Shift+K (macOS)

### Code Navigation
- **Go to Definition**: F12 or Ctrl+Click (Windows/Linux) or Cmd+Click (macOS)
- **Peek Definition**: Alt+F12 (Windows/Linux) or Opt+F12 (macOS)
- **Go to Line**: Ctrl+G (Windows/Linux) or Cmd+G (macOS)
- **Go to Symbol**: Ctrl+Shift+O (Windows/Linux) or Cmd+Shift+O (macOS)
- **Go to File**: Ctrl+P (Windows/Linux) or Cmd+P (macOS)

### Code Folding
- **Fold**: Ctrl+Shift+[ (Windows/Linux) or Cmd+Opt+[ (macOS)
- **Unfold**: Ctrl+Shift+] (Windows/Linux) or Cmd+Opt+] (macOS)
- **Fold All**: Ctrl+K Ctrl+0 (Windows/Linux) or Cmd+K Cmd+0 (macOS)
- **Unfold All**: Ctrl+K Ctrl+J (Windows/Linux) or Cmd+K Cmd+J (macOS)

## INTELLISENSE & CODE COMPLETION
------------------------

IntelliSense provides intelligent code completion, parameter info, quick info, and member lists.

- **Trigger IntelliSense**: Ctrl+Space (Windows/Linux) or Cmd+Space (macOS)
- **Accept suggestion**: Tab or Enter
- **Navigate through suggestions**: Up/Down arrows

Example usage:
```python
import pandas as pd

# Start typing and IntelliSense will show suggestions
df = pd.read_csv("data.csv")
df.head()  # Type 'df.' and see methods suggestion
```

## INTEGRATED TERMINAL
------------------------

VSCode includes an integrated terminal that can be used to run commands directly from the editor.

- **Open Terminal**: Ctrl+` (Windows/Linux) or Cmd+` (macOS)
- **Create New Terminal**: Ctrl+Shift+` (Windows/Linux) or Cmd+Shift+` (macOS)
- **Navigate between terminals**: Using the dropdown in terminal panel
- **Split Terminal**: Click the Split icon in terminal panel

Example terminal commands:
```bash
# Run a Python script
python script.py

# Install a package
pip install pandas

# Check Git status
git status
```

## GIT INTEGRATION
------------------------

VSCode has built-in Git support for basic operations.

- **Open Source Control**: Ctrl+Shift+G (Windows/Linux) or Cmd+Shift+G (macOS)
- **Stage changes**: Click + icon next to changed files
- **Commit changes**: Type commit message and press Ctrl+Enter
- **Push/Pull**: Click on the sync icon in the status bar

Example Git workflow:
1. Make changes to your code
2. Open Source Control panel (Ctrl+Shift+G)
3. Stage changes (click + icon)
4. Enter commit message
5. Click checkmark or press Ctrl+Enter to commit
6. Push changes using the sync button

## EXTENSIONS
------------------------

Extensions add functionality to VSCode. Here are some popular ones:

- **Python**: Python language support, debugging, linting
- **Live Share**: Real-time collaboration
- **GitLens**: Enhanced Git capabilities
- **Prettier**: Code formatter for multiple languages
- **ESLint**: JavaScript linting
- **Remote - SSH**: Edit code on remote machines
- **Docker**: Docker container management
- **Jupyter**: Interactive Python notebooks

To install extensions:
1. Click the Extensions icon in the Activity Bar (or Ctrl+Shift+X)
2. Search for the extension
3. Click Install

Example extension configuration (settings.json):
```json
{
  "python.linting.enabled": true,
  "python.linting.pylintEnabled": true,
  "editor.formatOnSave": true,
  "editor.defaultFormatter": "esbenp.prettier-vscode"
}
```

## DEBUGGING
------------------------

VSCode has a powerful debugging system for various languages.

- **Start/Continue debugging**: F5
- **Stop debugging**: Shift+F5
- **Toggle breakpoint**: F9
- **Step over**: F10
- **Step into**: F11
- **Step out**: Shift+F11

Example launch.json for Python debugging:
```json
{
  "version": "0.2.0",
  "configurations": [
    {
      "name": "Python: Current File",
      "type": "python",
      "request": "launch",
      "program": "${file}",
      "console": "integratedTerminal",
      "justMyCode": true
    }
  ]
}
```

## SETTINGS & CUSTOMIZATION
------------------------

### User Settings
- Open Settings: Ctrl+, (Windows/Linux) or Cmd+, (macOS)
- Settings are stored in JSON format
- Settings can be set at User level (global) or Workspace level (project-specific)

Example settings.json modifications:
```json
{
  "editor.fontSize": 14,
  "editor.fontFamily": "Fira Code, Consolas, 'Courier New', monospace",
  "editor.tabSize": 2,
  "editor.wordWrap": "on",
  "editor.minimap.enabled": false,
  "workbench.colorTheme": "One Dark Pro",
  "terminal.integrated.fontSize": 14
}
```

### Keyboard Shortcuts
- Open Keyboard Shortcuts: Ctrl+K Ctrl+S (Windows/Linux) or Cmd+K Cmd+S (macOS)
- You can customize existing shortcuts or add new ones

Example keybindings.json:
```json
[
  {
    "key": "ctrl+shift+/",
    "command": "editor.action.blockComment",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "ctrl+r",
    "command": "workbench.action.reloadWindow",
    "when": "editorTextFocus"
  }
]
```

## WORKSPACE FEATURES
------------------------

### Tasks
VSCode can run tasks like building, linting, or packaging your application.

Example tasks.json:
```json
{
  "version": "2.0.0",
  "tasks": [
    {
      "label": "Run Python Script",
      "type": "shell",
      "command": "python ${file}",
      "group": {
        "kind": "build",
        "isDefault": true
      },
      "presentation": {
        "reveal": "always",
        "panel": "new"
      },
      "problemMatcher": []
    }
  ]
}
```

### Multi-root Workspaces
- A workspace can include multiple project folders
- Useful for microservices or related projects
- Create with: File > Add Folder to Workspace

## PRODUCTIVITY TIPS
------------------------

1. **Command Palette**: Use Ctrl+Shift+P to access all commands
2. **Snippets**: Create custom code snippets for frequently used code blocks
3. **Zen Mode**: Use Ctrl+K Z for distraction-free coding
4. **Split Editing**: Edit multiple files side by side
5. **Integrated Terminal**: Use the built-in terminal for quick commands
6. **Search Across Files**: Use Ctrl+Shift+F to find text across the entire project
7. **Emmet**: Built-in for fast HTML/CSS coding
8. **Markdown Preview**: Edit and preview markdown files side-by-side

Example custom snippet (userSnippets.json):
```json
{
  "Python Class": {
    "prefix": "pyclass",
    "body": [
      "class ${1:ClassName}:",
      "\tdef __init__(self, ${2:params}):",
      "\t\t${3:# initialize attributes}",
      "\t\tself.$4 = $2",
      "",
      "\tdef ${5:method_name}(self, ${6:params}):",
      "\t\t${7:pass}"
    ],
    "description": "Create a Python class"
  }
}
```

## REMOTE DEVELOPMENT
------------------------

VSCode supports remote development in:
- WSL (Windows Subsystem for Linux)
- SSH Remote Servers
- Docker Containers

To use Remote Development:
1. Install the "Remote Development" extension pack
2. Click the Remote indicator in the bottom-left corner
3. Select the appropriate remote option

Example SSH configuration:
```json
{
  "host": "remote-server",
  "user": "username",
  "port": 22,
  "localForward": [3000, 3000],
  "remoteCommand": "code-server"
}
```

## TROUBLESHOOTING
------------------------

- **VSCode not responding**: Try disabling extensions one by one
- **Extensions not working**: Check output and developer tools (Help > Toggle Developer Tools)
- **Language server issues**: Check output panel for specific language server
- **Git integration problems**: Verify Git is installed and accessible from command line
- **Slow performance**: Check CPU usage of extensions, disable unnecessary ones

Common solutions:
```bash
# Reset user settings
rm -rf ~/.config/Code/User/settings.json

# Clear VSCode cache
rm -rf ~/.config/Code/Cache/*

# Reinstall problematic extensions
code --uninstall-extension publisher.extension-name
code --install-extension publisher.extension-name
```

## KEYBOARD SHORTCUT CHEATSHEET
------------------------

### General
- **Ctrl+Shift+P**: Command Palette
- **Ctrl+P**: Quick Open file
- **Ctrl+Shift+N**: New window
- **Ctrl+W**: Close file
- **Ctrl+Tab**: Navigate editor history

### Editing
- **Ctrl+X/C/V**: Cut/Copy/Paste
- **Ctrl+Z/Y**: Undo/Redo
- **Alt+Up/Down**: Move line up/down
- **Shift+Alt+Up/Down**: Copy line up/down
- **Ctrl+/**: Toggle line comment
- **Shift+Alt+A**: Toggle block comment
- **Ctrl+F**: Find
- **Ctrl+H**: Replace
- **Alt+Click**: Add cursor
- **Ctrl+U**: Undo last cursor operation

### Navigation
- **Ctrl+G**: Go to line
- **Ctrl+Shift+O**: Go to symbol
- **F12**: Go to definition
- **Alt+F12**: Peek definition
- **Ctrl+T**: Show all symbols
- **Ctrl+Shift+\\**: Jump to matching bracket

### Display
- **Ctrl+B**: Toggle sidebar
- **Ctrl+J**: Toggle panel
- **Ctrl+=/-**: Zoom in/out
- **Ctrl+\\**: Split editor
- **Ctrl+K Z**: Toggle Zen mode

## RESOURCES
------------------------
- [VSCode Official Documentation](https://code.visualstudio.com/docs)
- [VSCode GitHub Repository](https://github.com/microsoft/vscode)
- [VSCode Marketplace](https://marketplace.visualstudio.com/vscode)
- [VSCode Tips and Tricks](https://code.visualstudio.com/docs/getstarted/tips-and-tricks)
- [Visual Studio Code YouTube Channel](https://www.youtube.com/channel/UCs5Y5_7XK8HLDX0SLNwkd3w)

This guide should help you use Visual Studio Code effectively from basic to advanced usage!