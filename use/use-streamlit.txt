# COMPREHENSIVE STREAMLIT GUIDE
=============================

## INSTALLATION AND SETUP
------------------------

### Basic Installation
```bash
# Install Streamlit
pip install streamlit

# Verify installation
streamlit --version

# Launch the demo
streamlit hello
```

### Project Setup
```bash
# Create a new directory for your project
mkdir my_streamlit_app
cd my_streamlit_app

# Create a virtual environment (recommended)
python -m venv venv
source venv/bin/activate  # On Windows: venv\Scripts\activate

# Install Streamlit in the virtual environment
pip install streamlit

# Create your first app
touch app.py  # On Windows: type nul > app.py
```

## BASIC CONCEPTS
---------------

### App Structure
```python
import streamlit as st

st.set_page_config(
    page_title="My Streamlit App",
    page_icon="ðŸ§Š",
    layout="wide",
    initial_sidebar_state="expanded"
)

st.title("My First Streamlit App")
st.write("Welcome to this simple Streamlit application!")

st.header("Main Content")
st.subheader("Data visualization will go here")

with st.sidebar:
    st.header("Sidebar")
    st.write("Controls and filters go here")
```

### Running Your App
```bash
streamlit run app.py
streamlit run app.py --server.port 8501
streamlit run app.py --logger.level=debug
```

## TEXT AND MEDIA ELEMENTS
-----------------------

### Text Elements
```python
st.title("This is a title")
st.header("This is a header")
st.subheader("This is a subheader")
st.text("This is plain text")
st.markdown("**Bold** and *italic* text with Markdown")
st.latex(r"e^{i\pi} + 1 = 0")
st.code("def hello():\n    print('Hello, World!')", language="python")
st.success("This is a success message")
st.info("This is an informational message")
st.warning("This is a warning message")
st.error("This is an error message")
```

### Media Elements
```python
st.image("image.jpg", caption="Image caption", width=300)
st.video("video.mp4")
st.audio("audio.wav")
```

## DATA DISPLAY AND VISUALIZATION
-----------------------------

### Data Display
```python
import pandas as pd
import numpy as np

df = pd.DataFrame({
    'Name': ['John', 'Jane', 'Bob', 'Alice'],
    'Age': [25, 30, 22, 28],
    'City': ['New York', 'London', 'Paris', 'Tokyo']
})

st.dataframe(df)
st.table(df)
st.json({'foo': 'bar'})
st.metric("Temperature", "70 Â°F", "1.2 Â°F")
```

### Charts and Visualizations
```python
chart_data = pd.DataFrame(np.random.randn(20, 3), columns=['Line 1', 'Line 2', 'Line 3'])
st.line_chart(chart_data)
st.bar_chart(chart_data)
st.area_chart(chart_data)

import matplotlib.pyplot as plt
fig, ax = plt.subplots()
ax.scatter([1, 2, 3], [1, 2, 3])
st.pyplot(fig)

import plotly.express as px
fig = px.scatter(df, x="Age", y="Name", color="City")
st.plotly_chart(fig)

import altair as alt
chart = alt.Chart(df).mark_bar().encode(
    x='Name',
    y='Age',
    color='City'
)
st.altair_chart(chart, use_container_width=True)

map_data = pd.DataFrame(
    np.random.randn(1000, 2) / [50, 50] + [37.76, -122.4],
    columns=['lat', 'lon']
)
st.map(map_data)
```

## USER INPUT WIDGETS
------------------

### Basic Input Widgets
```python
name = st.text_input("Enter your name", "John Doe")
description = st.text_area("Description", "Enter details here...")
number = st.number_input("Enter a number", min_value=0, max_value=100, value=50)
date = st.date_input("Select a date")
time = st.time_input("Select a time")

option = st.selectbox("Choose an option", ["Option 1", "Option 2", "Option 3"])
options = st.multiselect("Select multiple options", ["Option 1", "Option 2", "Option 3"])
radio = st.radio("Select one", ["Option A", "Option B", "Option C"])

checkbox = st.checkbox("I agree to the terms")
switch = st.toggle("Enable feature")

uploaded_file = st.file_uploader("Choose a file", type=['csv', 'xlsx'])
if uploaded_file is not None:
    df = pd.read_csv(uploaded_file)
    st.dataframe(df)
```

### Advanced Input Widgets
```python
value = st.slider("Select a value", 0, 100, 50)
range_values = st.slider("Select a range", 0, 100, (25, 75))

from datetime import datetime
time_range = st.slider(
    "Select a time range",
    value=(datetime(2020, 1, 1), datetime(2020, 1, 7))
)

color = st.color_picker("Pick a color", "#00f900")
camera_photo = st.camera_input("Take a photo")

import time
progress_bar = st.progress(0)
for i in range(100):
    progress_bar.progress(i + 1)
    time.sleep(0.01)

with st.spinner("Processing..."):
    time.sleep(2)
st.success("Done!")
```

## LAYOUT AND CONTAINERS
---------------------

### Basic Layout
```python
col1, col2 = st.columns(2)
with col1:
    st.header("Column 1")
    st.write("This is content in column 1")
with col2:
    st.header("Column 2")
    st.write("This is content in column 2")

col1, col2, col3 = st.columns([1, 2, 1])

tab1, tab2, tab3 = st.tabs(["Tab 1", "Tab 2", "Tab 3"])
with tab1:
    st.write("Content for tab 1")
with tab2:
    st.write("Content for tab 2")
with tab3:
    st.write("Content for tab 3")
```

### Containers
```python
with st.container():
    st.write("This is inside a container")
    
with st.expander("Click to expand"):
    st.write("This content is hidden until expanded")
    
with st.sidebar:
    st.title("Sidebar title")
    st.write("Sidebar content goes here")
    filter_option = st.selectbox("Filter by", ["Option 1", "Option 2"])
```

## STATE MANAGEMENT
----------------

### Session State
```python
if 'counter' not in st.session_state:
    st.session_state.counter = 0

def increment_counter():
    st.session_state.counter += 1

st.write(f"Counter value: {st.session_state.counter}")
st.button("Increment", on_click=increment_counter)

if st.button("Reset"):
    st.session_state.counter = 0
```

### Form Submission
```python
with st.form("my_form"):
    st.write("Submit form once")
    name = st.text_input("Name")
    age = st.number_input("Age", min_value=0, max_value=120)
    submitted = st.form_submit_button("Submit")
    
if submitted:
    st.write(f"Name: {name}, Age: {age}")
```

## PERFORMANCE OPTIMIZATION
------------------------

### Caching
```python
@st.cache_data
def fetch_data(url):
    return pd.read_csv(url)

@st.cache_resource
def create_model():
    return TrainComplexModel()

if st.button("Clear cached data"):
    st.cache_data.clear()
```

### Efficient Rerunning
```python
if st.button("Run Expensive Calculation"):
    with st.spinner("Calculating..."):
        result = run_expensive_calculation()
    st.write(result)
    
def update_value():
    st.session_state.value = new_value

st.button("Update", on_click=update_value)
```

## DEPLOYMENT
----------

### Local Deployment
```bash
streamlit run app.py
pip freeze > requirements.txt
```

### Cloud Deployment
```bash
# Streamlit Cloud (streamlit.io)
# 1. Push your app to GitHub
# 2. Sign up for Streamlit Cloud
# 3. Deploy from your GitHub repository

# Heroku Deployment
# 1. Create Procfile
echo "web: streamlit run app.py --server.port $PORT" > Procfile
# 2. Create setup.sh
cat > setup.sh << 'EOL'
mkdir -p ~/.streamlit/
echo "[server]
headless = true
port = $PORT
enableCORS = false
" > ~/.streamlit/config.toml
EOL
# 3. Deploy to Heroku
heroku create
git push heroku main
```

### Docker Deployment
```dockerfile
FROM python:3.9-slim

WORKDIR /app

COPY requirements.txt .
RUN pip install -r requirements.txt

COPY . .

EXPOSE 8501

ENTRYPOINT ["streamlit", "run", "app.py", "--server.port=8501"]
```

## BEST PRACTICES
--------------

### App Organization
1. Split large apps into multiple files
2. Use the new Streamlit multipage app feature
3. Put reusable functions in separate modules
4. Use clear, descriptive variable names

### Performance Tips
1. Cache expensive operations with `@st.cache_data` or `@st.cache_resource`
2. Load data incrementally if possible
3. Use efficient data structures
4. Consider using st.empty() for dynamic content

### User Experience
1. Design for mobile-first (responsive layouts)
2. Add loading indicators for time-consuming operations
3. Include clear instructions and tooltips
4. Use consistent styling throughout the app

## RESOURCES
---------

### Documentation
- https://docs.streamlit.io/
- https://docs.streamlit.io/library/cheatsheet
- https://streamlit.io/gallery

### Community
- https://discuss.streamlit.io/
- https://github.com/streamlit/streamlit
- https://streamlit.io/components

### Tutorials
- https://www.youtube.com/streamlit
- https://blog.streamlit.io/

This guide should help you create interactive data applications with Streamlit from basic to advanced usage!
