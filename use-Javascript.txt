# COMPREHENSIVE JAVASCRIPT GUIDE
=============================

## WHAT IS JAVASCRIPT?
------------------------

**JavaScript (JS)** is a lightweight, interpreted programming language designed for creating dynamic web content and applications. It is a core technology of the World Wide Web alongside HTML and CSS. JavaScript enables interactive web pages and is an essential part of web applications.

## JAVASCRIPT BASICS
------------------------

### Including JavaScript in HTML
```html
<!-- Internal JavaScript -->
<script>
    // JavaScript code goes here
    console.log("Hello, World!");
</script>

<!-- External JavaScript -->
<script src="script.js"></script>

<!-- Async loading (doesn't block HTML parsing) -->
<script src="script.js" async></script>

<!-- Defer loading (executes after HTML parsing) -->
<script src="script.js" defer></script>
```

### Variables and Data Types
```javascript
// Variables (modern way)
let name = "John";      // String
let age = 30;          // Number
let isStudent = true;  // Boolean
let hobbies = ["music", "sports", "reading"];  // Array
let person = {         // Object
    firstName: "John",
    lastName: "Doe"
};
let nothing = null;    // Null value
let notDefined;        // Undefined

// Constants (cannot be reassigned)
const PI = 3.14159;
const DAYS_IN_WEEK = 7;

// Legacy way (avoid using var)
var oldVariable = "legacy";
```

### Operators
```javascript
// Arithmetic operators
let sum = 5 + 3;       // Addition: 8
let difference = 5 - 3; // Subtraction: 2
let product = 5 * 3;   // Multiplication: 15
let quotient = 5 / 3;  // Division: 1.6666...
let remainder = 5 % 3; // Modulus: 2
let power = 5 ** 3;    // Exponentiation: 125

// Assignment operators
let x = 5;
x += 3;  // x = x + 3 (8)
x -= 2;  // x = x - 2 (6)
x *= 4;  // x = x * 4 (24)
x /= 3;  // x = x / 3 (8)

// Comparison operators
let isEqual = 5 == "5";       // Equal value (true)
let isStrictEqual = 5 === "5"; // Equal value and type (false)
let isNotEqual = 5 != "5";    // Not equal value (false)
let isStrictNotEqual = 5 !== "5"; // Not equal value or type (true)
let isGreater = 5 > 3;        // Greater than (true)
let isLess = 5 < 3;           // Less than (false)

// Logical operators
let and = (5 > 3) && (2 < 4); // Logical AND (true)
let or = (5 < 3) || (2 < 4);  // Logical OR (true)
let not = !(5 > 3);           // Logical NOT (false)

## CONTROL STRUCTURES
------------------------

### Conditionals
```javascript
// If statement
if (age >= 18) {
    console.log("You are an adult");
} else if (age >= 13) {
    console.log("You are a teenager");
} else {
    console.log("You are a child");
}

// Ternary operator
let status = (age >= 18) ? "Adult" : "Minor";

// Switch statement
switch (day) {
    case "Monday":
        console.log("Start of work week");
        break;
    case "Friday":
        console.log("End of work week");
        break;
    case "Saturday":
    case "Sunday":
        console.log("Weekend");
        break;
    default:
        console.log("Midweek");
}
```

### Loops
```javascript
// For loop
for (let i = 0; i < 5; i++) {
    console.log(i); // Outputs 0, 1, 2, 3, 4
}

// For...of loop (for arrays)
const fruits = ["apple", "banana", "cherry"];
for (const fruit of fruits) {
    console.log(fruit); // Outputs apple, banana, cherry
}

// For...in loop (for objects)
const person = {name: "John", age: 30, job: "Developer"};
for (const key in person) {
    console.log(`${key}: ${person[key]}`);
}

// While loop
let i = 0;
while (i < 5) {
    console.log(i); // Outputs 0, 1, 2, 3, 4
    i++;
}

// Do...while loop
let j = 0;
do {
    console.log(j); // Outputs 0, 1, 2, 3, 4
    j++;
} while (j < 5);

// Break and continue
for (let i = 0; i < 10; i++) {
    if (i === 3) continue; // Skip 3
    console.log(i);        // Outputs 0, 1, 2, 4, 5, 6, 7, 8, 9
    if (i === 7) break;    // Stop at 7 (8 and 9 won't be logged)
}
```

## FUNCTIONS
------------------------

### Function Declarations
```javascript
// Basic function
function greet(name) {
    return `Hello, ${name}!`;
}
console.log(greet("John")); // Outputs: Hello, John!

// Function with default parameters
function greetWithDefault(name = "Guest") {
    return `Hello, ${name}!`;
}
console.log(greetWithDefault()); // Outputs: Hello, Guest!

// Function expressions
const square = function(x) {
    return x * x;
};
console.log(square(4)); // Outputs: 16

// Arrow functions
const cube = (x) => x * x * x;
console.log(cube(3)); // Outputs: 27

// Arrow function with multiple parameters
const add = (a, b) => a + b;
console.log(add(5, 3)); // Outputs: 8

// Immediately Invoked Function Expression (IIFE)
(function() {
    console.log("This function runs immediately!");
})();
```

### Function Scope and Closure
```javascript
// Global vs local scope
let globalVar = "I'm global";

function scopeExample() {
    let localVar = "I'm local";
    console.log(globalVar); // Can access global variable
    console.log(localVar);  // Can access local variable
}

scopeExample();
// console.log(localVar); // Error! Cannot access local variable outside function

// Closure example
function createCounter() {
    let count = 0;
    return function() {
        count++;
        return count;
    };
}

const counter = createCounter();
console.log(counter()); // Outputs: 1
console.log(counter()); // Outputs: 2
console.log(counter()); // Outputs: 3
```

## ARRAYS
------------------------

### Array Basics
```javascript
// Creating arrays
let fruits = ["apple", "banana", "cherry"];
let numbers = [1, 2, 3, 4, 5];
let mixed = [1, "two", {three: 3}, [4]];
let arrayConstructor = new Array(1, 2, 3);

// Accessing elements
console.log(fruits[0]);  // Outputs: apple (first element)
console.log(fruits[1]);  // Outputs: banana (second element)
console.log(fruits[fruits.length-1]); // Outputs: cherry (last element)

// Modifying arrays
fruits[1] = "blueberry"; // Replace element
fruits.push("dragonfruit"); // Add to end
fruits.unshift("avocado"); // Add to beginning
let removedLast = fruits.pop(); // Remove from end
let removedFirst = fruits.shift(); // Remove from beginning
```

### Array Methods
```javascript
// Joining arrays
let arr1 = [1, 2];
let arr2 = [3, 4];
let joined = arr1.concat(arr2); // [1, 2, 3, 4]
let spreadJoin = [...arr1, ...arr2]; // [1, 2, 3, 4] (using spread operator)

// Slicing arrays
let nums = [0, 1, 2, 3, 4, 5];
let slice = nums.slice(2, 4); // [2, 3] (start index inclusive, end index exclusive)

// Splicing arrays (modifies original array)
let colors = ["red", "green", "blue"];
colors.splice(1, 0, "yellow"); // Insert at index 1: ["red", "yellow", "green", "blue"]
colors.splice(2, 1); // Remove 1 element at index 2: ["red", "yellow", "blue"]

// Finding elements
let fruits = ["apple", "banana", "cherry", "date"];
let index = fruits.indexOf("banana"); // 1
let lastIndex = fruits.lastIndexOf("apple"); // 0
let includesBanana = fruits.includes("banana"); // true

// Higher-order array methods
let numbers = [1, 2, 3, 4, 5];

// forEach - Execute function for each element
numbers.forEach(num => console.log(num * 2)); // Outputs: 2, 4, 6, 8, 10

// map - Create new array with transformed elements
let doubled = numbers.map(num => num * 2); // [2, 4, 6, 8, 10]

// filter - Create new array with elements that pass test
let evens = numbers.filter(num => num % 2 === 0); // [2, 4]

// reduce - Reduce array to single value
let sum = numbers.reduce((acc, num) => acc + num, 0); // 15

// find - Return first element that passes test
let firstEven = numbers.find(num => num % 2 === 0); // 2

// some - Check if at least one element passes test
let hasEven = numbers.some(num => num % 2 === 0); // true

// every - Check if all elements pass test
let allEven = numbers.every(num => num % 2 === 0); // false

// sort - Sort elements (modifies original array)
let unsorted = [3, 1, 4, 2, 5];
unsorted.sort(); // [1, 2, 3, 4, 5]
unsorted.sort((a, b) => b - a); // [5, 4, 3, 2, 1] (descending)
```

## OBJECTS
------------------------

### Object Basics
```javascript
// Creating objects
let person = {
    firstName: "John",
    lastName: "Doe",
    age: 30,
    email: "john@example.com",
    isStudent: false,
    address: {
        street: "123 Main St",
        city: "New York",
        country: "USA"
    },
    hobbies: ["music", "sports", "reading"],
    greet: function() {
        return `Hello, my name is ${this.firstName} ${this.lastName}`;
    }
};

// Accessing properties
console.log(person.firstName); // Dot notation: "John"
console.log(person["lastName"]); // Bracket notation: "Doe"
console.log(person.address.city); // Nested property: "New York"
console.log(person.greet()); // Method call: "Hello, my name is John Doe"

// Adding and modifying properties
person.phone = "555-1234"; // Add new property
person.age = 31; // Modify existing property
delete person.isStudent; // Remove property

// Property shorthand (ES6+)
let name = "Alice";
let job = "Developer";
let user = { name, job }; // Same as { name: name, job: job }
```

### Object Methods and Features
```javascript
// Object.keys(), Object.values(), Object.entries()
const person = { name: "John", age: 30, job: "Developer" };
console.log(Object.keys(person)); // ["name", "age", "job"]
console.log(Object.values(person)); // ["John", 30, "Developer"]
console.log(Object.entries(person)); // [["name", "John"], ["age", 30], ["job", "Developer"]]

// Object destructuring
const { name, age } = person; // Extract properties into variables
console.log(name, age); // "John", 30

// With aliases
const { name: fullName, age: years } = person;
console.log(fullName, years); // "John", 30

// With defaults
const { name, hobby = "coding" } = person;
console.log(hobby); // "coding" (default value when not present)

// Nested destructuring
const user = {
    id: 42,
    details: {
        firstName: "Jane",
        lastName: "Doe"
    }
};
const { details: { firstName } } = user;
console.log(firstName); // "Jane"

// Spread operator with objects
const baseObj = { a: 1, b: 2 };
const newObj = { ...baseObj, c: 3 }; // { a: 1, b: 2, c: 3 }
const overrideObj = { ...baseObj, a: 10 }; // { a: 10, b: 2 }

// Object.assign()
const target = { a: 1, b: 2 };
const source = { b: 4, c: 5 };
const result = Object.assign(target, source); // target is now { a: 1, b: 4, c: 5 }
```

## CLASSES AND OOP
------------------------

### ES6 Classes
```javascript
// Class declaration
class Person {
    // Constructor
    constructor(name, age) {
        this.name = name;
        this.age = age;
    }
    
    // Methods
    greet() {
        return `Hello, my name is ${this.name}`;
    }
    
    // Getters and setters
    get info() {
        return `${this.name}, ${this.age} years old`;
    }
    
    set info(value) {
        [this.name, this.age] = value.split(",");
    }
    
    // Static method (called on class, not instance)
    static isAdult(age) {
        return age >= 18;
    }
}

// Creating instances
const john = new Person("John", 30);
console.log(john.greet()); // "Hello, my name is John"
console.log(john.info); // "John, 30 years old"
john.info = "Jane,25";
console.log(john.name); // "Jane"
console.log(Person.isAdult(20)); // true

// Inheritance
class Employee extends Person {
    constructor(name, age, jobTitle) {
        // Call parent constructor
        super(name, age);
        this.jobTitle = jobTitle;
    }
    
    // Override parent method
    greet() {
        return `${super.greet()}, I am a ${this.jobTitle}`;
    }
}

const engineer = new Employee("Bob", 35, "Software Engineer");
console.log(engineer.greet()); // "Hello, my name is Bob, I am a Software Engineer"
```

## ASYNCHRONOUS JAVASCRIPT
------------------------

### Callbacks
```javascript
// Basic callback
function fetchData(callback) {
    setTimeout(() => {
        const data = { id: 1, name: "User" };
        callback(data);
    }, 1000);
}

fetchData(function(data) {
    console.log(data); // { id: 1, name: "User" } after 1 second
});

// Callback hell (avoid this)
getData(function(a) {
    getMoreData(a, function(b) {
        getEvenMoreData(b, function(c) {
            getYetEvenMoreData(c, function(d) {
                // Too many nested callbacks
                console.log(d);
            });
        });
    });
});
```

### Promises
```javascript
// Creating a promise
const promise = new Promise((resolve, reject) => {
    const success = true;
    
    if (success) {
        resolve("Operation succeeded");
    } else {
        reject("Operation failed");
    }
});

// Handling promises
promise
    .then(result => {
        console.log(result); // "Operation succeeded"
        return "Next step";
    })
    .then(result => {
        console.log(result); // "Next step"
    })
    .catch(error => {
        console.error(error); // Only runs if promise is rejected
    })
    .finally(() => {
        console.log("Always runs regardless of success/failure");
    });

// Promise methods
Promise.all([promise1, promise2, promise3]) // Waits for all promises
    .then(results => console.log(results)); // Array of results if all succeed

Promise.race([promise1, promise2]) // Returns first promise to settle
    .then(result => console.log(result));

Promise.allSettled([promise1, promise2]) // Waits for all promises regardless of state
    .then(results => console.log(results)); // Array of objects with status and value/reason

Promise.any([promise1, promise2]) // Returns first promise to fulfill
    .then(result => console.log(result));
```

### Async/Await
```javascript
// Using async/await (modern way to handle promises)
async function fetchUserData(userId) {
    try {
        // await pauses execution until promise resolves
        const user = await fetchUser(userId); // Returns a promise
        const posts = await fetchPosts(user.id); // Returns a promise
        return { user, posts };
    } catch (error) {
        console.error("Error fetching data:", error);
        throw error; // Re-throw or handle error
    }
}

// Using the async function
fetchUserData(1)
    .then(data => console.log(data))
    .catch(error => console.error(error));

// Parallel operations with async/await
async function fetchMultipleData() {
    // Both promises run in parallel
    const [users, products] = await Promise.all([
        fetchUsers(),
        fetchProducts()
    ]);
    return { users, products };
}
```

## DOM MANIPULATION
------------------------

### Selecting Elements
```javascript
// Get element by ID
const main = document.getElementById("main");

// Get elements by class name (returns HTMLCollection)
const items = document.getElementsByClassName("item");

// Get elements by tag name (returns HTMLCollection)
const paragraphs = document.getElementsByTagName("p");

// Query selector (returns first matching element)
const header = document.querySelector("header");
const firstItem = document.querySelector(".item");

// Query selector all (returns NodeList)
const allItems = document.querySelectorAll(".item");
const allLinks = document.querySelectorAll("a[href^='https']");
```

### Modifying Elements
```javascript
// Create element
const div = document.createElement("div");

// Set attributes
div.id = "newDiv";
div.className = "container";
div.setAttribute("data-custom", "value");

// Modify content
div.textContent = "Hello World"; // Text only
div.innerHTML = "<strong>Hello</strong> World"; // HTML content (use with caution)

// Append elements
document.body.appendChild(div); // Add as last child
parentElement.insertBefore(div, referenceElement); // Insert before another element
parentElement.append(div, text, moreElements); // Append multiple nodes
parentElement.prepend(div); // Add as first child

// Remove elements
element.remove(); // Remove element
parentElement.removeChild(childElement); // Remove child element
```

### Event Handling
```javascript
// Adding event listeners
const button = document.querySelector("button");

button.addEventListener("click", function(event) {
    console.log("Button clicked!");
    console.log(event); // Event object
    event.preventDefault(); // Prevent default action
    event.stopPropagation(); // Stop event bubbling
});

// Shorthand event properties
button.onclick = function() {
    console.log("Button clicked via property!");
};

// Common events
// click, dblclick, mousedown, mouseup, mouseover, mouseout, mousemove
// keydown, keyup, keypress
// submit, change, focus, blur
// load, resize, scroll
// DOMContentLoaded

// Event delegation (handling events for multiple elements)
document.getElementById("parent-list").addEventListener("click", function(e) {
    if (e.target.matches("li")) {
        console.log("List item clicked:", e.target.textContent);
    }
});
```

## ERROR HANDLING
------------------------

### Try...Catch
```javascript
try {
    // Code that may throw an error
    const data = JSON.parse(invalidJson);
} catch (error) {
    // Handle the error
    console.error("Error parsing JSON:", error.message);
} finally {
    // Always executes (optional)
    console.log("This always runs");
}

// Throwing custom errors
function divide(a, b) {
    if (b === 0) {
        throw new Error("Cannot divide by zero");
    }
    return a / b;
}

try {
    const result = divide(10, 0);
} catch (error) {
    console.error(error.message); // "Cannot divide by zero"
}

// Custom error types
class ValidationError extends Error {
    constructor(message) {
        super(message);
        this.name = "ValidationError";
    }
}

try {
    throw new ValidationError("Invalid input");
} catch (error) {
    if (error instanceof ValidationError) {
        console.error("Validation error:", error.message);
    } else {
        console.error("Other error:", error.message);
    }
}
```

## MODULES
------------------------

### ES6 Modules
```javascript
// math.js (exporting)
export const PI = 3.14159;

export function add(a, b) {
    return a + b;
}

export function subtract(a, b) {
    return a - b;
}

const multiply = (a, b) => a * b;
export default multiply; // Default export

// app.js (importing)
import multiply, { PI, add, subtract } from './math.js';

console.log(PI); // 3.14159
console.log(add(5, 3)); // 8
console.log(subtract(10, 4)); // 6
console.log(multiply(2, 3)); // 6

// Alternative import syntax
import * as MathUtils from './math.js';
console.log(MathUtils.PI); // 3.14159
console.log(MathUtils.add(1, 2)); // 3
```

## LOCAL STORAGE AND COOKIES
------------------------

### Local Storage
```javascript
// Storing data
localStorage.setItem('username', 'John');
localStorage.setItem('user', JSON.stringify({name: 'John', age: 30}));

// Retrieving data
const username = localStorage.getItem('username');
const user = JSON.parse(localStorage.getItem('user'));

// Removing data
localStorage.removeItem('username');

// Clearing all data
localStorage.clear();
```

### Session Storage
```javascript
// Similar to localStorage but data is deleted when browser session ends
sessionStorage.setItem('tempData', 'value');
const tempData = sessionStorage.getItem('tempData');
sessionStorage.removeItem('tempData');
sessionStorage.clear();
```

### Cookies
```javascript
// Setting a cookie
document.cookie = "username=John; expires=Fri, 31 Dec 2023 23:59:59 GMT; path=/";

// Reading cookies
const cookieValue = document.cookie
  .split('; ')
  .find(row => row.startsWith('username='))
  .split('=')[1];

// Deleting a cookie
document.cookie = "username=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/";
```

## BEST PRACTICES
------------------------

1. **Use modern JavaScript features** (let/const, arrow functions, destructuring, etc.)
2. **Follow consistent naming conventions**
   - camelCase for variables and functions
   - PascalCase for classes
   - UPPER_SNAKE_CASE for constants
3. **Comment your code** (but don't overdo it)
4. **Use strict mode** (`'use strict';`) to catch common errors
5. **Avoid global variables** to prevent namespace pollution
6. **Handle errors properly** with try/catch blocks
7. **Use asynchronous code correctly** (async/await over nested promises/callbacks)
8. **Optimize performance**
   - Minimize DOM manipulation
   - Use event delegation
   - Debounce/throttle intensive operations
9. **Write testable code** with small, focused functions
10. **Use code linting** (ESLint) to maintain code quality

## DEBUGGING JAVASCRIPT
------------------------

### Console Methods
```javascript
console.log("Basic logging");
console.info("Information message");
console.warn("Warning message");
console.error("Error message");
console.table([{name: "John", age: 30}, {name: "Jane", age: 25}]); // Table format
console.time("Timer");
// Code to measure
console.timeEnd("Timer"); // Outputs time elapsed
console.group("Group name");
console.log("Grouped message 1");
console.log("Grouped message 2");
console.groupEnd();
```

### Debugger Statement
```javascript
function problematicFunction() {
    let x = 10;
    let y = 20;
    debugger; // Browser will pause execution here when DevTools is open
    return x * y;
}
```

## MODERN JAVASCRIPT FEATURES (ES6+)
------------------------

### Template Literals
```javascript
const name = "John";
const greeting = `Hello, ${name}!`; // String interpolation
const multiline = `This is
a multiline
string`;
```

### Destructuring
```javascript
// Array destructuring
const [first, second, ...rest] = [1, 2, 3, 4, 5];
console.log(first, second, rest); // 1, 2, [3, 4, 5]

// Object destructuring
const { name, age, job = "Developer" } = { name: "John", age: 30 };
console.log(name, age, job); // "John", 30, "Developer"
```

### Spread Operator
```javascript
// Arrays
const arr1 = [1, 2, 3];
const arr2 = [...arr1, 4, 5]; // [1, 2, 3, 4, 5]

// Objects
const obj1 = { a: 1, b: 2 };
const obj2 = { ...obj1, c: 3 }; // { a: 1, b: 2, c: 3 }
```

### Nullish Coalescing & Optional Chaining
```javascript
// Nullish coalescing (??)
const value = null ?? "default"; // "default"
const zero = 0 ?? "default"; // 0 (preserves falsy values that aren't null/undefined)

// Optional chaining (?.)
const user = { address: { street: "Main St" } };
const street1 = user?.address?.street; // "Main St"
const street2 = user?.contact?.email; // undefined (no error)
```

This guide covers the essential aspects of JavaScript from basics to advanced topics, providing practical examples for each concept.
```