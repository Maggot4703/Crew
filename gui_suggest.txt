# Suggestions for Extending TTS Functionality in Crew GUI

## 1. Add Voice Selection and Rate/Volume Controls
- Implement a "Speech Settings" dialog (see oldgui01.py, oldgui02.py, oldgui03.py for `_show_speech_settings`).
- Allow user to select from available voices (male/female, language, etc.).
- Add sliders for speech rate and volume.
- Save user preferences in config.

## 2. Add Preprocessing for Better Speech Output
- Clean up text before sending to TTS (remove markdown, code blocks, URLs, etc.).
- Optionally split long text into smaller chunks for smoother playback (see `chunk_text` in read_use_file_cli.py).

## 3. Add Pause/Resume Functionality
- Add menu/context options to pause/resume speech (pyttsx3 supports stop, but not true pause; can simulate by chunking and resuming).

## 4. Add Option to Read Table Row as Full Sentence
- When reading a selected item, optionally read all columns as a sentence, not just the first column.
- Example: "Name: John Doe. Age: 30. Role: Engineer."

## 5. Add Keyboard Shortcuts for TTS Actions
- Example: Ctrl+Shift+R to read selection, Ctrl+Shift+S to stop, etc.

## 6. Add TTS Feedback for Errors/Status
- Optionally announce errors or important status messages via TTS for accessibility.

## 7. Add Option to Use Female Voice by Default
- Use the `setup_female_voice` logic (see read_use_file.py, read_use_file.sh, test_tts.py) to set a female voice if available.
- Make this configurable in the Speech Settings dialog.

## 8. Add TTS Test Button
- In Speech Settings, add a button to test the current voice/rate/volume settings.

## 9. Add Option to Read Arbitrary Text
- Add a dialog/menu to enter custom text and have it read aloud (useful for quick notes).

## 10. Add Option to Export Spoken Text to Audio File
- Use pyttsx3's `save_to_file` to export the current details or selection to a WAV file.

---

**Implementation Notes:**
- Do NOT move or alter the TTS setup/init in `__init__` or `setup_state`.
- All new features should be added as new methods, dialogs, or menu/context options.
- Use existing TTS engine instance (`self.tts_engine`).
- For reference implementations, see oldgui01.py, oldgui02.py, oldgui03.py, read_use_file.py, and read_use_file_cli.py.
- For voice selection, use `self.tts_engine.getProperty('voices')` and set with `setProperty('voice', ...)`.
- For rate/volume, use `setProperty('rate', ...)` and `setProperty('volume', ...)`.
- For chunking, see `chunk_text` in read_use_file_cli.py.

---

**Suggested priorities:**
1. Add Speech Settings dialog (voice/rate/volume selection, test button, female voice option)
2. Add text preprocessing for TTS
3. Add keyboard shortcuts and context menu options
4. Add export to audio file (optional, advanced)

---

See also: tests/test_tts.py, tests/test_tts_details.py for TTS test code.
