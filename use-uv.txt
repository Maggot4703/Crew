# COMPREHENSIVE UV (ULTRA VELOCITY) PYTHON PACKAGE MANAGER GUIDE
=============================

## WHAT IS UV?
------------------------

**uv** is a super-fast Python package manager and installer, designed as a drop-in replacement for pip, pip-tools, and virtualenv. It is written in Rust and aims to dramatically speed up Python dependency management and environment creation.

Official site: https://github.com/astral-sh/uv

## INSTALLATION
------------------------

### Install via pipx (recommended)
```bash
pipx install uv
```

### Install via pip
```bash
pip install uv
```

### Install via Homebrew (macOS/Linux)
```bash
brew install astral-sh/uv/uv
```

### Download prebuilt binaries
- Visit https://github.com/astral-sh/uv/releases for binaries for Linux, macOS, and Windows.

## BASIC USAGE
------------------------

### Install packages (like pip)
```bash
uv pip install requests pandas
```

### Uninstall packages
```bash
uv pip uninstall requests
```

### List installed packages
```bash
uv pip list
```

### Show outdated packages
```bash
uv pip list --outdated
```

### Upgrade packages
```bash
uv pip install --upgrade requests
```

### Freeze requirements
```bash
uv pip freeze > requirements.txt
```

### Install from requirements.txt
```bash
uv pip install -r requirements.txt
```

## VIRTUAL ENVIRONMENTS
------------------------

### Create a new virtual environment
```bash
uv venv venv
```

### Activate the virtual environment
```bash
source venv/bin/activate  # On Windows: venv\Scripts\activate
```

### Use uv inside a virtual environment
- Once activated, use `uv pip ...` as you would with pip.

### Remove a virtual environment
```bash
rm -rf venv
```

## ADVANCED USAGE
------------------------

### Compile requirements (like pip-compile)
```bash
uv pip compile pyproject.toml  # or requirements.in
```

### Sync environment (like pip-sync)
```bash
uv pip sync requirements.txt
```

### Use with pyproject.toml
- uv can read dependencies from pyproject.toml and poetry.lock files.

### Use as a drop-in for pip
- You can alias uv to pip for even faster workflows:
```bash
alias pip=uv pip
```

## PERFORMANCE
------------------------
- uv is written in Rust and is much faster than pip, pip-tools, and virtualenv.
- It uses parallel downloads and caching for speed.

## COMMON COMMANDS SUMMARY
------------------------
- `uv pip install <package>`: Install a package
- `uv pip uninstall <package>`: Uninstall a package
- `uv pip list`: List installed packages
- `uv pip freeze`: Output installed packages
- `uv venv <dir>`: Create a virtual environment
- `uv pip compile`: Compile requirements
- `uv pip sync`: Sync environment

## BEST PRACTICES
------------------------
1. Use `uv` for all package management for speed and reliability.
2. Always use virtual environments for project isolation.
3. Use `uv pip compile` and `uv pip sync` for reproducible environments.
4. Regularly update uv to get the latest performance and compatibility improvements.

## RESOURCES
------------------------
- [uv GitHub](https://github.com/astral-sh/uv)
- [uv Documentation](https://github.com/astral-sh/uv#readme)
- [uv PyPI](https://pypi.org/project/uv/)

This guide should help you use uv for fast, modern Python package and environment management!
